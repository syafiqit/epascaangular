/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.8.0 (NJsonSchema v10.3.11.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class BantuanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all Bantuan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfBantuanForViewDto> {
        let url_ = this.baseUrl + "/api/bantuan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfBantuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfBantuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfBantuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfBantuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfBantuanForViewDto>(<any>null);
    }

    /**
     * Get Bantuan by id
     * @param id Bantuan Id
     * @return Success
     */
    getBantuanForEdit(id: number): Observable<GetBantuanForEditDto> {
        let url_ = this.baseUrl + "/api/bantuan/getBantuanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetBantuanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetBantuanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetBantuanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetBantuanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetBantuanForEdit(response: HttpResponseBase): Observable<GetBantuanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBantuanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetBantuanForEditDto>(<any>null);
    }

    /**
     * Create or edit Bantuan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditBantuanDto): Observable<CreateOrEditBantuanDto> {
        let url_ = this.baseUrl + "/api/bantuan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditBantuanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditBantuanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditBantuanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditBantuanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditBantuanDto>(<any>null);
    }
}

export class CreateOrEditBantuanDto implements ICreateOrEditBantuanDto {
    id!: number;
    nama_bantuan!: string;
    status_bantuan!: number;

    constructor(data?: ICreateOrEditBantuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.status_bantuan = _data["status_bantuan"];
        }
    }

    static fromJS(data: any): CreateOrEditBantuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditBantuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_bantuan"] = this.nama_bantuan;
        data["status_bantuan"] = this.status_bantuan;
        return data; 
    }
}

export interface ICreateOrEditBantuanDto {
    id: number;
    nama_bantuan: string;
    status_bantuan: number;
}

export class GetBantuanForEditDto implements IGetBantuanForEditDto {
    bantuan!: CreateOrEditBantuanDto;

    constructor(data?: IGetBantuanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bantuan = _data["bantuan"] ? CreateOrEditBantuanDto.fromJS(_data["bantuan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetBantuanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBantuanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bantuan"] = this.bantuan ? this.bantuan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetBantuanForEditDto {
    bantuan: CreateOrEditBantuanDto;
}

export class GetBantuanForViewDto implements IGetBantuanForViewDto {
    id!: number;
    nama_bantuan!: string;
    status_bantuan!: number;

    constructor(data?: IGetBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.status_bantuan = _data["status_bantuan"];
        }
    }

    static fromJS(data: any): GetBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_bantuan"] = this.nama_bantuan;
        data["status_bantuan"] = this.status_bantuan;
        return data; 
    }
}

export interface IGetBantuanForViewDto {
    id: number;
    nama_bantuan: string;
    status_bantuan: number;
}

/** Bantuan List in Tabular model */
export class PagedResultDtoOfBantuanForViewDto implements IPagedResultDtoOfBantuanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetBantuanForViewDto[];

    constructor(data?: IPagedResultDtoOfBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetBantuanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Bantuan List in Tabular model */
export interface IPagedResultDtoOfBantuanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetBantuanForViewDto[];
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}