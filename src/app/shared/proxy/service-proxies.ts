/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.10.9.0 (NJsonSchema v10.4.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

import * as moment from 'moment';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class AuthServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Register Pengguna
     * @param body Create or edit object
     * @return Success
     */
    registerUser(body: RegisterPenggunaDto): Observable<void> {
        let url_ = this.baseUrl + "/api/auth/registerUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Log masuk
     * @param body Create or edit object
     * @return Success
     */
    login(body: InputLoginDto): Observable<OutputLoginDto> {
        let url_ = this.baseUrl + "/api/auth/login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(<any>response_);
                } catch (e) {
                    return <Observable<OutputLoginDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputLoginDto>><any>_observableThrow(response_);
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<OutputLoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputLoginDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputLoginDto>(<any>null);
    }

    /**
     * Lupa kata laluan
     * @param body Create or edit object
     * @return Success
     */
    forgotPassword(body: InputForgotPasswordDto): Observable<void> {
        let url_ = this.baseUrl + "/api/auth/forgotPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processForgotPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processForgotPassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processForgotPassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Semak kod akses reset
     * @param emel user email address
     * @param kod_akses Kod akses to verify
     * @return Success
     */
    verifyCode(emel: string, kod_akses: string): Observable<void> {
        let url_ = this.baseUrl + "/api/auth/verifyCode?";
        if (emel === undefined || emel === null)
            throw new Error("The parameter 'emel' must be defined and cannot be null.");
        else
            url_ += "emel=" + encodeURIComponent("" + emel) + "&";
        if (kod_akses === undefined || kod_akses === null)
            throw new Error("The parameter 'kod_akses' must be defined and cannot be null.");
        else
            url_ += "kod_akses=" + encodeURIComponent("" + kod_akses) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processVerifyCode(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processVerifyCode(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processVerifyCode(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Tukar kata laluan
     * @param body Create or edit object
     * @return Success
     */
    resetPassword(body: InputResetPasswordDto): Observable<void> {
        let url_ = this.baseUrl + "/api/auth/resetPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processResetPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processResetPassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processResetPassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Update kata laluan pengguna
     * @param body Change Password Input
     * @return Success
     */
    changePassword(body: AuthChangePasswordDto): Observable<void> {
        let url_ = this.baseUrl + "/api/auth/changePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }
}

@Injectable()
export class DashboardServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all getJumlahBantuan
     * @param filterYear (optional) Filter records with a string
     * @return Success
     */
    getJumlahBantuan(filterYear: string | undefined): Observable<TotalJumlahBantuanForViewDto> {
        let url_ = this.baseUrl + "/api/dashboard/getJumlahBantuan?";
        if (filterYear === null)
            throw new Error("The parameter 'filterYear' cannot be null.");
        else if (filterYear !== undefined)
            url_ += "filterYear=" + encodeURIComponent("" + filterYear) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJumlahBantuan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJumlahBantuan(<any>response_);
                } catch (e) {
                    return <Observable<TotalJumlahBantuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TotalJumlahBantuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetJumlahBantuan(response: HttpResponseBase): Observable<TotalJumlahBantuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TotalJumlahBantuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TotalJumlahBantuanForViewDto>(<any>null);
    }

    /**
     * Get all getJumlahBantuanByNegeri
     * @param filterYear (optional) Filter records with a string
     * @return Success
     */
    getJumlahBantuanByNegeri(filterYear: string | undefined): Observable<TotalBantuanByNegeriForViewDto> {
        let url_ = this.baseUrl + "/api/dashboard/getJumlahBantuanByNegeri?";
        if (filterYear === null)
            throw new Error("The parameter 'filterYear' cannot be null.");
        else if (filterYear !== undefined)
            url_ += "filterYear=" + encodeURIComponent("" + filterYear) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetJumlahBantuanByNegeri(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetJumlahBantuanByNegeri(<any>response_);
                } catch (e) {
                    return <Observable<TotalBantuanByNegeriForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<TotalBantuanByNegeriForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetJumlahBantuanByNegeri(response: HttpResponseBase): Observable<TotalBantuanByNegeriForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TotalBantuanByNegeriForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<TotalBantuanByNegeriForViewDto>(<any>null);
    }
}

@Injectable()
export class LaporanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all Laporan Mangsa
     * @param filter (optional) Filter records with a string
     * @param filterAgensi (optional) Filter records with a integer
     * @param filterKementerian (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsa(filter: string | undefined, filterAgensi: number | undefined, filterKementerian: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsa?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterAgensi === null)
            throw new Error("The parameter 'filterAgensi' cannot be null.");
        else if (filterAgensi !== undefined)
            url_ += "filterAgensi=" + encodeURIComponent("" + filterAgensi) + "&";
        if (filterKementerian === null)
            throw new Error("The parameter 'filterKementerian' cannot be null.");
        else if (filterKementerian !== undefined)
            url_ += "filterKementerian=" + encodeURIComponent("" + filterKementerian) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsa(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBelumTerimaBantuan(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBelumTerimaBantuan?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBelumTerimaBantuan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBelumTerimaBantuan(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBelumTerimaBantuan(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Lain
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanLain(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanLainForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanLain?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanLain(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanLain(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanLainForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanLainForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanLain(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanLainForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanLainForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanLainForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Antarabangsa
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanAntarabangsa(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanAntarabangsa?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanAntarabangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanAntarabangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanAntarabangsa(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Pinjaman
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanPinjaman(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanPinjamanForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanPinjaman?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanPinjaman(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanPinjaman(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanPinjamanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanPinjamanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanPinjaman(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanPinjamanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanPinjamanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanPinjamanForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Pertanian
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanPertanian(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanPertanianForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanPertanian?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanPertanian(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanPertanian(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanPertanianForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanPertanianForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanPertanian(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanPertanianForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanPertanianForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanPertanianForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Rumah
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param filterJenisBantuan Filter Jenis Bantuan
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanRumah(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, filterJenisBantuan: number, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanRumahForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanRumah?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (filterJenisBantuan === undefined || filterJenisBantuan === null)
            throw new Error("The parameter 'filterJenisBantuan' must be defined and cannot be null.");
        else
            url_ += "filterJenisBantuan=" + encodeURIComponent("" + filterJenisBantuan) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanRumah(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanRumah(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanRumahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanRumahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanRumah(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanRumahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanRumahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanRumahForViewDto>(<any>null);
    }

    /**
     * Get all Laporan Mangsa Bantuan Wang Ihsan
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterDaerah (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllMangsaBantuanWangIhsan(filter: string | undefined, filterNegeri: number | undefined, filterDaerah: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto> {
        let url_ = this.baseUrl + "/api/laporan/getAllMangsaBantuanWangIhsan?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllMangsaBantuanWangIhsan(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllMangsaBantuanWangIhsan(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllMangsaBantuanWangIhsan(response: HttpResponseBase): Observable<PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto>(<any>null);
    }
}

@Injectable()
export class MangsaAirServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaAir
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaAirForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaAir/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaAirForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaAirForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaAirForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaAirForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaAirForViewDto>(<any>null);
    }

    /**
     * Get all MangsaAir by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaAirForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaAir/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaAirForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaAirForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaAirForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaAirForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaAirForViewDto>(<any>null);
    }

    /**
     * Get MangsaAir by id
     * @param id MangsaAir Id
     * @return Success
     */
    getMangsaAirForEdit(id: number): Observable<GetMangsaAirForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaAir/getMangsaAirForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaAirForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaAirForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaAirForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaAirForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaAirForEdit(response: HttpResponseBase): Observable<GetMangsaAirForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaAirForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaAirForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaAir
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaAirDto): Observable<CreateOrEditMangsaAirDto> {
        let url_ = this.baseUrl + "/api/mangsaAir/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaAirDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaAirDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaAirDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaAirDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaAirDto>(<any>null);
    }
}

@Injectable()
export class MangsaAntarabangsaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaAntarabangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaAntarabangsa/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaAntarabangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaAntarabangsaForViewDto>(<any>null);
    }

    /**
     * Get all MangsaAntarabangsa by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaAntarabangsa/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaAntarabangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaAntarabangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaAntarabangsaForViewDto>(<any>null);
    }

    /**
     * Get MangsaAntarabangsa by id
     * @param id MangsaAntarabangsa Id
     * @return Success
     */
    getMangsaAntarabangsaForEdit(id: number): Observable<GetMangsaAntarabangsaForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaAntarabangsa/getMangsaAntarabangsaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaAntarabangsaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaAntarabangsaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaAntarabangsaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaAntarabangsaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaAntarabangsaForEdit(response: HttpResponseBase): Observable<GetMangsaAntarabangsaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaAntarabangsaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaAntarabangsaForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaAntarabangsa
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaAntarabangsaDto): Observable<CreateOrEditMangsaAntarabangsaDto> {
        let url_ = this.baseUrl + "/api/mangsaAntarabangsa/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaAntarabangsaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaAntarabangsaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaAntarabangsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaAntarabangsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaAntarabangsaDto>(<any>null);
    }
}

@Injectable()
export class MangsaBantuanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaBantuan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaBantuanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaBantuan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaBantuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaBantuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaBantuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaBantuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaBantuanForViewDto>(<any>null);
    }

    /**
     * Get all MangsaBantuan by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaBantuanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaBantuan/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaBantuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaBantuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaBantuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaBantuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaBantuanForViewDto>(<any>null);
    }

    /**
     * Get MangsaBantuan by id
     * @param id MangsaBantuan Id
     * @return Success
     */
    getMangsaBantuanForEdit(id: number): Observable<GetMangsaBantuanForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaBantuan/getMangsaBantuanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaBantuanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaBantuanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaBantuanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaBantuanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaBantuanForEdit(response: HttpResponseBase): Observable<GetMangsaBantuanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaBantuanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaBantuanForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaBantuan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaBantuanDto): Observable<CreateOrEditMangsaBantuanDto> {
        let url_ = this.baseUrl + "/api/mangsaBantuan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaBantuanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaBantuanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaBantuanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaBantuanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaBantuanDto>(<any>null);
    }
}

@Injectable()
export class MangsaBencanaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaBencana
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaBencanaForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaBencana/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaBencanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaBencanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaBencanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaBencanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaBencanaForViewDto>(<any>null);
    }

    /**
     * Get all MangsaBencana by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaBencanaForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaBencana/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaBencanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaBencanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaBencanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaBencanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaBencanaForViewDto>(<any>null);
    }

    /**
     * Get MangsaBencana by id
     * @param id MangsaBencana Id
     * @return Success
     */
    getMangsaBencanaForEdit(id: number): Observable<GetMangsaBencanaForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaBencana/getMangsaBencanaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaBencanaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaBencanaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaBencanaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaBencanaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaBencanaForEdit(response: HttpResponseBase): Observable<GetMangsaBencanaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaBencanaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaBencanaForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaBencana
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaBencanaDto): Observable<CreateOrEditMangsaBencanaDto> {
        let url_ = this.baseUrl + "/api/mangsaBencana/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaBencanaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaBencanaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaBencanaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaBencanaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaBencanaDto>(<any>null);
    }
}

@Injectable()
export class MangsaKerosakanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaKerosakan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaKerosakanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaKerosakan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaKerosakanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaKerosakanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaKerosakanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaKerosakanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaKerosakanForViewDto>(<any>null);
    }

    /**
     * Get all MangsaKerosakan by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaKerosakanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaKerosakan/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaKerosakanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaKerosakanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaKerosakanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaKerosakanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaKerosakanForViewDto>(<any>null);
    }

    /**
     * Get MangsaKerosakan by id
     * @param id MangsaKerosakan Id
     * @return Success
     */
    getMangsaKerosakanForEdit(id: number): Observable<GetMangsaKerosakanForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaKerosakan/getMangsaKerosakanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaKerosakanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaKerosakanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaKerosakanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaKerosakanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaKerosakanForEdit(response: HttpResponseBase): Observable<GetMangsaKerosakanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaKerosakanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaKerosakanForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaKerosakan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaKerosakanDto): Observable<CreateOrEditMangsaKerosakanDto> {
        let url_ = this.baseUrl + "/api/mangsaKerosakan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaKerosakanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaKerosakanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaKerosakanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaKerosakanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaKerosakanDto>(<any>null);
    }
}

@Injectable()
export class MangsaPertanianServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaPertanian
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaPertanianForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaPertanian/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaPertanianForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaPertanianForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaPertanianForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaPertanianForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaPertanianForViewDto>(<any>null);
    }

    /**
     * Get all MangsaPertanian by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaPertanianForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaPertanian/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaPertanianForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaPertanianForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaPertanianForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaPertanianForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaPertanianForViewDto>(<any>null);
    }

    /**
     * Get MangsaPertanian by id
     * @param id MangsaPertanian Id
     * @return Success
     */
    getMangsaPertanianForEdit(id: number): Observable<GetMangsaPertanianForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaPertanian/getMangsaPertanianForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaPertanianForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaPertanianForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaPertanianForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaPertanianForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaPertanianForEdit(response: HttpResponseBase): Observable<GetMangsaPertanianForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaPertanianForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaPertanianForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaPertanian
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaPertanianDto): Observable<CreateOrEditMangsaPertanianDto> {
        let url_ = this.baseUrl + "/api/mangsaPertanian/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaPertanianDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaPertanianDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaPertanianDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaPertanianDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaPertanianDto>(<any>null);
    }
}

@Injectable()
export class MangsaPinjamanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaPinjaman
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaPinjamanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaPinjaman/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaPinjamanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaPinjamanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaPinjamanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaPinjamanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaPinjamanForViewDto>(<any>null);
    }

    /**
     * Get all MangsaPinjaman by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaPinjamanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaPinjaman/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaPinjamanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaPinjamanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaPinjamanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaPinjamanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaPinjamanForViewDto>(<any>null);
    }

    /**
     * Get MangsaPinjaman by id
     * @param id MangsaPinjaman Id
     * @return Success
     */
    getMangsaPinjamanForEdit(id: number): Observable<GetMangsaPinjamanForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaPinjaman/getMangsaPinjamanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaPinjamanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaPinjamanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaPinjamanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaPinjamanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaPinjamanForEdit(response: HttpResponseBase): Observable<GetMangsaPinjamanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaPinjamanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaPinjamanForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaPinjaman
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaPinjamanDto): Observable<CreateOrEditMangsaPinjamanDto> {
        let url_ = this.baseUrl + "/api/mangsaPinjaman/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaPinjamanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaPinjamanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaPinjamanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaPinjamanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaPinjamanDto>(<any>null);
    }
}

@Injectable()
export class MangsaRumahServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaRumah
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaRumahForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaRumah/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaRumahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaRumahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaRumahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaRumahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaRumahForViewDto>(<any>null);
    }

    /**
     * Get all MangsaRumah by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaRumahForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaRumah/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaRumahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaRumahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaRumahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaRumahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaRumahForViewDto>(<any>null);
    }

    /**
     * Get MangsaRumah by id
     * @param id MangsaRumah Id
     * @return Success
     */
    getMangsaRumahForEdit(id: number): Observable<GetMangsaRumahForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaRumah/getMangsaRumahForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaRumahForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaRumahForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaRumahForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaRumahForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaRumahForEdit(response: HttpResponseBase): Observable<GetMangsaRumahForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaRumahForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaRumahForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaRumah
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaRumahDto): Observable<CreateOrEditMangsaRumahDto> {
        let url_ = this.baseUrl + "/api/mangsaRumah/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaRumahDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaRumahDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaRumahDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaRumahDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaRumahDto>(<any>null);
    }
}

@Injectable()
export class MangsaWangIhsanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all MangsaWangIhsan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaWangIhsanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaWangIhsan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaWangIhsanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaWangIhsanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaWangIhsanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaWangIhsanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaWangIhsanForViewDto>(<any>null);
    }

    /**
     * Get all MangsaWangIhsan by Id Mangsa
     * @param idMangsa Filter by Id Mangsa
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllByIdMangsa(idMangsa: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaWangIhsanForViewDto> {
        let url_ = this.baseUrl + "/api/mangsaWangIhsan/getAllByIdMangsa?";
        if (idMangsa === undefined || idMangsa === null)
            throw new Error("The parameter 'idMangsa' must be defined and cannot be null.");
        else
            url_ += "idMangsa=" + encodeURIComponent("" + idMangsa) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllByIdMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllByIdMangsa(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaWangIhsanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaWangIhsanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllByIdMangsa(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaWangIhsanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaWangIhsanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaWangIhsanForViewDto>(<any>null);
    }

    /**
     * Get MangsaWangIhsan by id
     * @param id MangsaWangIhsan Id
     * @return Success
     */
    getMangsaWangIhsanForEdit(id: number): Observable<GetMangsaWangIhsanForEditDto> {
        let url_ = this.baseUrl + "/api/mangsaWangIhsan/getMangsaWangIhsanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaWangIhsanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaWangIhsanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaWangIhsanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaWangIhsanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaWangIhsanForEdit(response: HttpResponseBase): Observable<GetMangsaWangIhsanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaWangIhsanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaWangIhsanForEditDto>(<any>null);
    }

    /**
     * Create or edit MangsaWangIhsan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditMangsaWangIhsanDto): Observable<CreateOrEditMangsaWangIhsanDto> {
        let url_ = this.baseUrl + "/api/mangsaWangIhsan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditMangsaWangIhsanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditMangsaWangIhsanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditMangsaWangIhsanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditMangsaWangIhsanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditMangsaWangIhsanDto>(<any>null);
    }
}

@Injectable()
export class MangsaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all Mangsa
     * @param filter (optional) Filter records with a string
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterAgensi (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, filterNegeri: number | undefined, filterAgensi: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfMangsaForViewDto> {
        let url_ = this.baseUrl + "/api/mangsa/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterAgensi === null)
            throw new Error("The parameter 'filterAgensi' cannot be null.");
        else if (filterAgensi !== undefined)
            url_ += "filterAgensi=" + encodeURIComponent("" + filterAgensi) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfMangsaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfMangsaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfMangsaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfMangsaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfMangsaForViewDto>(<any>null);
    }

    /**
     * Get Mangsa by id
     * @param id Mangsa Id
     * @return Success
     */
    getMangsaForEdit(id: number): Observable<GetMangsaForEditDto> {
        let url_ = this.baseUrl + "/api/mangsa/getMangsaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetMangsaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetMangsaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetMangsaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetMangsaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetMangsaForEdit(response: HttpResponseBase): Observable<GetMangsaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetMangsaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetMangsaForEditDto>(<any>null);
    }

    /**
     * Create or edit Mangsa
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: InputCreateMangsaDto): Observable<InputCreateMangsaDto> {
        let url_ = this.baseUrl + "/api/mangsa/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<InputCreateMangsaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputCreateMangsaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<InputCreateMangsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InputCreateMangsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputCreateMangsaDto>(<any>null);
    }

    /**
     * Store profile mangsa image
     * @param image (optional) 
     * @return Success
     */
    uploadGambarProfilMangsa(image: FileParameter | undefined): Observable<OutputGambarProfilMangsaDto> {
        let url_ = this.baseUrl + "/api/mangsa/uploadGambarProfilMangsa";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("image", image.data, image.fileName ? image.fileName : "image");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadGambarProfilMangsa(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadGambarProfilMangsa(<any>response_);
                } catch (e) {
                    return <Observable<OutputGambarProfilMangsaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputGambarProfilMangsaDto>><any>_observableThrow(response_);
        }));
    }

    protected processUploadGambarProfilMangsa(response: HttpResponseBase): Observable<OutputGambarProfilMangsaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputGambarProfilMangsaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputGambarProfilMangsaDto>(<any>null);
    }
}

@Injectable()
export class RefAgamaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefAgama
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefAgamaForViewDto> {
        let url_ = this.baseUrl + "/api/refAgama/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefAgamaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefAgamaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefAgamaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefAgamaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefAgamaForViewDto>(<any>null);
    }

    /**
     * Get RefAgama by id
     * @param id RefAgama Id
     * @return Success
     */
    getRefAgamaForEdit(id: number): Observable<GetRefAgamaForEditDto> {
        let url_ = this.baseUrl + "/api/refAgama/getRefAgamaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefAgamaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefAgamaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefAgamaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefAgamaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefAgamaForEdit(response: HttpResponseBase): Observable<GetRefAgamaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefAgamaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefAgamaForEditDto>(<any>null);
    }

    /**
     * Get all RefAgama in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefAgamaForDropdown(filter: string | undefined): Observable<GetRefAgamaForListDto> {
        let url_ = this.baseUrl + "/api/refAgama/getRefAgamaForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefAgamaForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefAgamaForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefAgamaForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefAgamaForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefAgamaForDropdown(response: HttpResponseBase): Observable<GetRefAgamaForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefAgamaForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefAgamaForListDto>(<any>null);
    }

    /**
     * Create or edit RefAgama
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefAgamaDto): Observable<CreateOrEditRefAgamaDto> {
        let url_ = this.baseUrl + "/api/refAgama/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefAgamaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefAgamaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefAgamaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefAgamaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefAgamaDto>(<any>null);
    }
}

@Injectable()
export class RefAgensiServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefAgensi
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefAgensiForViewDto> {
        let url_ = this.baseUrl + "/api/refAgensi/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefAgensiForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefAgensiForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefAgensiForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefAgensiForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefAgensiForViewDto>(<any>null);
    }

    /**
     * Get RefAgensi by id
     * @param id RefAgensi Id
     * @return Success
     */
    getRefAgensiForEdit(id: number): Observable<GetRefAgensiForEditDto> {
        let url_ = this.baseUrl + "/api/refAgensi/getRefAgensiForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefAgensiForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefAgensiForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefAgensiForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefAgensiForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefAgensiForEdit(response: HttpResponseBase): Observable<GetRefAgensiForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefAgensiForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefAgensiForEditDto>(<any>null);
    }

    /**
     * Get all RefAgensi in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefAgensiForDropdown(filter: string | undefined): Observable<GetRefAgensiForListDto> {
        let url_ = this.baseUrl + "/api/refAgensi/getRefAgensiForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefAgensiForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefAgensiForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefAgensiForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefAgensiForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefAgensiForDropdown(response: HttpResponseBase): Observable<GetRefAgensiForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefAgensiForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefAgensiForListDto>(<any>null);
    }

    /**
     * Create or edit RefAgensi
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefAgensiDto): Observable<CreateOrEditRefAgensiDto> {
        let url_ = this.baseUrl + "/api/refAgensi/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefAgensiDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefAgensiDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefAgensiDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefAgensiDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefAgensiDto>(<any>null);
    }
}

@Injectable()
export class RefBantuanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefBantuan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefBantuanForViewDto> {
        let url_ = this.baseUrl + "/api/refBantuan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefBantuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefBantuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefBantuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefBantuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefBantuanForViewDto>(<any>null);
    }

    /**
     * Get RefBantuan by id
     * @param id RefBantuan Id
     * @return Success
     */
    getRefBantuanForEdit(id: number): Observable<GetRefBantuanForEditDto> {
        let url_ = this.baseUrl + "/api/refBantuan/getRefBantuanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefBantuanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefBantuanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefBantuanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefBantuanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefBantuanForEdit(response: HttpResponseBase): Observable<GetRefBantuanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefBantuanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefBantuanForEditDto>(<any>null);
    }

    /**
     * Get all RefBantuan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefBantuanForDropdown(filter: string | undefined): Observable<GetRefBantuanForListDto> {
        let url_ = this.baseUrl + "/api/refBantuan/getRefBantuanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefBantuanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefBantuanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefBantuanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefBantuanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefBantuanForDropdown(response: HttpResponseBase): Observable<GetRefBantuanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefBantuanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefBantuanForListDto>(<any>null);
    }

    /**
     * Create or edit RefBantuan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefBantuanDto): Observable<CreateOrEditRefBantuanDto> {
        let url_ = this.baseUrl + "/api/refBantuan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefBantuanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefBantuanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefBantuanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefBantuanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefBantuanDto>(<any>null);
    }
}

@Injectable()
export class RefBencanaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefBencana
     * @param filter (optional) Filter records with a string
     * @param filterTahun (optional) Filter records with a integer
     * @param filterBencana (optional) Filter records with a string
     * @param filterJenis (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, filterTahun: number | undefined, filterBencana: string | undefined, filterJenis: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefBencanaForViewDto> {
        let url_ = this.baseUrl + "/api/refBencana/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterTahun === null)
            throw new Error("The parameter 'filterTahun' cannot be null.");
        else if (filterTahun !== undefined)
            url_ += "filterTahun=" + encodeURIComponent("" + filterTahun) + "&";
        if (filterBencana === null)
            throw new Error("The parameter 'filterBencana' cannot be null.");
        else if (filterBencana !== undefined)
            url_ += "filterBencana=" + encodeURIComponent("" + filterBencana) + "&";
        if (filterJenis === null)
            throw new Error("The parameter 'filterJenis' cannot be null.");
        else if (filterJenis !== undefined)
            url_ += "filterJenis=" + encodeURIComponent("" + filterJenis) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefBencanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefBencanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefBencanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefBencanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefBencanaForViewDto>(<any>null);
    }

    /**
     * Get RefBencana by id
     * @param id RefBencana Id
     * @return Success
     */
    getRefBencanaForEdit(id: number): Observable<GetRefBencanaForEditDto> {
        let url_ = this.baseUrl + "/api/refBencana/getRefBencanaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefBencanaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefBencanaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefBencanaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefBencanaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefBencanaForEdit(response: HttpResponseBase): Observable<GetRefBencanaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefBencanaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefBencanaForEditDto>(<any>null);
    }

    /**
     * Get all RefBencana in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefBencanaForDropdown(filter: string | undefined): Observable<GetRefBencanaForListDto> {
        let url_ = this.baseUrl + "/api/refBencana/getRefBencanaForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefBencanaForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefBencanaForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefBencanaForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefBencanaForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefBencanaForDropdown(response: HttpResponseBase): Observable<GetRefBencanaForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefBencanaForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefBencanaForListDto>(<any>null);
    }

    /**
     * Create or edit RefBencana
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefBencanaDto): Observable<CreateOrEditRefBencanaDto> {
        let url_ = this.baseUrl + "/api/refBencana/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefBencanaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefBencanaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefBencanaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefBencanaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefBencanaDto>(<any>null);
    }
}

@Injectable()
export class RefDaerahServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefDaerah
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefDaerahForViewDto> {
        let url_ = this.baseUrl + "/api/refDaerah/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefDaerahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefDaerahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefDaerahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefDaerahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefDaerahForViewDto>(<any>null);
    }

    /**
     * Get RefDaerah by id
     * @param id RefDaerah Id
     * @return Success
     */
    getRefDaerahForEdit(id: number): Observable<GetRefDaerahForEditDto> {
        let url_ = this.baseUrl + "/api/refDaerah/getRefDaerahForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefDaerahForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefDaerahForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefDaerahForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefDaerahForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefDaerahForEdit(response: HttpResponseBase): Observable<GetRefDaerahForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefDaerahForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefDaerahForEditDto>(<any>null);
    }

    /**
     * Get all RefDaerah in dropdown list
     * @param filter (optional) Filter records with a string
     * @param id_negeri (optional) Filter records with Negeri
     * @return Success
     */
    getRefDaerahForDropdown(filter: string | undefined, id_negeri: number | undefined): Observable<GetRefDaerahForListDto> {
        let url_ = this.baseUrl + "/api/refDaerah/getRefDaerahForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (id_negeri === null)
            throw new Error("The parameter 'id_negeri' cannot be null.");
        else if (id_negeri !== undefined)
            url_ += "id_negeri=" + encodeURIComponent("" + id_negeri) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefDaerahForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefDaerahForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefDaerahForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefDaerahForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefDaerahForDropdown(response: HttpResponseBase): Observable<GetRefDaerahForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefDaerahForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefDaerahForListDto>(<any>null);
    }

    /**
     * Create or edit RefDaerah
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefDaerahDto): Observable<CreateOrEditRefDaerahDto> {
        let url_ = this.baseUrl + "/api/refDaerah/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefDaerahDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefDaerahDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefDaerahDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefDaerahDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefDaerahDto>(<any>null);
    }
}

@Injectable()
export class RefDunServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefDun
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefDunForViewDto> {
        let url_ = this.baseUrl + "/api/refDun/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefDunForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefDunForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefDunForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefDunForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefDunForViewDto>(<any>null);
    }

    /**
     * Get RefDun by id
     * @param id RefDun Id
     * @return Success
     */
    getRefDunForEdit(id: number): Observable<GetRefDunForEditDto> {
        let url_ = this.baseUrl + "/api/refDun/getRefDunForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefDunForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefDunForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefDunForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefDunForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefDunForEdit(response: HttpResponseBase): Observable<GetRefDunForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefDunForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefDunForEditDto>(<any>null);
    }

    /**
     * Get all RefDun in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefDunForDropdown(filter: string | undefined): Observable<GetRefDunForListDto> {
        let url_ = this.baseUrl + "/api/refDun/getRefDunForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefDunForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefDunForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefDunForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefDunForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefDunForDropdown(response: HttpResponseBase): Observable<GetRefDunForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefDunForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefDunForListDto>(<any>null);
    }

    /**
     * Create or edit RefDun
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefDunDto): Observable<CreateOrEditRefDunDto> {
        let url_ = this.baseUrl + "/api/refDun/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefDunDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefDunDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefDunDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefDunDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefDunDto>(<any>null);
    }
}

@Injectable()
export class RefHubunganServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefHubungan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefHubunganForViewDto> {
        let url_ = this.baseUrl + "/api/refHubungan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefHubunganForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefHubunganForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefHubunganForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefHubunganForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefHubunganForViewDto>(<any>null);
    }

    /**
     * Get RefHubungan by id
     * @param id RefHubungan Id
     * @return Success
     */
    getRefHubunganForEdit(id: number): Observable<GetRefHubunganForEditDto> {
        let url_ = this.baseUrl + "/api/refHubungan/getRefHubunganForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefHubunganForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefHubunganForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefHubunganForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefHubunganForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefHubunganForEdit(response: HttpResponseBase): Observable<GetRefHubunganForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefHubunganForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefHubunganForEditDto>(<any>null);
    }

    /**
     * Get all RefHubungan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefHubunganForDropdown(filter: string | undefined): Observable<GetRefHubunganForListDto> {
        let url_ = this.baseUrl + "/api/refHubungan/getRefHubunganForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefHubunganForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefHubunganForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefHubunganForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefHubunganForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefHubunganForDropdown(response: HttpResponseBase): Observable<GetRefHubunganForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefHubunganForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefHubunganForListDto>(<any>null);
    }

    /**
     * Create or edit RefHubungan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefHubunganDto): Observable<CreateOrEditRefHubunganDto> {
        let url_ = this.baseUrl + "/api/refHubungan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefHubunganDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefHubunganDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefHubunganDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefHubunganDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefHubunganDto>(<any>null);
    }
}

@Injectable()
export class RefJenisBencanaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefJenisBencana
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefJenisBencanaForViewDto> {
        let url_ = this.baseUrl + "/api/refJenisBencana/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefJenisBencanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefJenisBencanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefJenisBencanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefJenisBencanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefJenisBencanaForViewDto>(<any>null);
    }

    /**
     * Get RefJenisBencana by id
     * @param id RefJenisBencana Id
     * @return Success
     */
    getRefJenisBencanaForEdit(id: number): Observable<GetRefJenisBencanaForEditDto> {
        let url_ = this.baseUrl + "/api/refJenisBencana/getRefJenisBencanaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefJenisBencanaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefJenisBencanaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefJenisBencanaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefJenisBencanaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefJenisBencanaForEdit(response: HttpResponseBase): Observable<GetRefJenisBencanaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefJenisBencanaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefJenisBencanaForEditDto>(<any>null);
    }

    /**
     * Get all RefJenisBencana in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefJenisBencanaForDropdown(filter: string | undefined): Observable<GetRefJenisBencanaForListDto> {
        let url_ = this.baseUrl + "/api/refJenisBencana/getRefJenisBencanaForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefJenisBencanaForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefJenisBencanaForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefJenisBencanaForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefJenisBencanaForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefJenisBencanaForDropdown(response: HttpResponseBase): Observable<GetRefJenisBencanaForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefJenisBencanaForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefJenisBencanaForListDto>(<any>null);
    }

    /**
     * Create or edit RefJenisBencana
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefJenisBencanaDto): Observable<CreateOrEditRefJenisBencanaDto> {
        let url_ = this.baseUrl + "/api/refJenisBencana/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefJenisBencanaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefJenisBencanaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefJenisBencanaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefJenisBencanaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefJenisBencanaDto>(<any>null);
    }
}

@Injectable()
export class RefJenisPertanianServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefJenisPertanian
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefJenisPertanianForViewDto> {
        let url_ = this.baseUrl + "/api/refJenisPertanian/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefJenisPertanianForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefJenisPertanianForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefJenisPertanianForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefJenisPertanianForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefJenisPertanianForViewDto>(<any>null);
    }

    /**
     * Get RefJenisPertanian by id
     * @param id RefJenisPertanian Id
     * @return Success
     */
    getRefJenisPertanianForEdit(id: number): Observable<GetRefJenisPertanianForEditDto> {
        let url_ = this.baseUrl + "/api/refJenisPertanian/getRefJenisPertanianForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefJenisPertanianForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefJenisPertanianForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefJenisPertanianForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefJenisPertanianForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefJenisPertanianForEdit(response: HttpResponseBase): Observable<GetRefJenisPertanianForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefJenisPertanianForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefJenisPertanianForEditDto>(<any>null);
    }

    /**
     * Get all RefJenisPertanian in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefJenisPertanianForDropdown(filter: string | undefined): Observable<GetRefJenisPertanianForListDto> {
        let url_ = this.baseUrl + "/api/refJenisPertanian/getRefJenisPertanianForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefJenisPertanianForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefJenisPertanianForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefJenisPertanianForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefJenisPertanianForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefJenisPertanianForDropdown(response: HttpResponseBase): Observable<GetRefJenisPertanianForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefJenisPertanianForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefJenisPertanianForListDto>(<any>null);
    }

    /**
     * Create or edit RefJenisPertanian
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefJenisPertanianDto): Observable<CreateOrEditRefJenisPertanianDto> {
        let url_ = this.baseUrl + "/api/refJenisPertanian/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefJenisPertanianDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefJenisPertanianDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefJenisPertanianDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefJenisPertanianDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefJenisPertanianDto>(<any>null);
    }
}

@Injectable()
export class RefKementerianServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefKementerian
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefKementerianForViewDto> {
        let url_ = this.baseUrl + "/api/refKementerian/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefKementerianForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefKementerianForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefKementerianForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefKementerianForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefKementerianForViewDto>(<any>null);
    }

    /**
     * Get RefKementerian by id
     * @param id RefKementerian Id
     * @return Success
     */
    getRefKementerianForEdit(id: number): Observable<GetRefKementerianForEditDto> {
        let url_ = this.baseUrl + "/api/refKementerian/getRefKementerianForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefKementerianForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefKementerianForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefKementerianForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefKementerianForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefKementerianForEdit(response: HttpResponseBase): Observable<GetRefKementerianForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefKementerianForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefKementerianForEditDto>(<any>null);
    }

    /**
     * Get all RefKementerian in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefKementerianForDropdown(filter: string | undefined): Observable<GetRefKementerianForListDto> {
        let url_ = this.baseUrl + "/api/refKementerian/getRefKementerianForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefKementerianForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefKementerianForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefKementerianForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefKementerianForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefKementerianForDropdown(response: HttpResponseBase): Observable<GetRefKementerianForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefKementerianForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefKementerianForListDto>(<any>null);
    }

    /**
     * Create or edit RefKementerian
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefKementerianDto): Observable<CreateOrEditRefKementerianDto> {
        let url_ = this.baseUrl + "/api/refKementerian/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefKementerianDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefKementerianDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefKementerianDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefKementerianDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefKementerianDto>(<any>null);
    }
}

@Injectable()
export class RefKerosakanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefKerosakan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefKerosakanForViewDto> {
        let url_ = this.baseUrl + "/api/refKerosakan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefKerosakanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefKerosakanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefKerosakanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefKerosakanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefKerosakanForViewDto>(<any>null);
    }

    /**
     * Get RefKerosakan by id
     * @param id RefKerosakan Id
     * @return Success
     */
    getRefKerosakanForEdit(id: number): Observable<GetRefKerosakanForEditDto> {
        let url_ = this.baseUrl + "/api/refKerosakan/getRefKerosakanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefKerosakanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefKerosakanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefKerosakanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefKerosakanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefKerosakanForEdit(response: HttpResponseBase): Observable<GetRefKerosakanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefKerosakanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefKerosakanForEditDto>(<any>null);
    }

    /**
     * Get all RefKerosakan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefKerosakanForDropdown(filter: string | undefined): Observable<GetRefKerosakanForListDto> {
        let url_ = this.baseUrl + "/api/refKerosakan/getRefKerosakanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefKerosakanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefKerosakanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefKerosakanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefKerosakanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefKerosakanForDropdown(response: HttpResponseBase): Observable<GetRefKerosakanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefKerosakanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefKerosakanForListDto>(<any>null);
    }

    /**
     * Create or edit RefKerosakan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefKerosakanDto): Observable<CreateOrEditRefKerosakanDto> {
        let url_ = this.baseUrl + "/api/refKerosakan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefKerosakanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefKerosakanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefKerosakanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefKerosakanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefKerosakanDto>(<any>null);
    }
}

@Injectable()
export class RefMukimServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefMukim
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefMukimForViewDto> {
        let url_ = this.baseUrl + "/api/refMukim/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefMukimForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefMukimForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefMukimForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefMukimForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefMukimForViewDto>(<any>null);
    }

    /**
     * Get RefMukim by id
     * @param id RefMukim Id
     * @return Success
     */
    getRefMukimForEdit(id: number): Observable<GetRefMukimForEditDto> {
        let url_ = this.baseUrl + "/api/refMukim/getRefMukimForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefMukimForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefMukimForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefMukimForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefMukimForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefMukimForEdit(response: HttpResponseBase): Observable<GetRefMukimForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefMukimForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefMukimForEditDto>(<any>null);
    }

    /**
     * Get all RefMukim in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefMukimForDropdown(filter: string | undefined): Observable<GetRefMukimForListDto> {
        let url_ = this.baseUrl + "/api/refMukim/getRefMukimForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefMukimForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefMukimForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefMukimForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefMukimForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefMukimForDropdown(response: HttpResponseBase): Observable<GetRefMukimForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefMukimForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefMukimForListDto>(<any>null);
    }

    /**
     * Create or edit RefMukim
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefMukimDto): Observable<CreateOrEditRefMukimDto> {
        let url_ = this.baseUrl + "/api/refMukim/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefMukimDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefMukimDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefMukimDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefMukimDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefMukimDto>(<any>null);
    }
}

@Injectable()
export class RefNegeriServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefNegeri
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefNegeriForViewDto> {
        let url_ = this.baseUrl + "/api/refNegeri/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefNegeriForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefNegeriForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefNegeriForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefNegeriForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefNegeriForViewDto>(<any>null);
    }

    /**
     * Get RefNegeri by id
     * @param id RefNegeri Id
     * @return Success
     */
    getRefNegeriForEdit(id: number): Observable<GetRefNegeriForEditDto> {
        let url_ = this.baseUrl + "/api/refNegeri/getRefNegeriForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefNegeriForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefNegeriForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefNegeriForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefNegeriForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefNegeriForEdit(response: HttpResponseBase): Observable<GetRefNegeriForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefNegeriForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefNegeriForEditDto>(<any>null);
    }

    /**
     * Get all RefNegeri in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefNegeriForDropdown(filter: string | undefined): Observable<GetRefNegeriForListDto> {
        let url_ = this.baseUrl + "/api/refNegeri/getRefNegeriForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefNegeriForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefNegeriForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefNegeriForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefNegeriForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefNegeriForDropdown(response: HttpResponseBase): Observable<GetRefNegeriForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefNegeriForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefNegeriForListDto>(<any>null);
    }

    /**
     * Create or edit RefNegeri
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefNegeriDto): Observable<CreateOrEditRefNegeriDto> {
        let url_ = this.baseUrl + "/api/refNegeri/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefNegeriDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefNegeriDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefNegeriDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefNegeriDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefNegeriDto>(<any>null);
    }
}

@Injectable()
export class RefParlimenServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefParlimen
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefParlimenForViewDto> {
        let url_ = this.baseUrl + "/api/refParlimen/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefParlimenForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefParlimenForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefParlimenForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefParlimenForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefParlimenForViewDto>(<any>null);
    }

    /**
     * Get RefParlimen by id
     * @param id RefParlimen Id
     * @return Success
     */
    getRefParlimenForEdit(id: number): Observable<GetRefParlimenForEditDto> {
        let url_ = this.baseUrl + "/api/refParlimen/getRefParlimenForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefParlimenForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefParlimenForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefParlimenForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefParlimenForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefParlimenForEdit(response: HttpResponseBase): Observable<GetRefParlimenForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefParlimenForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefParlimenForEditDto>(<any>null);
    }

    /**
     * Get all RefParlimen in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefParlimenForDropdown(filter: string | undefined): Observable<GetRefParlimenForListDto> {
        let url_ = this.baseUrl + "/api/refParlimen/getRefParlimenForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefParlimenForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefParlimenForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefParlimenForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefParlimenForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefParlimenForDropdown(response: HttpResponseBase): Observable<GetRefParlimenForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefParlimenForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefParlimenForListDto>(<any>null);
    }

    /**
     * Create or edit RefParlimen
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefParlimenDto): Observable<CreateOrEditRefParlimenDto> {
        let url_ = this.baseUrl + "/api/refParlimen/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefParlimenDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefParlimenDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefParlimenDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefParlimenDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefParlimenDto>(<any>null);
    }
}

@Injectable()
export class RefPelaksanaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefPelaksana
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefPelaksanaForViewDto> {
        let url_ = this.baseUrl + "/api/refPelaksana/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefPelaksanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefPelaksanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefPelaksanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefPelaksanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefPelaksanaForViewDto>(<any>null);
    }

    /**
     * Get RefPelaksana by id
     * @param id RefPelaksana Id
     * @return Success
     */
    getRefPelaksanaForEdit(id: number): Observable<GetRefPelaksanaForEditDto> {
        let url_ = this.baseUrl + "/api/refPelaksana/getRefPelaksanaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPelaksanaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPelaksanaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPelaksanaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPelaksanaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPelaksanaForEdit(response: HttpResponseBase): Observable<GetRefPelaksanaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPelaksanaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPelaksanaForEditDto>(<any>null);
    }

    /**
     * Get all RefPelaksana in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefPelaksanaForDropdown(filter: string | undefined): Observable<GetRefPelaksanaForListDto> {
        let url_ = this.baseUrl + "/api/refPelaksana/getRefPelaksanaForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPelaksanaForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPelaksanaForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPelaksanaForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPelaksanaForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPelaksanaForDropdown(response: HttpResponseBase): Observable<GetRefPelaksanaForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPelaksanaForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPelaksanaForListDto>(<any>null);
    }

    /**
     * Create or edit RefPelaksana
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefPelaksanaDto): Observable<CreateOrEditRefPelaksanaDto> {
        let url_ = this.baseUrl + "/api/refPelaksana/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefPelaksanaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefPelaksanaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefPelaksanaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefPelaksanaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefPelaksanaDto>(<any>null);
    }
}

@Injectable()
export class RefPemilikServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefPemilik
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefPemilikForViewDto> {
        let url_ = this.baseUrl + "/api/refPemilik/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefPemilikForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefPemilikForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefPemilikForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefPemilikForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefPemilikForViewDto>(<any>null);
    }

    /**
     * Get RefPemilik by id
     * @param id RefPemilik Id
     * @return Success
     */
    getRefPemilikForEdit(id: number): Observable<GetRefPemilikForEditDto> {
        let url_ = this.baseUrl + "/api/refPemilik/getRefPemilikForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPemilikForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPemilikForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPemilikForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPemilikForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPemilikForEdit(response: HttpResponseBase): Observable<GetRefPemilikForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPemilikForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPemilikForEditDto>(<any>null);
    }

    /**
     * Get all RefPemilik in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefPemilikForDropdown(filter: string | undefined): Observable<GetRefPemilikForListDto> {
        let url_ = this.baseUrl + "/api/refPemilik/getRefPemilikForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPemilikForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPemilikForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPemilikForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPemilikForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPemilikForDropdown(response: HttpResponseBase): Observable<GetRefPemilikForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPemilikForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPemilikForListDto>(<any>null);
    }

    /**
     * Create or edit RefPemilik
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefPemilikDto): Observable<CreateOrEditRefPemilikDto> {
        let url_ = this.baseUrl + "/api/refPemilik/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefPemilikDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefPemilikDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefPemilikDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefPemilikDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefPemilikDto>(<any>null);
    }
}

@Injectable()
export class RefPerananServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefPeranan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefPerananForViewDto> {
        let url_ = this.baseUrl + "/api/refPeranan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefPerananForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefPerananForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefPerananForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefPerananForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefPerananForViewDto>(<any>null);
    }

    /**
     * Get RefPeranan by id
     * @param id RefPeranan Id
     * @return Success
     */
    getRefPerananForEdit(id: number): Observable<GetRefPerananForEditDto> {
        let url_ = this.baseUrl + "/api/refPeranan/getRefPerananForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPerananForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPerananForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPerananForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPerananForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPerananForEdit(response: HttpResponseBase): Observable<GetRefPerananForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPerananForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPerananForEditDto>(<any>null);
    }

    /**
     * Get all RefPeranan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefPerananForDropdown(filter: string | undefined): Observable<GetRefPerananForListDto> {
        let url_ = this.baseUrl + "/api/refPeranan/getRefPerananForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPerananForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPerananForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPerananForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPerananForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPerananForDropdown(response: HttpResponseBase): Observable<GetRefPerananForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPerananForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPerananForListDto>(<any>null);
    }

    /**
     * Create or edit RefPeranan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefPerananDto): Observable<CreateOrEditRefPerananDto> {
        let url_ = this.baseUrl + "/api/refPeranan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefPerananDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefPerananDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefPerananDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefPerananDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefPerananDto>(<any>null);
    }
}

@Injectable()
export class RefPindahServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefPindah
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefPindahForViewDto> {
        let url_ = this.baseUrl + "/api/refPindah/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefPindahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefPindahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefPindahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefPindahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefPindahForViewDto>(<any>null);
    }

    /**
     * Get RefPindah by id
     * @param id RefPindah Id
     * @return Success
     */
    getRefPindahForEdit(id: number): Observable<GetRefPindahForEditDto> {
        let url_ = this.baseUrl + "/api/refPindah/getRefPindahForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPindahForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPindahForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPindahForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPindahForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPindahForEdit(response: HttpResponseBase): Observable<GetRefPindahForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPindahForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPindahForEditDto>(<any>null);
    }

    /**
     * Get all RefPindah in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefPindahForDropdown(filter: string | undefined): Observable<GetRefPindahForListDto> {
        let url_ = this.baseUrl + "/api/refPindah/getRefPindahForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPindahForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPindahForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPindahForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPindahForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPindahForDropdown(response: HttpResponseBase): Observable<GetRefPindahForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPindahForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPindahForListDto>(<any>null);
    }

    /**
     * Create or edit RefPindah
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefPindahDto): Observable<CreateOrEditRefPindahDto> {
        let url_ = this.baseUrl + "/api/refPindah/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefPindahDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefPindahDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefPindahDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefPindahDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefPindahDto>(<any>null);
    }
}

@Injectable()
export class RefPinjamanPerniagaanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefPinjamanPerniagaan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefPinjamanPerniagaanForViewDto> {
        let url_ = this.baseUrl + "/api/refPinjamanPerniagaan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefPinjamanPerniagaanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefPinjamanPerniagaanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefPinjamanPerniagaanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefPinjamanPerniagaanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefPinjamanPerniagaanForViewDto>(<any>null);
    }

    /**
     * Get RefPinjamanPerniagaan by id
     * @param id RefPinjamanPerniagaan Id
     * @return Success
     */
    getRefPinjamanPerniagaanForEdit(id: number): Observable<GetRefPinjamanPerniagaanForEditDto> {
        let url_ = this.baseUrl + "/api/refPinjamanPerniagaan/getRefPinjamanPerniagaanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPinjamanPerniagaanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPinjamanPerniagaanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPinjamanPerniagaanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPinjamanPerniagaanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPinjamanPerniagaanForEdit(response: HttpResponseBase): Observable<GetRefPinjamanPerniagaanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPinjamanPerniagaanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPinjamanPerniagaanForEditDto>(<any>null);
    }

    /**
     * Get all RefPinjamanPerniagaan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefPinjamanPerniagaanForDropdown(filter: string | undefined): Observable<GetRefPinjamanPerniagaanForListDto> {
        let url_ = this.baseUrl + "/api/refPinjamanPerniagaan/getRefPinjamanPerniagaanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefPinjamanPerniagaanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefPinjamanPerniagaanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefPinjamanPerniagaanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefPinjamanPerniagaanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefPinjamanPerniagaanForDropdown(response: HttpResponseBase): Observable<GetRefPinjamanPerniagaanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefPinjamanPerniagaanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefPinjamanPerniagaanForListDto>(<any>null);
    }

    /**
     * Create or edit RefPinjamanPerniagaan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefPinjamanPerniagaanDto): Observable<CreateOrEditRefPinjamanPerniagaanDto> {
        let url_ = this.baseUrl + "/api/refPinjamanPerniagaan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefPinjamanPerniagaanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefPinjamanPerniagaanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefPinjamanPerniagaanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefPinjamanPerniagaanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefPinjamanPerniagaanDto>(<any>null);
    }
}

@Injectable()
export class RefRujukanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefRujukan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefRujukanForViewDto> {
        let url_ = this.baseUrl + "/api/refRujukan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefRujukanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefRujukanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefRujukanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefRujukanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefRujukanForViewDto>(<any>null);
    }

    /**
     * Get RefRujukan by id
     * @param id RefRujukan Id
     * @return Success
     */
    getRefRujukanForEdit(id: number): Observable<GetRefRujukanForEditDto> {
        let url_ = this.baseUrl + "/api/refRujukan/getRefRujukanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefRujukanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefRujukanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefRujukanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefRujukanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefRujukanForEdit(response: HttpResponseBase): Observable<GetRefRujukanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefRujukanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefRujukanForEditDto>(<any>null);
    }

    /**
     * Create or edit RefRujukan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefRujukanDto): Observable<CreateOrEditRefRujukanDto> {
        let url_ = this.baseUrl + "/api/refRujukan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefRujukanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefRujukanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefRujukanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefRujukanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefRujukanDto>(<any>null);
    }

    /**
     * Store Rujukan fail
     * @param fail (optional) 
     * @return Success
     */
    uploadFail(fail: FileParameter | undefined): Observable<OutputFail> {
        let url_ = this.baseUrl + "/api/refRujukan/uploadFail";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (fail === null || fail === undefined)
            throw new Error("The parameter 'fail' cannot be null.");
        else
            content_.append("fail", fail.data, fail.fileName ? fail.fileName : "fail");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadFail(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadFail(<any>response_);
                } catch (e) {
                    return <Observable<OutputFail>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputFail>><any>_observableThrow(response_);
        }));
    }

    protected processUploadFail(response: HttpResponseBase): Observable<OutputFail> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputFail.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputFail>(<any>null);
    }
}

@Injectable()
export class RefSektorServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefSektor
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefSektorForViewDto> {
        let url_ = this.baseUrl + "/api/refSektor/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefSektorForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefSektorForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefSektorForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefSektorForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefSektorForViewDto>(<any>null);
    }

    /**
     * Get RefSektor by id
     * @param id RefSektor Id
     * @return Success
     */
    getRefSektorForEdit(id: number): Observable<GetRefSektorForEditDto> {
        let url_ = this.baseUrl + "/api/refSektor/getRefSektorForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSektorForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSektorForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSektorForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSektorForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSektorForEdit(response: HttpResponseBase): Observable<GetRefSektorForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSektorForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSektorForEditDto>(<any>null);
    }

    /**
     * Get all RefSektor in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefSektorForDropdown(filter: string | undefined): Observable<GetRefSektorForListDto> {
        let url_ = this.baseUrl + "/api/refSektor/getRefSektorForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSektorForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSektorForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSektorForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSektorForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSektorForDropdown(response: HttpResponseBase): Observable<GetRefSektorForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSektorForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSektorForListDto>(<any>null);
    }

    /**
     * Create or edit RefSektor
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefSektorDto): Observable<CreateOrEditRefSektorDto> {
        let url_ = this.baseUrl + "/api/refSektor/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefSektorDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefSektorDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefSektorDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefSektorDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefSektorDto>(<any>null);
    }
}

@Injectable()
export class RefStatusKemajuanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefStatusKemajuan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefStatusKemajuanForViewDto> {
        let url_ = this.baseUrl + "/api/refStatusKemajuan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefStatusKemajuanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefStatusKemajuanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefStatusKemajuanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefStatusKemajuanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefStatusKemajuanForViewDto>(<any>null);
    }

    /**
     * Get RefStatusKemajuan by id
     * @param id RefStatusKemajuan Id
     * @return Success
     */
    getRefStatusKemajuanForEdit(id: number): Observable<GetRefStatusKemajuanForEditDto> {
        let url_ = this.baseUrl + "/api/refStatusKemajuan/getRefStatusKemajuanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefStatusKemajuanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefStatusKemajuanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefStatusKemajuanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefStatusKemajuanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefStatusKemajuanForEdit(response: HttpResponseBase): Observable<GetRefStatusKemajuanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefStatusKemajuanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefStatusKemajuanForEditDto>(<any>null);
    }

    /**
     * Get all RefStatusKemajuan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefStatusKemajuanForDropdown(filter: string | undefined): Observable<GetRefStatusKemajuanForListDto> {
        let url_ = this.baseUrl + "/api/refStatusKemajuan/getRefStatusKemajuanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefStatusKemajuanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefStatusKemajuanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefStatusKemajuanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefStatusKemajuanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefStatusKemajuanForDropdown(response: HttpResponseBase): Observable<GetRefStatusKemajuanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefStatusKemajuanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefStatusKemajuanForListDto>(<any>null);
    }

    /**
     * Create or edit RefStatusKemajuan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefStatusKemajuanDto): Observable<CreateOrEditRefStatusKemajuanDto> {
        let url_ = this.baseUrl + "/api/refStatusKemajuan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefStatusKemajuanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefStatusKemajuanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefStatusKemajuanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefStatusKemajuanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefStatusKemajuanDto>(<any>null);
    }
}

@Injectable()
export class RefStatusKerosakanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefStatusKerosakan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefStatusKerosakanForViewDto> {
        let url_ = this.baseUrl + "/api/refStatusKerosakan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefStatusKerosakanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefStatusKerosakanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefStatusKerosakanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefStatusKerosakanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefStatusKerosakanForViewDto>(<any>null);
    }

    /**
     * Get RefStatusKerosakan by id
     * @param id RefStatusKerosakan Id
     * @return Success
     */
    getRefStatusKerosakanForEdit(id: number): Observable<GetRefStatusKerosakanForEditDto> {
        let url_ = this.baseUrl + "/api/refStatusKerosakan/getRefStatusKerosakanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefStatusKerosakanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefStatusKerosakanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefStatusKerosakanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefStatusKerosakanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefStatusKerosakanForEdit(response: HttpResponseBase): Observable<GetRefStatusKerosakanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefStatusKerosakanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefStatusKerosakanForEditDto>(<any>null);
    }

    /**
     * Get all RefStatusKerosakan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefStatusKerosakanForDropdown(filter: string | undefined): Observable<GetRefStatusKerosakanForListDto> {
        let url_ = this.baseUrl + "/api/refStatusKerosakan/getRefStatusKerosakanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefStatusKerosakanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefStatusKerosakanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefStatusKerosakanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefStatusKerosakanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefStatusKerosakanForDropdown(response: HttpResponseBase): Observable<GetRefStatusKerosakanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefStatusKerosakanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefStatusKerosakanForListDto>(<any>null);
    }

    /**
     * Create or edit RefStatusKerosakan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefStatusKerosakanDto): Observable<CreateOrEditRefStatusKerosakanDto> {
        let url_ = this.baseUrl + "/api/refStatusKerosakan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefStatusKerosakanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefStatusKerosakanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefStatusKerosakanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefStatusKerosakanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefStatusKerosakanDto>(<any>null);
    }
}

@Injectable()
export class RefSumberDanaServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefSumberDana
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefSumberDanaForViewDto> {
        let url_ = this.baseUrl + "/api/refSumberDana/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefSumberDanaForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefSumberDanaForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefSumberDanaForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefSumberDanaForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefSumberDanaForViewDto>(<any>null);
    }

    /**
     * Get RefSumberDana by id
     * @param id RefSumberDana Id
     * @return Success
     */
    getRefSumberDanaForEdit(id: number): Observable<GetRefSumberDanaForEditDto> {
        let url_ = this.baseUrl + "/api/refSumberDana/getRefSumberDanaForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSumberDanaForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSumberDanaForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSumberDanaForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSumberDanaForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSumberDanaForEdit(response: HttpResponseBase): Observable<GetRefSumberDanaForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSumberDanaForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSumberDanaForEditDto>(<any>null);
    }

    /**
     * Get all RefSumberDana in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefSumberDanaForDropdown(filter: string | undefined): Observable<GetRefSumberDanaForListDto> {
        let url_ = this.baseUrl + "/api/refSumberDana/getRefSumberDanaForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSumberDanaForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSumberDanaForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSumberDanaForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSumberDanaForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSumberDanaForDropdown(response: HttpResponseBase): Observable<GetRefSumberDanaForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSumberDanaForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSumberDanaForListDto>(<any>null);
    }

    /**
     * Create or edit RefSumberDana
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefSumberDanaDto): Observable<CreateOrEditRefSumberDanaDto> {
        let url_ = this.baseUrl + "/api/refSumberDana/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefSumberDanaDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefSumberDanaDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefSumberDanaDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefSumberDanaDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefSumberDanaDto>(<any>null);
    }
}

@Injectable()
export class RefSumberPeruntukanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefSumberPeruntukan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefSumberPeruntukanForViewDto> {
        let url_ = this.baseUrl + "/api/refSumberPeruntukan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefSumberPeruntukanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefSumberPeruntukanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefSumberPeruntukanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefSumberPeruntukanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefSumberPeruntukanForViewDto>(<any>null);
    }

    /**
     * Get RefSumberPeruntukan by id
     * @param id RefSumberPeruntukan Id
     * @return Success
     */
    getRefSumberPeruntukanForEdit(id: number): Observable<GetRefSumberPeruntukanForEditDto> {
        let url_ = this.baseUrl + "/api/refSumberPeruntukan/getRefSumberPeruntukanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSumberPeruntukanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSumberPeruntukanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSumberPeruntukanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSumberPeruntukanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSumberPeruntukanForEdit(response: HttpResponseBase): Observable<GetRefSumberPeruntukanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSumberPeruntukanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSumberPeruntukanForEditDto>(<any>null);
    }

    /**
     * Get all RefSumberPeruntukan in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefSumberPeruntukanForDropdown(filter: string | undefined): Observable<GetRefSumberPeruntukanForListDto> {
        let url_ = this.baseUrl + "/api/refSumberPeruntukan/getRefSumberPeruntukanForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefSumberPeruntukanForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefSumberPeruntukanForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefSumberPeruntukanForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefSumberPeruntukanForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefSumberPeruntukanForDropdown(response: HttpResponseBase): Observable<GetRefSumberPeruntukanForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefSumberPeruntukanForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefSumberPeruntukanForListDto>(<any>null);
    }

    /**
     * Create or edit RefSumberPeruntukan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefSumberPeruntukanDto): Observable<CreateOrEditRefSumberPeruntukanDto> {
        let url_ = this.baseUrl + "/api/refSumberPeruntukan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefSumberPeruntukanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefSumberPeruntukanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefSumberPeruntukanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefSumberPeruntukanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefSumberPeruntukanDto>(<any>null);
    }
}

@Injectable()
export class RefTapakRumahServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefTapakRumah
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefTapakRumahForViewDto> {
        let url_ = this.baseUrl + "/api/refTapakRumah/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefTapakRumahForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefTapakRumahForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefTapakRumahForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefTapakRumahForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefTapakRumahForViewDto>(<any>null);
    }

    /**
     * Get RefTapakRumah by id
     * @param id RefTapakRumah Id
     * @return Success
     */
    getRefTapakRumahForEdit(id: number): Observable<GetRefTapakRumahForEditDto> {
        let url_ = this.baseUrl + "/api/refTapakRumah/getRefTapakRumahForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefTapakRumahForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefTapakRumahForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefTapakRumahForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefTapakRumahForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefTapakRumahForEdit(response: HttpResponseBase): Observable<GetRefTapakRumahForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefTapakRumahForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefTapakRumahForEditDto>(<any>null);
    }

    /**
     * Get all RefTapakRumah in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefTapakRumahForDropdown(filter: string | undefined): Observable<GetRefTapakRumahForListDto> {
        let url_ = this.baseUrl + "/api/refTapakRumah/getRefTapakRumahForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefTapakRumahForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefTapakRumahForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefTapakRumahForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefTapakRumahForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefTapakRumahForDropdown(response: HttpResponseBase): Observable<GetRefTapakRumahForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefTapakRumahForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefTapakRumahForListDto>(<any>null);
    }

    /**
     * Create or edit RefTapakRumah
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefTapakRumahDto): Observable<CreateOrEditRefTapakRumahDto> {
        let url_ = this.baseUrl + "/api/refTapakRumah/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefTapakRumahDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefTapakRumahDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefTapakRumahDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefTapakRumahDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefTapakRumahDto>(<any>null);
    }
}

@Injectable()
export class RefWarganegaraServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all RefWarganegara
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfRefWarganegaraForViewDto> {
        let url_ = this.baseUrl + "/api/refWarganegara/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfRefWarganegaraForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfRefWarganegaraForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfRefWarganegaraForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfRefWarganegaraForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfRefWarganegaraForViewDto>(<any>null);
    }

    /**
     * Get RefWarganegara by id
     * @param id RefWarganegara Id
     * @return Success
     */
    getRefWarganegaraForEdit(id: number): Observable<GetRefWarganegaraForEditDto> {
        let url_ = this.baseUrl + "/api/refWarganegara/getRefWarganegaraForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefWarganegaraForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefWarganegaraForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetRefWarganegaraForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefWarganegaraForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefWarganegaraForEdit(response: HttpResponseBase): Observable<GetRefWarganegaraForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefWarganegaraForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefWarganegaraForEditDto>(<any>null);
    }

    /**
     * Get all RefWarganegara in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getRefWarganegaraForDropdown(filter: string | undefined): Observable<GetRefWarganegaraForListDto> {
        let url_ = this.baseUrl + "/api/refWarganegara/getRefWarganegaraForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetRefWarganegaraForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetRefWarganegaraForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetRefWarganegaraForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetRefWarganegaraForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetRefWarganegaraForDropdown(response: HttpResponseBase): Observable<GetRefWarganegaraForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetRefWarganegaraForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetRefWarganegaraForListDto>(<any>null);
    }

    /**
     * Create or edit RefWarganegara
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditRefWarganegaraDto): Observable<CreateOrEditRefWarganegaraDto> {
        let url_ = this.baseUrl + "/api/refWarganegara/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditRefWarganegaraDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditRefWarganegaraDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditRefWarganegaraDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditRefWarganegaraDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditRefWarganegaraDto>(<any>null);
    }
}

@Injectable()
export class SessionServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get current login info
     * @return Success
     */
    getProfil(): Observable<GetProfilDto> {
        let url_ = this.baseUrl + "/api/session/getProfil";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetProfil(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetProfil(<any>response_);
                } catch (e) {
                    return <Observable<GetProfilDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetProfilDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetProfil(response: HttpResponseBase): Observable<GetProfilDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetProfilDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetProfilDto>(<any>null);
    }

    /**
     * Update profil pengguna
     * @param body Edit Profil Input
     * @return Success
     */
    updateProfil(body: UpdateProfilDto): Observable<void> {
        let url_ = this.baseUrl + "/api/session/updateProfil";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateProfil(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateProfil(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateProfil(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Update kata laluan pengguna
     * @param body Change Password Input
     * @return Success
     */
    changePassword(body: ChangePasswordDto): Observable<void> {
        let url_ = this.baseUrl + "/api/session/changePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangePassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangePassword(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processChangePassword(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Store profile image
     * @param image (optional) 
     * @return Success
     */
    uploadGambarProfil(image: FileParameter | undefined): Observable<OutputGambarProfil> {
        let url_ = this.baseUrl + "/api/session/uploadGambarProfil";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (image === null || image === undefined)
            throw new Error("The parameter 'image' cannot be null.");
        else
            content_.append("image", image.data, image.fileName ? image.fileName : "image");

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUploadGambarProfil(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUploadGambarProfil(<any>response_);
                } catch (e) {
                    return <Observable<OutputGambarProfil>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputGambarProfil>><any>_observableThrow(response_);
        }));
    }

    protected processUploadGambarProfil(response: HttpResponseBase): Observable<OutputGambarProfil> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputGambarProfil.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputGambarProfil>(<any>null);
    }
}

@Injectable()
export class TabungBayaranSkbBulananServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungBayaranSkbBulanan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkbBulanan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBayaranSkbBulananForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>(<any>null);
    }

    /**
     * Get all TabungBayaranSkbBulanan by IdBayaranSkb
     * @param filter (optional) Filter records with a string
     * @param filterSkb (optional) Filter Id Skb records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllBulananbyIdSkb(filter: string | undefined, filterSkb: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkbBulanan/getAllBulananbyIdSkb?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterSkb === null)
            throw new Error("The parameter 'filterSkb' cannot be null.");
        else if (filterSkb !== undefined)
            url_ += "filterSkb=" + encodeURIComponent("" + filterSkb) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllBulananbyIdSkb(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllBulananbyIdSkb(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllBulananbyIdSkb(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBayaranSkbBulananForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBayaranSkbBulananForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBayaranSkbBulananForViewDto>(<any>null);
    }

    /**
     * Get TabungBayaranSkbBulanan by id
     * @param id TabungBayaranSkbBulanan Id
     * @return Success
     */
    getTabungBayaranSkbBulananForEdit(id: number): Observable<GetTabungBayaranSkbBulananForEditDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkbBulanan/getTabungBayaranSkbBulananForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungBayaranSkbBulananForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungBayaranSkbBulananForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungBayaranSkbBulananForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungBayaranSkbBulananForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungBayaranSkbBulananForEdit(response: HttpResponseBase): Observable<GetTabungBayaranSkbBulananForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungBayaranSkbBulananForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungBayaranSkbBulananForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungBayaranSkbBulanan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungBayaranSkbBulananDto): Observable<OutputCreateSkbBulananDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkbBulanan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<OutputCreateSkbBulananDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputCreateSkbBulananDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<OutputCreateSkbBulananDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputCreateSkbBulananDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputCreateSkbBulananDto>(<any>null);
    }
}

@Injectable()
export class TabungBayaranSkbServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungBayaranSkb
     * @param filter (optional) Filter records with a string
     * @param filterAgensi (optional) Filter records with a integer
     * @param filterTabung (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, filterAgensi: number | undefined, filterTabung: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBayaranSkbForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkb/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterAgensi === null)
            throw new Error("The parameter 'filterAgensi' cannot be null.");
        else if (filterAgensi !== undefined)
            url_ += "filterAgensi=" + encodeURIComponent("" + filterAgensi) + "&";
        if (filterTabung === null)
            throw new Error("The parameter 'filterTabung' cannot be null.");
        else if (filterTabung !== undefined)
            url_ += "filterTabung=" + encodeURIComponent("" + filterTabung) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBayaranSkbForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBayaranSkbForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBayaranSkbForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBayaranSkbForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBayaranSkbForViewDto>(<any>null);
    }

    /**
     * Get TabungBayaranSkb by id
     * @param id TabungBayaranSkb Id
     * @return Success
     */
    getTabungBayaranSkbForEdit(id: number): Observable<GetTabungBayaranSkbForEditDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkb/getTabungBayaranSkbForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungBayaranSkbForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungBayaranSkbForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungBayaranSkbForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungBayaranSkbForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungBayaranSkbForEdit(response: HttpResponseBase): Observable<GetTabungBayaranSkbForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungBayaranSkbForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungBayaranSkbForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungBayaranSkb
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: InputCreateBayaranSkbDto): Observable<OutputCreateBayaranSkbDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranSkb/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<OutputCreateBayaranSkbDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputCreateBayaranSkbDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<OutputCreateBayaranSkbDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputCreateBayaranSkbDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputCreateBayaranSkbDto>(<any>null);
    }
}

@Injectable()
export class TabungBayaranTerusServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungBayaranTerus
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBayaranTerusForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranTerus/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBayaranTerusForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBayaranTerusForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBayaranTerusForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBayaranTerusForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBayaranTerusForViewDto>(<any>null);
    }

    /**
     * Get TabungBayaranTerus by id
     * @param id TabungBayaranTerus Id
     * @return Success
     */
    getTabungBayaranTerusForEdit(id: number): Observable<GetTabungBayaranTerusForEditDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranTerus/getTabungBayaranTerusForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungBayaranTerusForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungBayaranTerusForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungBayaranTerusForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungBayaranTerusForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungBayaranTerusForEdit(response: HttpResponseBase): Observable<GetTabungBayaranTerusForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungBayaranTerusForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungBayaranTerusForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungBayaranTerus
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungBayaranTerusDto): Observable<OutputCreateBayaranTerusDto> {
        let url_ = this.baseUrl + "/api/tabungBayaranTerus/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<OutputCreateBayaranTerusDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputCreateBayaranTerusDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<OutputCreateBayaranTerusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputCreateBayaranTerusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputCreateBayaranTerusDto>(<any>null);
    }
}

@Injectable()
export class TabungBwiKirServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungBwiKir
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBwiKirForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBwiKir/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBwiKirForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBwiKirForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBwiKirForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBwiKirForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBwiKirForViewDto>(<any>null);
    }

    /**
     * Get all TabungBwiKir by Id
     * @param filter (optional) Filter records with a string
     * @param filterKir (optional) Filter Id Kir records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllKirById(filter: string | undefined, filterKir: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBwiKirForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBwiKir/getAllKirById?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterKir === null)
            throw new Error("The parameter 'filterKir' cannot be null.");
        else if (filterKir !== undefined)
            url_ += "filterKir=" + encodeURIComponent("" + filterKir) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllKirById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllKirById(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBwiKirForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBwiKirForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllKirById(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBwiKirForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBwiKirForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBwiKirForViewDto>(<any>null);
    }

    /**
     * Get TabungBwiKir by id
     * @param id TabungBwiKir Id
     * @return Success
     */
    getTabungBwiKirForEdit(id: number): Observable<GetTabungBwiKirForEditDto> {
        let url_ = this.baseUrl + "/api/tabungBwiKir/getTabungBwiKirForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungBwiKirForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungBwiKirForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungBwiKirForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungBwiKirForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungBwiKirForEdit(response: HttpResponseBase): Observable<GetTabungBwiKirForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungBwiKirForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungBwiKirForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungBwiKir
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungBwiKirDto): Observable<CreateOrEditTabungBwiKirDto> {
        let url_ = this.baseUrl + "/api/tabungBwiKir/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditTabungBwiKirDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditTabungBwiKirDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditTabungBwiKirDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditTabungBwiKirDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditTabungBwiKirDto>(<any>null);
    }
}

@Injectable()
export class TabungBwiServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungBwi
     * @param filter (optional) Filter records with a string
     * @param filterDaerah (optional) Filter records with a integer
     * @param filterNegeri (optional) Filter records with a integer
     * @param filterJenisBencana (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, filterDaerah: number | undefined, filterNegeri: number | undefined, filterJenisBencana: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungBwiForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBwi/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (filterJenisBencana === null)
            throw new Error("The parameter 'filterJenisBencana' cannot be null.");
        else if (filterJenisBencana !== undefined)
            url_ += "filterJenisBencana=" + encodeURIComponent("" + filterJenisBencana) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungBwiForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungBwiForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungBwiForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungBwiForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungBwiForViewDto>(<any>null);
    }

    /**
     * Get all TabungBwiKir
     * @param filter (optional) Filter records with a string
     * @param filterDaerah (optional) Filter records with a integer
     * @param filterNegeri (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllKir(filter: string | undefined, filterDaerah: number | undefined, filterNegeri: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<InputResultKirForViewDto> {
        let url_ = this.baseUrl + "/api/tabungBwi/getAllKir?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterDaerah === null)
            throw new Error("The parameter 'filterDaerah' cannot be null.");
        else if (filterDaerah !== undefined)
            url_ += "filterDaerah=" + encodeURIComponent("" + filterDaerah) + "&";
        if (filterNegeri === null)
            throw new Error("The parameter 'filterNegeri' cannot be null.");
        else if (filterNegeri !== undefined)
            url_ += "filterNegeri=" + encodeURIComponent("" + filterNegeri) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllKir(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllKir(<any>response_);
                } catch (e) {
                    return <Observable<InputResultKirForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputResultKirForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllKir(response: HttpResponseBase): Observable<InputResultKirForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InputResultKirForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputResultKirForViewDto>(<any>null);
    }

    /**
     * Get TabungBwi by id
     * @param id TabungBwi Id
     * @return Success
     */
    getTabungBwiForEdit(id: number): Observable<GetTabungBwiForEditDto> {
        let url_ = this.baseUrl + "/api/tabungBwi/getTabungBwiForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungBwiForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungBwiForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungBwiForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungBwiForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungBwiForEdit(response: HttpResponseBase): Observable<GetTabungBwiForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungBwiForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungBwiForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungBwi
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: InputCreateTabungBwiDto): Observable<InputCreateTabungBwiDto> {
        let url_ = this.baseUrl + "/api/tabungBwi/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<InputCreateTabungBwiDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<InputCreateTabungBwiDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<InputCreateTabungBwiDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = InputCreateTabungBwiDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<InputCreateTabungBwiDto>(<any>null);
    }
}

@Injectable()
export class TabungKelulusanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungKelulusan
     * @param filter (optional) Filter records with a string
     * @param filterTabung (optional) Filter records with a integer
     * @param filterJenisBencana (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, filterTabung: number | undefined, filterJenisBencana: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungKelulusanForViewDto> {
        let url_ = this.baseUrl + "/api/tabungKelulusan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterTabung === null)
            throw new Error("The parameter 'filterTabung' cannot be null.");
        else if (filterTabung !== undefined)
            url_ += "filterTabung=" + encodeURIComponent("" + filterTabung) + "&";
        if (filterJenisBencana === null)
            throw new Error("The parameter 'filterJenisBencana' cannot be null.");
        else if (filterJenisBencana !== undefined)
            url_ += "filterJenisBencana=" + encodeURIComponent("" + filterJenisBencana) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungKelulusanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungKelulusanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungKelulusanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungKelulusanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungKelulusanForViewDto>(<any>null);
    }

    /**
     * Get all TabungKelulusan For Lookup Table
     * @param filter (optional) Filter records with a string
     * @param filterTabung (optional) Filter records with a integer
     * @param filterJenisBencana (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllKelulusanForLookupTable(filter: string | undefined, filterTabung: number | undefined, filterJenisBencana: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungKelulusanForViewDto> {
        let url_ = this.baseUrl + "/api/tabungKelulusan/getAllKelulusanForLookupTable?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterTabung === null)
            throw new Error("The parameter 'filterTabung' cannot be null.");
        else if (filterTabung !== undefined)
            url_ += "filterTabung=" + encodeURIComponent("" + filterTabung) + "&";
        if (filterJenisBencana === null)
            throw new Error("The parameter 'filterJenisBencana' cannot be null.");
        else if (filterJenisBencana !== undefined)
            url_ += "filterJenisBencana=" + encodeURIComponent("" + filterJenisBencana) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllKelulusanForLookupTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllKelulusanForLookupTable(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungKelulusanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungKelulusanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllKelulusanForLookupTable(response: HttpResponseBase): Observable<PagedResultDtoOfTabungKelulusanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungKelulusanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungKelulusanForViewDto>(<any>null);
    }

    /**
     * Get TabungKelulusan by id
     * @param id TabungKelulusan Id
     * @return Success
     */
    getTabungKelulusanForEdit(id: number): Observable<GetTabungKelulusanForEditDto> {
        let url_ = this.baseUrl + "/api/tabungKelulusan/getTabungKelulusanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungKelulusanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungKelulusanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungKelulusanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungKelulusanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungKelulusanForEdit(response: HttpResponseBase): Observable<GetTabungKelulusanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungKelulusanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungKelulusanForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungKelulusan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungKelulusanDto): Observable<OutputCreateTabungKelulusanDto> {
        let url_ = this.baseUrl + "/api/tabungKelulusan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<OutputCreateTabungKelulusanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputCreateTabungKelulusanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<OutputCreateTabungKelulusanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputCreateTabungKelulusanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputCreateTabungKelulusanDto>(<any>null);
    }
}

@Injectable()
export class TabungPeruntukanServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all TabungPeruntukan
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungPeruntukanForViewDto> {
        let url_ = this.baseUrl + "/api/tabungPeruntukan/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungPeruntukanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungPeruntukanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungPeruntukanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungPeruntukanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungPeruntukanForViewDto>(<any>null);
    }

    /**
     * Get all TabungPeruntukan by Id Tabung
     * @param idTabung Filter by Id Tabung
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getPeruntukanByIdTabung(idTabung: number, filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungPeruntukanForViewDto> {
        let url_ = this.baseUrl + "/api/tabungPeruntukan/getPeruntukanByIdTabung?";
        if (idTabung === undefined || idTabung === null)
            throw new Error("The parameter 'idTabung' must be defined and cannot be null.");
        else
            url_ += "idTabung=" + encodeURIComponent("" + idTabung) + "&";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetPeruntukanByIdTabung(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetPeruntukanByIdTabung(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungPeruntukanForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungPeruntukanForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetPeruntukanByIdTabung(response: HttpResponseBase): Observable<PagedResultDtoOfTabungPeruntukanForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungPeruntukanForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungPeruntukanForViewDto>(<any>null);
    }

    /**
     * Get TabungPeruntukan by id
     * @param id TabungPeruntukan Id
     * @return Success
     */
    getTabungPeruntukanForEdit(id: number): Observable<GetTabungPeruntukanForEditDto> {
        let url_ = this.baseUrl + "/api/tabungPeruntukan/getTabungPeruntukanForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungPeruntukanForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungPeruntukanForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungPeruntukanForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungPeruntukanForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungPeruntukanForEdit(response: HttpResponseBase): Observable<GetTabungPeruntukanForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungPeruntukanForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungPeruntukanForEditDto>(<any>null);
    }

    /**
     * Create or edit TabungPeruntukan
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungPeruntukanDto): Observable<CreateOrEditTabungPeruntukanDto> {
        let url_ = this.baseUrl + "/api/tabungPeruntukan/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditTabungPeruntukanDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditTabungPeruntukanDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditTabungPeruntukanDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditTabungPeruntukanDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditTabungPeruntukanDto>(<any>null);
    }
}

@Injectable()
export class TabungServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all Tabung
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAll(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungForViewDto> {
        let url_ = this.baseUrl + "/api/tabung/getAll?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAll(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAll(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAll(response: HttpResponseBase): Observable<PagedResultDtoOfTabungForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungForViewDto>(<any>null);
    }

    /**
     * Get all Tabung
     * @param filter (optional) Filter records with a string
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllTabungForLookupTable(filter: string | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfTabungForViewDto> {
        let url_ = this.baseUrl + "/api/tabung/getAllTabungForLookupTable?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllTabungForLookupTable(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllTabungForLookupTable(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfTabungForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfTabungForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllTabungForLookupTable(response: HttpResponseBase): Observable<PagedResultDtoOfTabungForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfTabungForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfTabungForViewDto>(<any>null);
    }

    /**
     * Get all Jumlah Tabung
     * @param month (optional) Filter records with a string
     * @return Success
     */
    getTotalTabungCard(month: string | undefined): Observable<GetTotalTabungCardForViewDto> {
        let url_ = this.baseUrl + "/api/tabung/getTotalTabungCard?";
        if (month === null)
            throw new Error("The parameter 'month' cannot be null.");
        else if (month !== undefined)
            url_ += "month=" + encodeURIComponent("" + month) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTotalTabungCard(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTotalTabungCard(<any>response_);
                } catch (e) {
                    return <Observable<GetTotalTabungCardForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTotalTabungCardForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTotalTabungCard(response: HttpResponseBase): Observable<GetTotalTabungCardForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTotalTabungCardForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTotalTabungCardForViewDto>(<any>null);
    }

    /**
     * Get Tabung by id
     * @param id Tabung Id
     * @return Success
     */
    getTabungForEdit(id: number): Observable<GetTabungForEditDto> {
        let url_ = this.baseUrl + "/api/tabung/getTabungForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungForEdit(response: HttpResponseBase): Observable<GetTabungForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungForEditDto>(<any>null);
    }

    /**
     * Get all Tabung in dropdown list
     * @param filter (optional) Filter records with a string
     * @return Success
     */
    getTabungForDropdown(filter: string | undefined): Observable<GetTabungForListDto> {
        let url_ = this.baseUrl + "/api/tabung/getTabungForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungForDropdown(response: HttpResponseBase): Observable<GetTabungForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungForListDto>(<any>null);
    }

    /**
     * Get all Tabung by Year in dropdown list
     * @param filter (optional) Filter records with a string
     * @param filterYear (optional) Filter year records with a string
     * @return Success
     */
    getTabungByYearForDropdown(filter: string | undefined, filterYear: string | undefined): Observable<GetTabungForListDto> {
        let url_ = this.baseUrl + "/api/tabung/getTabungByYearForDropdown?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterYear === null)
            throw new Error("The parameter 'filterYear' cannot be null.");
        else if (filterYear !== undefined)
            url_ += "filterYear=" + encodeURIComponent("" + filterYear) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetTabungByYearForDropdown(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetTabungByYearForDropdown(<any>response_);
                } catch (e) {
                    return <Observable<GetTabungForListDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetTabungForListDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetTabungByYearForDropdown(response: HttpResponseBase): Observable<GetTabungForListDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetTabungForListDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetTabungForListDto>(<any>null);
    }

    /**
     * Create or edit Tabung
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditTabungDto): Observable<CreateOrEditTabungDto> {
        let url_ = this.baseUrl + "/api/tabung/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<CreateOrEditTabungDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<CreateOrEditTabungDto>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<CreateOrEditTabungDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CreateOrEditTabungDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<CreateOrEditTabungDto>(<any>null);
    }
}

@Injectable()
export class UserServiceProxy {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    /**
     * Get all User
     * @param filter (optional) Filter records with a string
     * @param filterAgensi (optional) Filter records with a integer
     * @param filterPeranan (optional) Filter records with a integer
     * @param filterStatus (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllUser(filter: string | undefined, filterAgensi: number | undefined, filterPeranan: number | undefined, filterStatus: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfUserForViewDto> {
        let url_ = this.baseUrl + "/api/user/getAllUser?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterAgensi === null)
            throw new Error("The parameter 'filterAgensi' cannot be null.");
        else if (filterAgensi !== undefined)
            url_ += "filterAgensi=" + encodeURIComponent("" + filterAgensi) + "&";
        if (filterPeranan === null)
            throw new Error("The parameter 'filterPeranan' cannot be null.");
        else if (filterPeranan !== undefined)
            url_ += "filterPeranan=" + encodeURIComponent("" + filterPeranan) + "&";
        if (filterStatus === null)
            throw new Error("The parameter 'filterStatus' cannot be null.");
        else if (filterStatus !== undefined)
            url_ += "filterStatus=" + encodeURIComponent("" + filterStatus) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllUser(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllUser(response: HttpResponseBase): Observable<PagedResultDtoOfUserForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfUserForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfUserForViewDto>(<any>null);
    }

    /**
     * Get all Permohonan User
     * @param filter (optional) Filter records with a string
     * @param filterAgensi (optional) Filter records with a integer
     * @param filterPeranan (optional) Filter records with a integer
     * @param sorting (optional) Specify column name and sorting value i.e: `column_name asc` or `column_name desc`
     * @param skipCount (optional) Skip n-value of a record
     * @param maxResultCount (optional) Maximum records per page. Default value is 10
     * @return Success
     */
    getAllPermohonanUser(filter: string | undefined, filterAgensi: number | undefined, filterPeranan: number | undefined, sorting: string | undefined, skipCount: number | undefined, maxResultCount: number | undefined): Observable<PagedResultDtoOfUserForViewDto> {
        let url_ = this.baseUrl + "/api/user/getAllPermohonanUser?";
        if (filter === null)
            throw new Error("The parameter 'filter' cannot be null.");
        else if (filter !== undefined)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (filterAgensi === null)
            throw new Error("The parameter 'filterAgensi' cannot be null.");
        else if (filterAgensi !== undefined)
            url_ += "filterAgensi=" + encodeURIComponent("" + filterAgensi) + "&";
        if (filterPeranan === null)
            throw new Error("The parameter 'filterPeranan' cannot be null.");
        else if (filterPeranan !== undefined)
            url_ += "filterPeranan=" + encodeURIComponent("" + filterPeranan) + "&";
        if (sorting === null)
            throw new Error("The parameter 'sorting' cannot be null.");
        else if (sorting !== undefined)
            url_ += "sorting=" + encodeURIComponent("" + sorting) + "&";
        if (skipCount === null)
            throw new Error("The parameter 'skipCount' cannot be null.");
        else if (skipCount !== undefined)
            url_ += "skipCount=" + encodeURIComponent("" + skipCount) + "&";
        if (maxResultCount === null)
            throw new Error("The parameter 'maxResultCount' cannot be null.");
        else if (maxResultCount !== undefined)
            url_ += "maxResultCount=" + encodeURIComponent("" + maxResultCount) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllPermohonanUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllPermohonanUser(<any>response_);
                } catch (e) {
                    return <Observable<PagedResultDtoOfUserForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagedResultDtoOfUserForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetAllPermohonanUser(response: HttpResponseBase): Observable<PagedResultDtoOfUserForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PagedResultDtoOfUserForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagedResultDtoOfUserForViewDto>(<any>null);
    }

    /**
     * approve user
     * @param id user Id
     * @return Success
     */
    approvedUser(id: number): Observable<GetUserForViewDto> {
        let url_ = this.baseUrl + "/api/user/ApprovedUser?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processApprovedUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processApprovedUser(<any>response_);
                } catch (e) {
                    return <Observable<GetUserForViewDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetUserForViewDto>><any>_observableThrow(response_);
        }));
    }

    protected processApprovedUser(response: HttpResponseBase): Observable<GetUserForViewDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserForViewDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserForViewDto>(<any>null);
    }

    /**
     * Get User by id
     * @param id User Id
     * @return Success
     */
    getUserForEdit(id: number): Observable<GetUserForEditDto> {
        let url_ = this.baseUrl + "/api/user/getUserForEdit?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined and cannot be null.");
        else
            url_ += "id=" + encodeURIComponent("" + id) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserForEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserForEdit(<any>response_);
                } catch (e) {
                    return <Observable<GetUserForEditDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<GetUserForEditDto>><any>_observableThrow(response_);
        }));
    }

    protected processGetUserForEdit(response: HttpResponseBase): Observable<GetUserForEditDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetUserForEditDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<GetUserForEditDto>(<any>null);
    }

    /**
     * Create Pengguna
     * @param body Create or edit object
     * @return Success
     */
    createOrEdit(body: CreateOrEditPenggunaDto): Observable<void> {
        let url_ = this.baseUrl + "/api/user/createOrEdit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEdit(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEdit(<any>response_);
                } catch (e) {
                    return <Observable<void>><any>_observableThrow(e);
                }
            } else
                return <Observable<void>><any>_observableThrow(response_);
        }));
    }

    protected processCreateOrEdit(response: HttpResponseBase): Observable<void> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return _observableOf<void>(<any>null);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<void>(<any>null);
    }

    /**
     * Change User emel or paswword
     * @param body Create or edit object
     * @return Success
     */
    changeEmelAndPassword(body: ChangeEmelPasswordDto): Observable<OutputChangeEmelPasswordDto> {
        let url_ = this.baseUrl + "/api/user/changeEmelAndPassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processChangeEmelAndPassword(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processChangeEmelAndPassword(<any>response_);
                } catch (e) {
                    return <Observable<OutputChangeEmelPasswordDto>><any>_observableThrow(e);
                }
            } else
                return <Observable<OutputChangeEmelPasswordDto>><any>_observableThrow(response_);
        }));
    }

    protected processChangeEmelAndPassword(response: HttpResponseBase): Observable<OutputChangeEmelPasswordDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OutputChangeEmelPasswordDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status === 500) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("Internal error has occured", status, _responseText, _headers);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<OutputChangeEmelPasswordDto>(<any>null);
    }
}

export class AuthChangePasswordDto implements IAuthChangePasswordDto {
    kata_laluan_baru!: string;
    ulang_kata_laluan_baru!: string;

    constructor(data?: IAuthChangePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kata_laluan_baru = _data["kata_laluan_baru"];
            this.ulang_kata_laluan_baru = _data["ulang_kata_laluan_baru"];
        }
    }

    static fromJS(data: any): AuthChangePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthChangePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kata_laluan_baru"] = this.kata_laluan_baru;
        data["ulang_kata_laluan_baru"] = this.ulang_kata_laluan_baru;
        return data; 
    }
}

export interface IAuthChangePasswordDto {
    kata_laluan_baru: string;
    ulang_kata_laluan_baru: string;
}

export class InputForgotPasswordDto implements IInputForgotPasswordDto {
    emel!: string;

    constructor(data?: IInputForgotPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emel = _data["emel"];
        }
    }

    static fromJS(data: any): InputForgotPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputForgotPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emel"] = this.emel;
        return data; 
    }
}

export interface IInputForgotPasswordDto {
    emel: string;
}

export class InputLoginDto implements IInputLoginDto {
    emel!: string;
    kata_laluan!: string;

    constructor(data?: IInputLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emel = _data["emel"];
            this.kata_laluan = _data["kata_laluan"];
        }
    }

    static fromJS(data: any): InputLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emel"] = this.emel;
        data["kata_laluan"] = this.kata_laluan;
        return data; 
    }
}

export interface IInputLoginDto {
    emel: string;
    kata_laluan: string;
}

export class InputResetPasswordDto implements IInputResetPasswordDto {
    emel!: string;
    kod_akses!: string;
    kata_laluan!: string;
    ulang_kata_laluan!: string;

    constructor(data?: IInputResetPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.emel = _data["emel"];
            this.kod_akses = _data["kod_akses"];
            this.kata_laluan = _data["kata_laluan"];
            this.ulang_kata_laluan = _data["ulang_kata_laluan"];
        }
    }

    static fromJS(data: any): InputResetPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputResetPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["emel"] = this.emel;
        data["kod_akses"] = this.kod_akses;
        data["kata_laluan"] = this.kata_laluan;
        data["ulang_kata_laluan"] = this.ulang_kata_laluan;
        return data; 
    }
}

export interface IInputResetPasswordDto {
    emel: string;
    kod_akses: string;
    kata_laluan: string;
    ulang_kata_laluan: string;
}

export class OutputLoginDto implements IOutputLoginDto {
    access_token!: string;
    token_type!: string;
    tukar_kata_laluan!: boolean;
    expires_in!: number;
    message!: string;

    constructor(data?: IOutputLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.access_token = _data["access_token"];
            this.token_type = _data["token_type"];
            this.tukar_kata_laluan = _data["tukar_kata_laluan"];
            this.expires_in = _data["expires_in"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["access_token"] = this.access_token;
        data["token_type"] = this.token_type;
        data["tukar_kata_laluan"] = this.tukar_kata_laluan;
        data["expires_in"] = this.expires_in;
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputLoginDto {
    access_token: string;
    token_type: string;
    tukar_kata_laluan: boolean;
    expires_in: number;
    message: string;
}

export class RegisterPenggunaDto implements IRegisterPenggunaDto {
    id!: number;
    nama!: string;
    id_kementerian!: number;
    id_agensi!: number;
    no_kp!: string;
    jawatan!: string;
    alamat1!: string;
    alamat2!: string;
    telefon_pejabat!: string;
    telefon_bimbit!: string;
    fax!: string;
    emel!: string;
    kata_laluan!: string;
    id_peranan!: number;
    poskod!: string;
    id_daerah!: number;
    id_negeri!: number;

    constructor(data?: IRegisterPenggunaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_kementerian = _data["id_kementerian"];
            this.id_agensi = _data["id_agensi"];
            this.no_kp = _data["no_kp"];
            this.jawatan = _data["jawatan"];
            this.alamat1 = _data["alamat1"];
            this.alamat2 = _data["alamat2"];
            this.telefon_pejabat = _data["telefon_pejabat"];
            this.telefon_bimbit = _data["telefon_bimbit"];
            this.fax = _data["fax"];
            this.emel = _data["emel"];
            this.kata_laluan = _data["kata_laluan"];
            this.id_peranan = _data["id_peranan"];
            this.poskod = _data["poskod"];
            this.id_daerah = _data["id_daerah"];
            this.id_negeri = _data["id_negeri"];
        }
    }

    static fromJS(data: any): RegisterPenggunaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterPenggunaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_kementerian"] = this.id_kementerian;
        data["id_agensi"] = this.id_agensi;
        data["no_kp"] = this.no_kp;
        data["jawatan"] = this.jawatan;
        data["alamat1"] = this.alamat1;
        data["alamat2"] = this.alamat2;
        data["telefon_pejabat"] = this.telefon_pejabat;
        data["telefon_bimbit"] = this.telefon_bimbit;
        data["fax"] = this.fax;
        data["emel"] = this.emel;
        data["kata_laluan"] = this.kata_laluan;
        data["id_peranan"] = this.id_peranan;
        data["poskod"] = this.poskod;
        data["id_daerah"] = this.id_daerah;
        data["id_negeri"] = this.id_negeri;
        return data; 
    }
}

export interface IRegisterPenggunaDto {
    id: number;
    nama: string;
    id_kementerian: number;
    id_agensi: number;
    no_kp: string;
    jawatan: string;
    alamat1: string;
    alamat2: string;
    telefon_pejabat: string;
    telefon_bimbit: string;
    fax: string;
    emel: string;
    kata_laluan: string;
    id_peranan: number;
    poskod: string;
    id_daerah: number;
    id_negeri: number;
}

/** Jumlah Bantuan Data For Card */
export class GetJumlahBantuanDto implements IGetJumlahBantuanDto {
    penerima!: number;
    jumlah!: number;

    constructor(data?: IGetJumlahBantuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.penerima = _data["penerima"];
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): GetJumlahBantuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetJumlahBantuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["penerima"] = this.penerima;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

/** Jumlah Bantuan Data For Card */
export interface IGetJumlahBantuanDto {
    penerima: number;
    jumlah: number;
}

export class GetTotalBantuanByNegeriDto implements IGetTotalBantuanByNegeriDto {
    id!: number;
    bilMangsa!: number;
    jumlahBantuan!: number;
    year!: number;
    nama_negeri!: string;

    constructor(data?: IGetTotalBantuanByNegeriDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.bilMangsa = _data["bilMangsa"];
            this.jumlahBantuan = _data["jumlahBantuan"];
            this.year = _data["year"];
            this.nama_negeri = _data["nama_negeri"];
        }
    }

    static fromJS(data: any): GetTotalBantuanByNegeriDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTotalBantuanByNegeriDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["bilMangsa"] = this.bilMangsa;
        data["jumlahBantuan"] = this.jumlahBantuan;
        data["year"] = this.year;
        data["nama_negeri"] = this.nama_negeri;
        return data; 
    }
}

export interface IGetTotalBantuanByNegeriDto {
    id: number;
    bilMangsa: number;
    jumlahBantuan: number;
    year: number;
    nama_negeri: string;
}

/** Jumlah Bantuan By Negeri */
export class TotalBantuanByNegeriForViewDto implements ITotalBantuanByNegeriForViewDto {
    /** Items in array of object */
    items!: GetTotalBantuanByNegeriDto[];

    constructor(data?: ITotalBantuanByNegeriForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTotalBantuanByNegeriDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TotalBantuanByNegeriForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new TotalBantuanByNegeriForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Jumlah Bantuan By Negeri */
export interface ITotalBantuanByNegeriForViewDto {
    /** Items in array of object */
    items: GetTotalBantuanByNegeriDto[];
}

/** Jumlah Bantuan Data For Card */
export class TotalJumlahBantuanForViewDto implements ITotalJumlahBantuanForViewDto {
    jumlahMangsa!: GetJumlahBantuanDto;
    bantuanBwi!: GetJumlahBantuanDto;
    bantuanPinjaman!: GetJumlahBantuanDto;
    bantuanAntarabangsa!: GetJumlahBantuanDto;
    bantuanPertanian!: GetJumlahBantuanDto;
    bantuanLain!: GetJumlahBantuanDto;
    bantuanRumahBaikPulih!: GetJumlahBantuanDto;
    bantuanRumahKekal!: GetJumlahBantuanDto;

    constructor(data?: ITotalJumlahBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jumlahMangsa = _data["jumlahMangsa"] ? GetJumlahBantuanDto.fromJS(_data["jumlahMangsa"]) : <any>undefined;
            this.bantuanBwi = _data["bantuanBwi"] ? GetJumlahBantuanDto.fromJS(_data["bantuanBwi"]) : <any>undefined;
            this.bantuanPinjaman = _data["bantuanPinjaman"] ? GetJumlahBantuanDto.fromJS(_data["bantuanPinjaman"]) : <any>undefined;
            this.bantuanAntarabangsa = _data["bantuanAntarabangsa"] ? GetJumlahBantuanDto.fromJS(_data["bantuanAntarabangsa"]) : <any>undefined;
            this.bantuanPertanian = _data["bantuanPertanian"] ? GetJumlahBantuanDto.fromJS(_data["bantuanPertanian"]) : <any>undefined;
            this.bantuanLain = _data["bantuanLain"] ? GetJumlahBantuanDto.fromJS(_data["bantuanLain"]) : <any>undefined;
            this.bantuanRumahBaikPulih = _data["bantuanRumahBaikPulih"] ? GetJumlahBantuanDto.fromJS(_data["bantuanRumahBaikPulih"]) : <any>undefined;
            this.bantuanRumahKekal = _data["bantuanRumahKekal"] ? GetJumlahBantuanDto.fromJS(_data["bantuanRumahKekal"]) : <any>undefined;
        }
    }

    static fromJS(data: any): TotalJumlahBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new TotalJumlahBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jumlahMangsa"] = this.jumlahMangsa ? this.jumlahMangsa.toJSON() : <any>undefined;
        data["bantuanBwi"] = this.bantuanBwi ? this.bantuanBwi.toJSON() : <any>undefined;
        data["bantuanPinjaman"] = this.bantuanPinjaman ? this.bantuanPinjaman.toJSON() : <any>undefined;
        data["bantuanAntarabangsa"] = this.bantuanAntarabangsa ? this.bantuanAntarabangsa.toJSON() : <any>undefined;
        data["bantuanPertanian"] = this.bantuanPertanian ? this.bantuanPertanian.toJSON() : <any>undefined;
        data["bantuanLain"] = this.bantuanLain ? this.bantuanLain.toJSON() : <any>undefined;
        data["bantuanRumahBaikPulih"] = this.bantuanRumahBaikPulih ? this.bantuanRumahBaikPulih.toJSON() : <any>undefined;
        data["bantuanRumahKekal"] = this.bantuanRumahKekal ? this.bantuanRumahKekal.toJSON() : <any>undefined;
        return data; 
    }
}

/** Jumlah Bantuan Data For Card */
export interface ITotalJumlahBantuanForViewDto {
    jumlahMangsa: GetJumlahBantuanDto;
    bantuanBwi: GetJumlahBantuanDto;
    bantuanPinjaman: GetJumlahBantuanDto;
    bantuanAntarabangsa: GetJumlahBantuanDto;
    bantuanPertanian: GetJumlahBantuanDto;
    bantuanLain: GetJumlahBantuanDto;
    bantuanRumahBaikPulih: GetJumlahBantuanDto;
    bantuanRumahKekal: GetJumlahBantuanDto;
}

export class GetMangsaBantuanAntarabangsaLaporanDto implements IGetMangsaBantuanAntarabangsaLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_bantuan!: string;
    negara!: string;
    tarikh_bantuan!: moment.Moment;
    kos_bantuan!: string;
    catatan!: string;

    constructor(data?: IGetMangsaBantuanAntarabangsaLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.negara = _data["negara"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanAntarabangsaLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanAntarabangsaLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_bantuan"] = this.nama_bantuan;
        data["negara"] = this.negara;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IGetMangsaBantuanAntarabangsaLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_bantuan: string;
    negara: string;
    tarikh_bantuan: moment.Moment;
    kos_bantuan: string;
    catatan: string;
}

export class GetMangsaBantuanLainLaporanDto implements IGetMangsaBantuanLainLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_agensi!: string;
    nama_bantuan!: string;
    nama_sumber_dana!: string;
    sumber_dana_lain!: string;
    tarikh_bantuan!: moment.Moment;
    kos_bantuan!: string;
    catatan!: string;

    constructor(data?: IGetMangsaBantuanLainLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.nama_sumber_dana = _data["nama_sumber_dana"];
            this.sumber_dana_lain = _data["sumber_dana_lain"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanLainLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanLainLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_bantuan"] = this.nama_bantuan;
        data["nama_sumber_dana"] = this.nama_sumber_dana;
        data["sumber_dana_lain"] = this.sumber_dana_lain;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IGetMangsaBantuanLainLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_agensi: string;
    nama_bantuan: string;
    nama_sumber_dana: string;
    sumber_dana_lain: string;
    tarikh_bantuan: moment.Moment;
    kos_bantuan: string;
    catatan: string;
}

export class GetMangsaBantuanPertanianLaporanDto implements IGetMangsaBantuanPertanianLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_agensi!: string;
    nama_jenis_pertanian!: string;
    luas!: number;
    luas_musnah!: number;
    bilangan!: number;
    bilangan_rosak!: number;
    anggaran_nilai_rosak!: number;
    anggaran_nilai_bantuan!: number;
    tarikh_bantuan!: moment.Moment;
    kos_bantuan!: number;
    catatan!: string;

    constructor(data?: IGetMangsaBantuanPertanianLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_jenis_pertanian = _data["nama_jenis_pertanian"];
            this.luas = _data["luas"];
            this.luas_musnah = _data["luas_musnah"];
            this.bilangan = _data["bilangan"];
            this.bilangan_rosak = _data["bilangan_rosak"];
            this.anggaran_nilai_rosak = _data["anggaran_nilai_rosak"];
            this.anggaran_nilai_bantuan = _data["anggaran_nilai_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanPertanianLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanPertanianLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_jenis_pertanian"] = this.nama_jenis_pertanian;
        data["luas"] = this.luas;
        data["luas_musnah"] = this.luas_musnah;
        data["bilangan"] = this.bilangan;
        data["bilangan_rosak"] = this.bilangan_rosak;
        data["anggaran_nilai_rosak"] = this.anggaran_nilai_rosak;
        data["anggaran_nilai_bantuan"] = this.anggaran_nilai_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IGetMangsaBantuanPertanianLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_agensi: string;
    nama_jenis_pertanian: string;
    luas: number;
    luas_musnah: number;
    bilangan: number;
    bilangan_rosak: number;
    anggaran_nilai_rosak: number;
    anggaran_nilai_bantuan: number;
    tarikh_bantuan: moment.Moment;
    kos_bantuan: number;
    catatan: string;
}

export class GetMangsaBantuanPinjamanLaporanDto implements IGetMangsaBantuanPinjamanLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_agensi!: string;
    sektor!: string;
    tarikh_mula!: moment.Moment;
    tempoh_pinjaman!: string;
    jumlah_pinjaman!: string;

    constructor(data?: IGetMangsaBantuanPinjamanLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_agensi = _data["nama_agensi"];
            this.sektor = _data["sektor"];
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
            this.tempoh_pinjaman = _data["tempoh_pinjaman"];
            this.jumlah_pinjaman = _data["jumlah_pinjaman"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanPinjamanLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanPinjamanLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_agensi"] = this.nama_agensi;
        data["sektor"] = this.sektor;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        data["tempoh_pinjaman"] = this.tempoh_pinjaman;
        data["jumlah_pinjaman"] = this.jumlah_pinjaman;
        return data; 
    }
}

export interface IGetMangsaBantuanPinjamanLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_agensi: string;
    sektor: string;
    tarikh_mula: moment.Moment;
    tempoh_pinjaman: string;
    jumlah_pinjaman: string;
}

export class GetMangsaBantuanRumahLaporanDto implements IGetMangsaBantuanRumahLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_pemilik!: string;
    nama_sumber_dana!: string;
    nama_pelaksana!: string;
    tarikh_mula!: moment.Moment;
    tarikh_siap!: moment.Moment;
    peratus_kemajuan!: string;
    status_kemajuan!: string;
    kos_anggaran!: string;
    kos_sebenar!: string;

    constructor(data?: IGetMangsaBantuanRumahLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_pemilik = _data["nama_pemilik"];
            this.nama_sumber_dana = _data["nama_sumber_dana"];
            this.nama_pelaksana = _data["nama_pelaksana"];
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
            this.tarikh_siap = _data["tarikh_siap"] ? moment(_data["tarikh_siap"].toString()) : <any>undefined;
            this.peratus_kemajuan = _data["peratus_kemajuan"];
            this.status_kemajuan = _data["status_kemajuan"];
            this.kos_anggaran = _data["kos_anggaran"];
            this.kos_sebenar = _data["kos_sebenar"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanRumahLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanRumahLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_pemilik"] = this.nama_pemilik;
        data["nama_sumber_dana"] = this.nama_sumber_dana;
        data["nama_pelaksana"] = this.nama_pelaksana;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        data["tarikh_siap"] = this.tarikh_siap ? this.tarikh_siap.toISOString() : <any>undefined;
        data["peratus_kemajuan"] = this.peratus_kemajuan;
        data["status_kemajuan"] = this.status_kemajuan;
        data["kos_anggaran"] = this.kos_anggaran;
        data["kos_sebenar"] = this.kos_sebenar;
        return data; 
    }
}

export interface IGetMangsaBantuanRumahLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_pemilik: string;
    nama_sumber_dana: string;
    nama_pelaksana: string;
    tarikh_mula: moment.Moment;
    tarikh_siap: moment.Moment;
    peratus_kemajuan: string;
    status_kemajuan: string;
    kos_anggaran: string;
    kos_sebenar: string;
}

export class GetMangsaBantuanWangIhsanLaporanDto implements IGetMangsaBantuanWangIhsanLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    tarikh_serahan!: moment.Moment;
    jumlah!: string;

    constructor(data?: IGetMangsaBantuanWangIhsanLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.tarikh_serahan = _data["tarikh_serahan"] ? moment(_data["tarikh_serahan"].toString()) : <any>undefined;
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanWangIhsanLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanWangIhsanLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["tarikh_serahan"] = this.tarikh_serahan ? this.tarikh_serahan.toISOString() : <any>undefined;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface IGetMangsaBantuanWangIhsanLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    tarikh_serahan: moment.Moment;
    jumlah: string;
}

export class GetMangsaLaporanDto implements IGetMangsaLaporanDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    nama_negeri!: string;
    nama_daerah!: string;
    nama_agensi!: string;
    nama_kementerian!: string;
    tarikh_cipta!: moment.Moment;

    constructor(data?: IGetMangsaLaporanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_kementerian = _data["nama_kementerian"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaLaporanDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaLaporanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_kementerian"] = this.nama_kementerian;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaLaporanDto {
    id: number;
    nama: string;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    nama_negeri: string;
    nama_daerah: string;
    nama_agensi: string;
    nama_kementerian: string;
    tarikh_cipta: moment.Moment;
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto implements IPagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanAntarabangsaLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanAntarabangsaLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanAntarabangsaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanAntarabangsaLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanLainForViewDto implements IPagedResultOfLaporanMangsaBantuanLainForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanLainLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanLainForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanLainLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanLainForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanLainForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanLainForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanLainLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanPertanianForViewDto implements IPagedResultOfLaporanMangsaBantuanPertanianForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanPertanianLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanPertanianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanPertanianLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanPertanianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanPertanianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanPertanianForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanPertanianLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanPinjamanForViewDto implements IPagedResultOfLaporanMangsaBantuanPinjamanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanPinjamanLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanPinjamanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanPinjamanLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanPinjamanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanPinjamanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanPinjamanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanPinjamanLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanRumahForViewDto implements IPagedResultOfLaporanMangsaBantuanRumahForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanRumahLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanRumahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanRumahLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanRumahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanRumahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanRumahForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanRumahLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto implements IPagedResultOfLaporanMangsaBantuanWangIhsanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanWangIhsanLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaBantuanWangIhsanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanWangIhsanLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaBantuanWangIhsanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaBantuanWangIhsanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanWangIhsanLaporanDto[];
}

/** Mangsa List in Tabular model */
export class PagedResultOfLaporanMangsaForViewDto implements IPagedResultOfLaporanMangsaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaLaporanDto[];

    constructor(data?: IPagedResultOfLaporanMangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaLaporanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultOfLaporanMangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultOfLaporanMangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultOfLaporanMangsaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaLaporanDto[];
}

export class CreateOrEditMangsaAirDto implements ICreateOrEditMangsaAirDto {
    id!: number;
    id_mangsa!: number;
    nama!: string;
    no_kp!: string;
    id_hubungan!: number;
    umur!: number;
    pekerjaan!: string;
    status_mangsa_air!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditMangsaAirDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_mangsa = _data["id_mangsa"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.id_hubungan = _data["id_hubungan"];
            this.umur = _data["umur"];
            this.pekerjaan = _data["pekerjaan"];
            this.status_mangsa_air = _data["status_mangsa_air"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaAirDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaAirDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_mangsa"] = this.id_mangsa;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["id_hubungan"] = this.id_hubungan;
        data["umur"] = this.umur;
        data["pekerjaan"] = this.pekerjaan;
        data["status_mangsa_air"] = this.status_mangsa_air;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditMangsaAirDto {
    id: number;
    id_mangsa: number;
    nama: string;
    no_kp: string;
    id_hubungan: number;
    umur: number;
    pekerjaan: string;
    status_mangsa_air: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
}

export class GetMangsaAirForEditDto implements IGetMangsaAirForEditDto {
    mangsa_air!: CreateOrEditMangsaAirDto;

    constructor(data?: IGetMangsaAirForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_air = _data["mangsa_air"] ? CreateOrEditMangsaAirDto.fromJS(_data["mangsa_air"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaAirForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaAirForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_air"] = this.mangsa_air ? this.mangsa_air.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaAirForEditDto {
    mangsa_air: CreateOrEditMangsaAirDto;
}

export class GetMangsaAirForViewDto implements IGetMangsaAirForViewDto {
    id!: number;
    id_mangsa!: number;
    nama!: string;
    no_kp!: string;
    id_hubungan!: number;
    umur!: number;
    pekerjaan!: string;
    status_mangsa_air!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;
    nama_hubungan!: string;

    constructor(data?: IGetMangsaAirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_mangsa = _data["id_mangsa"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.id_hubungan = _data["id_hubungan"];
            this.umur = _data["umur"];
            this.pekerjaan = _data["pekerjaan"];
            this.status_mangsa_air = _data["status_mangsa_air"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.nama_hubungan = _data["nama_hubungan"];
        }
    }

    static fromJS(data: any): GetMangsaAirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaAirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_mangsa"] = this.id_mangsa;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["id_hubungan"] = this.id_hubungan;
        data["umur"] = this.umur;
        data["pekerjaan"] = this.pekerjaan;
        data["status_mangsa_air"] = this.status_mangsa_air;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["nama_hubungan"] = this.nama_hubungan;
        return data; 
    }
}

export interface IGetMangsaAirForViewDto {
    id: number;
    id_mangsa: number;
    nama: string;
    no_kp: string;
    id_hubungan: number;
    umur: number;
    pekerjaan: string;
    status_mangsa_air: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
    nama_hubungan: string;
}

/** MangsaAir List in Tabular model */
export class PagedResultDtoOfMangsaAirForViewDto implements IPagedResultDtoOfMangsaAirForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaAirForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaAirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaAirForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaAirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaAirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaAir List in Tabular model */
export interface IPagedResultDtoOfMangsaAirForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaAirForViewDto[];
}

export class CreateOrEditMangsaAntarabangsaDto implements ICreateOrEditMangsaAntarabangsaDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    negara!: string;
    status_mangsa_antarabangsa!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    kos_bantuan!: number;
    tarikh_bantuan!: moment.Moment;
    catatan!: string;
    nama_bantuan!: string;

    constructor(data?: ICreateOrEditMangsaAntarabangsaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.negara = _data["negara"];
            this.status_mangsa_antarabangsa = _data["status_mangsa_antarabangsa"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
            this.nama_bantuan = _data["nama_bantuan"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaAntarabangsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaAntarabangsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["negara"] = this.negara;
        data["status_mangsa_antarabangsa"] = this.status_mangsa_antarabangsa;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        data["nama_bantuan"] = this.nama_bantuan;
        return data; 
    }
}

export interface ICreateOrEditMangsaAntarabangsaDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    negara: string;
    status_mangsa_antarabangsa: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    kos_bantuan: number;
    tarikh_bantuan: moment.Moment;
    catatan: string;
    nama_bantuan: string;
}

export class GetMangsaAntarabangsaForEditDto implements IGetMangsaAntarabangsaForEditDto {
    mangsa_antarabangsa!: CreateOrEditMangsaAntarabangsaDto;

    constructor(data?: IGetMangsaAntarabangsaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_antarabangsa = _data["mangsa_antarabangsa"] ? CreateOrEditMangsaAntarabangsaDto.fromJS(_data["mangsa_antarabangsa"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaAntarabangsaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaAntarabangsaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_antarabangsa"] = this.mangsa_antarabangsa ? this.mangsa_antarabangsa.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaAntarabangsaForEditDto {
    mangsa_antarabangsa: CreateOrEditMangsaAntarabangsaDto;
}

export class GetMangsaAntarabangsaForViewDto implements IGetMangsaAntarabangsaForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    negara!: string;
    status_mangsa_antarabangsa!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    nama_bantuan!: string;
    tarikh_bencana!: moment.Moment;
    kos_bantuan!: number;
    nama_bencana!: string;

    constructor(data?: IGetMangsaAntarabangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.negara = _data["negara"];
            this.status_mangsa_antarabangsa = _data["status_mangsa_antarabangsa"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.nama_bantuan = _data["nama_bantuan"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
            this.nama_bencana = _data["nama_bencana"];
        }
    }

    static fromJS(data: any): GetMangsaAntarabangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaAntarabangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["negara"] = this.negara;
        data["status_mangsa_antarabangsa"] = this.status_mangsa_antarabangsa;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["nama_bantuan"] = this.nama_bantuan;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        data["nama_bencana"] = this.nama_bencana;
        return data; 
    }
}

export interface IGetMangsaAntarabangsaForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    negara: string;
    status_mangsa_antarabangsa: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    nama_bantuan: string;
    tarikh_bencana: moment.Moment;
    kos_bantuan: number;
    nama_bencana: string;
}

/** MangsaAntarabangsa List in Tabular model */
export class PagedResultDtoOfMangsaAntarabangsaForViewDto implements IPagedResultDtoOfMangsaAntarabangsaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaAntarabangsaForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaAntarabangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaAntarabangsaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaAntarabangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaAntarabangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaAntarabangsa List in Tabular model */
export interface IPagedResultDtoOfMangsaAntarabangsaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaAntarabangsaForViewDto[];
}

export class CreateOrEditMangsaBantuanDto implements ICreateOrEditMangsaBantuanDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_sumber_dana!: number;
    sumber_dana_lain!: string;
    id_agensi_bantuan!: number;
    status_mangsa_bantuan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;
    kos_bantuan!: number;
    tarikh_bantuan!: moment.Moment;
    catatan!: string;
    nama_bantuan!: string;

    constructor(data?: ICreateOrEditMangsaBantuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.sumber_dana_lain = _data["sumber_dana_lain"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.status_mangsa_bantuan = _data["status_mangsa_bantuan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.kos_bantuan = _data["kos_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
            this.nama_bantuan = _data["nama_bantuan"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaBantuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaBantuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["sumber_dana_lain"] = this.sumber_dana_lain;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["status_mangsa_bantuan"] = this.status_mangsa_bantuan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["kos_bantuan"] = this.kos_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        data["nama_bantuan"] = this.nama_bantuan;
        return data; 
    }
}

export interface ICreateOrEditMangsaBantuanDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_sumber_dana: number;
    sumber_dana_lain: string;
    id_agensi_bantuan: number;
    status_mangsa_bantuan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
    kos_bantuan: number;
    tarikh_bantuan: moment.Moment;
    catatan: string;
    nama_bantuan: string;
}

export class GetMangsaBantuanForEditDto implements IGetMangsaBantuanForEditDto {
    mangsa_bantuan!: CreateOrEditMangsaBantuanDto;

    constructor(data?: IGetMangsaBantuanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_bantuan = _data["mangsa_bantuan"] ? CreateOrEditMangsaBantuanDto.fromJS(_data["mangsa_bantuan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaBantuanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_bantuan"] = this.mangsa_bantuan ? this.mangsa_bantuan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaBantuanForEditDto {
    mangsa_bantuan: CreateOrEditMangsaBantuanDto;
}

export class GetMangsaBantuanForViewDto implements IGetMangsaBantuanForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_sumber_dana!: number;
    sumber_dana_lain!: string;
    id_agensi_bantuan!: number;
    status_mangsa_bantuan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;
    nama_agensi!: string;
    nama_bencana!: string;
    tarikh_bencana!: moment.Moment;
    kos_bantuan!: number;

    constructor(data?: IGetMangsaBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.sumber_dana_lain = _data["sumber_dana_lain"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.status_mangsa_bantuan = _data["status_mangsa_bantuan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_bencana = _data["nama_bencana"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.kos_bantuan = _data["kos_bantuan"];
        }
    }

    static fromJS(data: any): GetMangsaBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["sumber_dana_lain"] = this.sumber_dana_lain;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["status_mangsa_bantuan"] = this.status_mangsa_bantuan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_bencana"] = this.nama_bencana;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        data["kos_bantuan"] = this.kos_bantuan;
        return data; 
    }
}

export interface IGetMangsaBantuanForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_sumber_dana: number;
    sumber_dana_lain: string;
    id_agensi_bantuan: number;
    status_mangsa_bantuan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
    nama_agensi: string;
    nama_bencana: string;
    tarikh_bencana: moment.Moment;
    kos_bantuan: number;
}

/** MangsaBantuan List in Tabular model */
export class PagedResultDtoOfMangsaBantuanForViewDto implements IPagedResultDtoOfMangsaBantuanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBantuanForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBantuanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaBantuan List in Tabular model */
export interface IPagedResultDtoOfMangsaBantuanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBantuanForViewDto[];
}

export class CreateOrEditMangsaBencanaDto implements ICreateOrEditMangsaBencanaDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_pindah!: number;
    nama_pusat_pemindahan!: string;
    masalah!: string;
    status_mangsa_bencana!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_agensi!: number;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditMangsaBencanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_pindah = _data["id_pindah"];
            this.nama_pusat_pemindahan = _data["nama_pusat_pemindahan"];
            this.masalah = _data["masalah"];
            this.status_mangsa_bencana = _data["status_mangsa_bencana"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaBencanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaBencanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_pindah"] = this.id_pindah;
        data["nama_pusat_pemindahan"] = this.nama_pusat_pemindahan;
        data["masalah"] = this.masalah;
        data["status_mangsa_bencana"] = this.status_mangsa_bencana;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditMangsaBencanaDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_pindah: number;
    nama_pusat_pemindahan: string;
    masalah: string;
    status_mangsa_bencana: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_agensi: number;
    sebab_hapus: string;
}

export class GetMangsaBencanaForEditDto implements IGetMangsaBencanaForEditDto {
    mangsa_bencana!: CreateOrEditMangsaBencanaDto;

    constructor(data?: IGetMangsaBencanaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_bencana = _data["mangsa_bencana"] ? CreateOrEditMangsaBencanaDto.fromJS(_data["mangsa_bencana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaBencanaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBencanaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_bencana"] = this.mangsa_bencana ? this.mangsa_bencana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaBencanaForEditDto {
    mangsa_bencana: CreateOrEditMangsaBencanaDto;
}

export class GetMangsaBencanaForViewDto implements IGetMangsaBencanaForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_pindah!: number;
    nama_pusat_pemindahan!: string;
    masalah!: string;
    status_mangsa_bencana!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_agensi!: number;
    sebab_hapus!: string;
    nama_bencana!: string;
    pindah!: string;
    tahun_bencana!: number;

    constructor(data?: IGetMangsaBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_pindah = _data["id_pindah"];
            this.nama_pusat_pemindahan = _data["nama_pusat_pemindahan"];
            this.masalah = _data["masalah"];
            this.status_mangsa_bencana = _data["status_mangsa_bencana"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.sebab_hapus = _data["sebab_hapus"];
            this.nama_bencana = _data["nama_bencana"];
            this.pindah = _data["pindah"];
            this.tahun_bencana = _data["tahun_bencana"];
        }
    }

    static fromJS(data: any): GetMangsaBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_pindah"] = this.id_pindah;
        data["nama_pusat_pemindahan"] = this.nama_pusat_pemindahan;
        data["masalah"] = this.masalah;
        data["status_mangsa_bencana"] = this.status_mangsa_bencana;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["sebab_hapus"] = this.sebab_hapus;
        data["nama_bencana"] = this.nama_bencana;
        data["pindah"] = this.pindah;
        data["tahun_bencana"] = this.tahun_bencana;
        return data; 
    }
}

export interface IGetMangsaBencanaForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_pindah: number;
    nama_pusat_pemindahan: string;
    masalah: string;
    status_mangsa_bencana: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_agensi: number;
    sebab_hapus: string;
    nama_bencana: string;
    pindah: string;
    tahun_bencana: number;
}

/** MangsaBencana List in Tabular model */
export class PagedResultDtoOfMangsaBencanaForViewDto implements IPagedResultDtoOfMangsaBencanaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaBencanaForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaBencanaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaBencana List in Tabular model */
export interface IPagedResultDtoOfMangsaBencanaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaBencanaForViewDto[];
}

export class CreateOrEditMangsaKerosakanDto implements ICreateOrEditMangsaKerosakanDto {
    id!: number;
    id_mangsa!: number;
    id_mangsa_rumah!: number;
    id_kerosakan!: number;
    status_kerosakan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditMangsaKerosakanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_mangsa_rumah = _data["id_mangsa_rumah"];
            this.id_kerosakan = _data["id_kerosakan"];
            this.status_kerosakan = _data["status_kerosakan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaKerosakanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaKerosakanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_mangsa"] = this.id_mangsa;
        data["id_mangsa_rumah"] = this.id_mangsa_rumah;
        data["id_kerosakan"] = this.id_kerosakan;
        data["status_kerosakan"] = this.status_kerosakan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditMangsaKerosakanDto {
    id: number;
    id_mangsa: number;
    id_mangsa_rumah: number;
    id_kerosakan: number;
    status_kerosakan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
}

export class GetMangsaKerosakanForEditDto implements IGetMangsaKerosakanForEditDto {
    mangsa_kerosakan!: CreateOrEditMangsaKerosakanDto;

    constructor(data?: IGetMangsaKerosakanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_kerosakan = _data["mangsa_kerosakan"] ? CreateOrEditMangsaKerosakanDto.fromJS(_data["mangsa_kerosakan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaKerosakanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaKerosakanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_kerosakan"] = this.mangsa_kerosakan ? this.mangsa_kerosakan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaKerosakanForEditDto {
    mangsa_kerosakan: CreateOrEditMangsaKerosakanDto;
}

export class GetMangsaKerosakanForViewDto implements IGetMangsaKerosakanForViewDto {
    id!: number;
    id_mangsa!: number;
    id_mangsa_rumah!: number;
    id_kerosakan!: number;
    status_kerosakan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: IGetMangsaKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_mangsa_rumah = _data["id_mangsa_rumah"];
            this.id_kerosakan = _data["id_kerosakan"];
            this.status_kerosakan = _data["status_kerosakan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): GetMangsaKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_mangsa"] = this.id_mangsa;
        data["id_mangsa_rumah"] = this.id_mangsa_rumah;
        data["id_kerosakan"] = this.id_kerosakan;
        data["status_kerosakan"] = this.status_kerosakan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface IGetMangsaKerosakanForViewDto {
    id: number;
    id_mangsa: number;
    id_mangsa_rumah: number;
    id_kerosakan: number;
    status_kerosakan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
}

/** MangsaKerosakan List in Tabular model */
export class PagedResultDtoOfMangsaKerosakanForViewDto implements IPagedResultDtoOfMangsaKerosakanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaKerosakanForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaKerosakanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaKerosakan List in Tabular model */
export interface IPagedResultDtoOfMangsaKerosakanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaKerosakanForViewDto[];
}

export class CreateOrEditMangsaPertanianDto implements ICreateOrEditMangsaPertanianDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_agensi_bantuan!: number;
    id_jenis_pertanian!: number;
    luas!: string;
    luas_musnah!: string;
    bilangan!: number;
    bilangan_rosak!: number;
    status_mangsa_pertanian!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    anggaran_nilai_rosak!: number;
    anggaran_nilai_bantuan!: number;
    kos_bantuan!: number;
    tarikh_bantuan!: moment.Moment;
    catatan!: string;

    constructor(data?: ICreateOrEditMangsaPertanianDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.id_jenis_pertanian = _data["id_jenis_pertanian"];
            this.luas = _data["luas"];
            this.luas_musnah = _data["luas_musnah"];
            this.bilangan = _data["bilangan"];
            this.bilangan_rosak = _data["bilangan_rosak"];
            this.status_mangsa_pertanian = _data["status_mangsa_pertanian"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.anggaran_nilai_rosak = _data["anggaran_nilai_rosak"];
            this.anggaran_nilai_bantuan = _data["anggaran_nilai_bantuan"];
            this.kos_bantuan = _data["kos_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaPertanianDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaPertanianDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["id_jenis_pertanian"] = this.id_jenis_pertanian;
        data["luas"] = this.luas;
        data["luas_musnah"] = this.luas_musnah;
        data["bilangan"] = this.bilangan;
        data["bilangan_rosak"] = this.bilangan_rosak;
        data["status_mangsa_pertanian"] = this.status_mangsa_pertanian;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["anggaran_nilai_rosak"] = this.anggaran_nilai_rosak;
        data["anggaran_nilai_bantuan"] = this.anggaran_nilai_bantuan;
        data["kos_bantuan"] = this.kos_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface ICreateOrEditMangsaPertanianDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_agensi_bantuan: number;
    id_jenis_pertanian: number;
    luas: string;
    luas_musnah: string;
    bilangan: number;
    bilangan_rosak: number;
    status_mangsa_pertanian: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    anggaran_nilai_rosak: number;
    anggaran_nilai_bantuan: number;
    kos_bantuan: number;
    tarikh_bantuan: moment.Moment;
    catatan: string;
}

export class GetMangsaPertanianForEditDto implements IGetMangsaPertanianForEditDto {
    mangsa_pertanian!: CreateOrEditMangsaPertanianDto;

    constructor(data?: IGetMangsaPertanianForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_pertanian = _data["mangsa_pertanian"] ? CreateOrEditMangsaPertanianDto.fromJS(_data["mangsa_pertanian"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaPertanianForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaPertanianForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_pertanian"] = this.mangsa_pertanian ? this.mangsa_pertanian.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaPertanianForEditDto {
    mangsa_pertanian: CreateOrEditMangsaPertanianDto;
}

export class GetMangsaPertanianForViewDto implements IGetMangsaPertanianForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_agensi_bantuan!: number;
    id_jenis_pertanian!: number;
    luas!: string;
    luas_musnah!: string;
    bilangan!: number;
    bilangan_rosak!: number;
    status_mangsa_pertanian!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    nama_bencana!: string;
    nama_agensi!: string;
    nama_jenis_pertanian!: string;
    tarikh_bencana!: moment.Moment;
    anggaran_nilai_rosak!: number;
    anggaran_nilai_bantuan!: number;
    kos_bantuan!: number;
    tarikh_bantuan!: moment.Moment;
    catatan!: string;

    constructor(data?: IGetMangsaPertanianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.id_jenis_pertanian = _data["id_jenis_pertanian"];
            this.luas = _data["luas"];
            this.luas_musnah = _data["luas_musnah"];
            this.bilangan = _data["bilangan"];
            this.bilangan_rosak = _data["bilangan_rosak"];
            this.status_mangsa_pertanian = _data["status_mangsa_pertanian"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.nama_bencana = _data["nama_bencana"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_jenis_pertanian = _data["nama_jenis_pertanian"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.anggaran_nilai_rosak = _data["anggaran_nilai_rosak"];
            this.anggaran_nilai_bantuan = _data["anggaran_nilai_bantuan"];
            this.kos_bantuan = _data["kos_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): GetMangsaPertanianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaPertanianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["id_jenis_pertanian"] = this.id_jenis_pertanian;
        data["luas"] = this.luas;
        data["luas_musnah"] = this.luas_musnah;
        data["bilangan"] = this.bilangan;
        data["bilangan_rosak"] = this.bilangan_rosak;
        data["status_mangsa_pertanian"] = this.status_mangsa_pertanian;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["nama_bencana"] = this.nama_bencana;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_jenis_pertanian"] = this.nama_jenis_pertanian;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        data["anggaran_nilai_rosak"] = this.anggaran_nilai_rosak;
        data["anggaran_nilai_bantuan"] = this.anggaran_nilai_bantuan;
        data["kos_bantuan"] = this.kos_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IGetMangsaPertanianForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_agensi_bantuan: number;
    id_jenis_pertanian: number;
    luas: string;
    luas_musnah: string;
    bilangan: number;
    bilangan_rosak: number;
    status_mangsa_pertanian: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    nama_bencana: string;
    nama_agensi: string;
    nama_jenis_pertanian: string;
    tarikh_bencana: moment.Moment;
    anggaran_nilai_rosak: number;
    anggaran_nilai_bantuan: number;
    kos_bantuan: number;
    tarikh_bantuan: moment.Moment;
    catatan: string;
}

/** MangsaPertanian List in Tabular model */
export class PagedResultDtoOfMangsaPertanianForViewDto implements IPagedResultDtoOfMangsaPertanianForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaPertanianForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaPertanianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaPertanianForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaPertanianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaPertanianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaPertanian List in Tabular model */
export interface IPagedResultDtoOfMangsaPertanianForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaPertanianForViewDto[];
}

export class CreateOrEditMangsaPinjamanDto implements ICreateOrEditMangsaPinjamanDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_sektor!: number;
    sektor!: string;
    jumlah_pinjaman!: number;
    tempoh_pinjaman!: string;
    id_sumber_dana!: number;
    id_agensi_bantuan!: number;
    status_mangsa_pinjaman!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    tarikh_mula!: moment.Moment;

    constructor(data?: ICreateOrEditMangsaPinjamanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_sektor = _data["id_sektor"];
            this.sektor = _data["sektor"];
            this.jumlah_pinjaman = _data["jumlah_pinjaman"];
            this.tempoh_pinjaman = _data["tempoh_pinjaman"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.status_mangsa_pinjaman = _data["status_mangsa_pinjaman"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditMangsaPinjamanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaPinjamanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_sektor"] = this.id_sektor;
        data["sektor"] = this.sektor;
        data["jumlah_pinjaman"] = this.jumlah_pinjaman;
        data["tempoh_pinjaman"] = this.tempoh_pinjaman;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["status_mangsa_pinjaman"] = this.status_mangsa_pinjaman;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrEditMangsaPinjamanDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_sektor: number;
    sektor: string;
    jumlah_pinjaman: number;
    tempoh_pinjaman: string;
    id_sumber_dana: number;
    id_agensi_bantuan: number;
    status_mangsa_pinjaman: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    tarikh_mula: moment.Moment;
}

export class GetMangsaPinjamanForEditDto implements IGetMangsaPinjamanForEditDto {
    mangsa_pinjaman!: CreateOrEditMangsaPinjamanDto;

    constructor(data?: IGetMangsaPinjamanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_pinjaman = _data["mangsa_pinjaman"] ? CreateOrEditMangsaPinjamanDto.fromJS(_data["mangsa_pinjaman"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaPinjamanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaPinjamanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_pinjaman"] = this.mangsa_pinjaman ? this.mangsa_pinjaman.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaPinjamanForEditDto {
    mangsa_pinjaman: CreateOrEditMangsaPinjamanDto;
}

export class GetMangsaPinjamanForViewDto implements IGetMangsaPinjamanForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_sektor!: number;
    sektor!: string;
    jumlah_pinjaman!: number;
    tempoh_pinjaman!: string;
    id_sumber_dana!: number;
    id_agensi_bantuan!: number;
    status_mangsa_pinjaman!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    nama_agensi!: string;
    nama_bencana!: string;
    tarikh_bencana!: moment.Moment;

    constructor(data?: IGetMangsaPinjamanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_sektor = _data["id_sektor"];
            this.sektor = _data["sektor"];
            this.jumlah_pinjaman = _data["jumlah_pinjaman"];
            this.tempoh_pinjaman = _data["tempoh_pinjaman"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.status_mangsa_pinjaman = _data["status_mangsa_pinjaman"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.nama_agensi = _data["nama_agensi"];
            this.nama_bencana = _data["nama_bencana"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaPinjamanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaPinjamanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_sektor"] = this.id_sektor;
        data["sektor"] = this.sektor;
        data["jumlah_pinjaman"] = this.jumlah_pinjaman;
        data["tempoh_pinjaman"] = this.tempoh_pinjaman;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["status_mangsa_pinjaman"] = this.status_mangsa_pinjaman;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_bencana"] = this.nama_bencana;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaPinjamanForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_sektor: number;
    sektor: string;
    jumlah_pinjaman: number;
    tempoh_pinjaman: string;
    id_sumber_dana: number;
    id_agensi_bantuan: number;
    status_mangsa_pinjaman: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    nama_agensi: string;
    nama_bencana: string;
    tarikh_bencana: moment.Moment;
}

/** MangsaPinjaman List in Tabular model */
export class PagedResultDtoOfMangsaPinjamanForViewDto implements IPagedResultDtoOfMangsaPinjamanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaPinjamanForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaPinjamanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaPinjamanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaPinjamanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaPinjamanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaPinjaman List in Tabular model */
export interface IPagedResultDtoOfMangsaPinjamanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaPinjamanForViewDto[];
}

export class CreateOrEditMangsaRumahDto implements ICreateOrEditMangsaRumahDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_jenis_bantuan!: number;
    naik_taraf!: boolean;
    id_jenis_rumah!: number;
    id_jenis_penempatan!: number;
    id_status_kerosakan!: number;
    id_pemilik!: number;
    id_sumber_dana!: number;
    sumber_dana_lain!: string;
    id_pelaksana!: number;
    pelaksana_lain!: string;
    kontraktor!: string;
    no_pkk!: string;
    peratus_kemajuan!: number;
    id_status_kemajuan!: number;
    geran_rumah!: string;
    pemilik_tanah!: string;
    id_tapak_rumah!: number;
    status_mangsa_rumah!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    kos_anggaran!: number;
    kos_sebenar!: number;
    tarikh_mula!: moment.Moment;
    tarikh_siap!: moment.Moment;
    catatan!: string;

    constructor(data?: ICreateOrEditMangsaRumahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_jenis_bantuan = _data["id_jenis_bantuan"];
            this.naik_taraf = _data["naik_taraf"];
            this.id_jenis_rumah = _data["id_jenis_rumah"];
            this.id_jenis_penempatan = _data["id_jenis_penempatan"];
            this.id_status_kerosakan = _data["id_status_kerosakan"];
            this.id_pemilik = _data["id_pemilik"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.sumber_dana_lain = _data["sumber_dana_lain"];
            this.id_pelaksana = _data["id_pelaksana"];
            this.pelaksana_lain = _data["pelaksana_lain"];
            this.kontraktor = _data["kontraktor"];
            this.no_pkk = _data["no_pkk"];
            this.peratus_kemajuan = _data["peratus_kemajuan"];
            this.id_status_kemajuan = _data["id_status_kemajuan"];
            this.geran_rumah = _data["geran_rumah"];
            this.pemilik_tanah = _data["pemilik_tanah"];
            this.id_tapak_rumah = _data["id_tapak_rumah"];
            this.status_mangsa_rumah = _data["status_mangsa_rumah"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.kos_anggaran = _data["kos_anggaran"];
            this.kos_sebenar = _data["kos_sebenar"];
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
            this.tarikh_siap = _data["tarikh_siap"] ? moment(_data["tarikh_siap"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaRumahDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaRumahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_jenis_bantuan"] = this.id_jenis_bantuan;
        data["naik_taraf"] = this.naik_taraf;
        data["id_jenis_rumah"] = this.id_jenis_rumah;
        data["id_jenis_penempatan"] = this.id_jenis_penempatan;
        data["id_status_kerosakan"] = this.id_status_kerosakan;
        data["id_pemilik"] = this.id_pemilik;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["sumber_dana_lain"] = this.sumber_dana_lain;
        data["id_pelaksana"] = this.id_pelaksana;
        data["pelaksana_lain"] = this.pelaksana_lain;
        data["kontraktor"] = this.kontraktor;
        data["no_pkk"] = this.no_pkk;
        data["peratus_kemajuan"] = this.peratus_kemajuan;
        data["id_status_kemajuan"] = this.id_status_kemajuan;
        data["geran_rumah"] = this.geran_rumah;
        data["pemilik_tanah"] = this.pemilik_tanah;
        data["id_tapak_rumah"] = this.id_tapak_rumah;
        data["status_mangsa_rumah"] = this.status_mangsa_rumah;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["kos_anggaran"] = this.kos_anggaran;
        data["kos_sebenar"] = this.kos_sebenar;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        data["tarikh_siap"] = this.tarikh_siap ? this.tarikh_siap.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface ICreateOrEditMangsaRumahDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_jenis_bantuan: number;
    naik_taraf: boolean;
    id_jenis_rumah: number;
    id_jenis_penempatan: number;
    id_status_kerosakan: number;
    id_pemilik: number;
    id_sumber_dana: number;
    sumber_dana_lain: string;
    id_pelaksana: number;
    pelaksana_lain: string;
    kontraktor: string;
    no_pkk: string;
    peratus_kemajuan: number;
    id_status_kemajuan: number;
    geran_rumah: string;
    pemilik_tanah: string;
    id_tapak_rumah: number;
    status_mangsa_rumah: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    kos_anggaran: number;
    kos_sebenar: number;
    tarikh_mula: moment.Moment;
    tarikh_siap: moment.Moment;
    catatan: string;
}

export class GetMangsaRumahForEditDto implements IGetMangsaRumahForEditDto {
    mangsa_rumah!: CreateOrEditMangsaRumahDto;

    constructor(data?: IGetMangsaRumahForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_rumah = _data["mangsa_rumah"] ? CreateOrEditMangsaRumahDto.fromJS(_data["mangsa_rumah"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaRumahForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaRumahForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_rumah"] = this.mangsa_rumah ? this.mangsa_rumah.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaRumahForEditDto {
    mangsa_rumah: CreateOrEditMangsaRumahDto;
}

export class GetMangsaRumahForViewDto implements IGetMangsaRumahForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_jenis_bantuan!: number;
    naik_taraf!: boolean;
    id_jenis_rumah!: number;
    id_jenis_penempatan!: number;
    id_status_kerosakan!: number;
    id_pemilik!: number;
    id_sumber_dana!: number;
    sumber_dana_lain!: string;
    id_pelaksana!: number;
    pelaksana_lain!: string;
    kontraktor!: string;
    no_pkk!: string;
    peratus_kemajuan!: number;
    id_status_kemajuan!: number;
    geran_rumah!: string;
    pemilik_tanah!: string;
    id_tapak_rumah!: number;
    status_mangsa_rumah!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    nama_bencana!: string;
    tarikh_bencana!: moment.Moment;
    nama_bantuan!: string;
    kos_anggaran!: number;
    kos_sebenar!: number;

    constructor(data?: IGetMangsaRumahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_jenis_bantuan = _data["id_jenis_bantuan"];
            this.naik_taraf = _data["naik_taraf"];
            this.id_jenis_rumah = _data["id_jenis_rumah"];
            this.id_jenis_penempatan = _data["id_jenis_penempatan"];
            this.id_status_kerosakan = _data["id_status_kerosakan"];
            this.id_pemilik = _data["id_pemilik"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.sumber_dana_lain = _data["sumber_dana_lain"];
            this.id_pelaksana = _data["id_pelaksana"];
            this.pelaksana_lain = _data["pelaksana_lain"];
            this.kontraktor = _data["kontraktor"];
            this.no_pkk = _data["no_pkk"];
            this.peratus_kemajuan = _data["peratus_kemajuan"];
            this.id_status_kemajuan = _data["id_status_kemajuan"];
            this.geran_rumah = _data["geran_rumah"];
            this.pemilik_tanah = _data["pemilik_tanah"];
            this.id_tapak_rumah = _data["id_tapak_rumah"];
            this.status_mangsa_rumah = _data["status_mangsa_rumah"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.nama_bencana = _data["nama_bencana"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.nama_bantuan = _data["nama_bantuan"];
            this.kos_anggaran = _data["kos_anggaran"];
            this.kos_sebenar = _data["kos_sebenar"];
        }
    }

    static fromJS(data: any): GetMangsaRumahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaRumahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_jenis_bantuan"] = this.id_jenis_bantuan;
        data["naik_taraf"] = this.naik_taraf;
        data["id_jenis_rumah"] = this.id_jenis_rumah;
        data["id_jenis_penempatan"] = this.id_jenis_penempatan;
        data["id_status_kerosakan"] = this.id_status_kerosakan;
        data["id_pemilik"] = this.id_pemilik;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["sumber_dana_lain"] = this.sumber_dana_lain;
        data["id_pelaksana"] = this.id_pelaksana;
        data["pelaksana_lain"] = this.pelaksana_lain;
        data["kontraktor"] = this.kontraktor;
        data["no_pkk"] = this.no_pkk;
        data["peratus_kemajuan"] = this.peratus_kemajuan;
        data["id_status_kemajuan"] = this.id_status_kemajuan;
        data["geran_rumah"] = this.geran_rumah;
        data["pemilik_tanah"] = this.pemilik_tanah;
        data["id_tapak_rumah"] = this.id_tapak_rumah;
        data["status_mangsa_rumah"] = this.status_mangsa_rumah;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["nama_bencana"] = this.nama_bencana;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        data["nama_bantuan"] = this.nama_bantuan;
        data["kos_anggaran"] = this.kos_anggaran;
        data["kos_sebenar"] = this.kos_sebenar;
        return data; 
    }
}

export interface IGetMangsaRumahForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_jenis_bantuan: number;
    naik_taraf: boolean;
    id_jenis_rumah: number;
    id_jenis_penempatan: number;
    id_status_kerosakan: number;
    id_pemilik: number;
    id_sumber_dana: number;
    sumber_dana_lain: string;
    id_pelaksana: number;
    pelaksana_lain: string;
    kontraktor: string;
    no_pkk: string;
    peratus_kemajuan: number;
    id_status_kemajuan: number;
    geran_rumah: string;
    pemilik_tanah: string;
    id_tapak_rumah: number;
    status_mangsa_rumah: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    nama_bencana: string;
    tarikh_bencana: moment.Moment;
    nama_bantuan: string;
    kos_anggaran: number;
    kos_sebenar: number;
}

/** MangsaRumah List in Tabular model */
export class PagedResultDtoOfMangsaRumahForViewDto implements IPagedResultDtoOfMangsaRumahForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaRumahForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaRumahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaRumahForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaRumahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaRumahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaRumah List in Tabular model */
export interface IPagedResultDtoOfMangsaRumahForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaRumahForViewDto[];
}

export class CreateOrEditMangsaWangIhsanDto implements ICreateOrEditMangsaWangIhsanDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_agensi_bantuan!: number;
    tarikh_serahan!: moment.Moment;
    id_sumber_dana!: number;
    status_mangsa_wang_ihsan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    jumlah!: number;

    constructor(data?: ICreateOrEditMangsaWangIhsanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.tarikh_serahan = _data["tarikh_serahan"] ? moment(_data["tarikh_serahan"].toString()) : <any>undefined;
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.status_mangsa_wang_ihsan = _data["status_mangsa_wang_ihsan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): CreateOrEditMangsaWangIhsanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaWangIhsanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["tarikh_serahan"] = this.tarikh_serahan ? this.tarikh_serahan.toISOString() : <any>undefined;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["status_mangsa_wang_ihsan"] = this.status_mangsa_wang_ihsan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface ICreateOrEditMangsaWangIhsanDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_agensi_bantuan: number;
    tarikh_serahan: moment.Moment;
    id_sumber_dana: number;
    status_mangsa_wang_ihsan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    jumlah: number;
}

export class GetMangsaWangIhsanForEditDto implements IGetMangsaWangIhsanForEditDto {
    mangsa_wang_ihsan!: CreateOrEditMangsaWangIhsanDto;

    constructor(data?: IGetMangsaWangIhsanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa_wang_ihsan = _data["mangsa_wang_ihsan"] ? CreateOrEditMangsaWangIhsanDto.fromJS(_data["mangsa_wang_ihsan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaWangIhsanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaWangIhsanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa_wang_ihsan"] = this.mangsa_wang_ihsan ? this.mangsa_wang_ihsan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaWangIhsanForEditDto {
    mangsa_wang_ihsan: CreateOrEditMangsaWangIhsanDto;
}

export class GetMangsaWangIhsanForViewDto implements IGetMangsaWangIhsanForViewDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_agensi_bantuan!: number;
    tarikh_serahan!: string;
    id_sumber_dana!: number;
    status_mangsa_wang_ihsan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_agensi!: number;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    nama_bencana!: string;
    nama_agensi!: string;
    tarikh_bencana!: moment.Moment;
    jumlah!: number;

    constructor(data?: IGetMangsaWangIhsanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_agensi_bantuan = _data["id_agensi_bantuan"];
            this.tarikh_serahan = _data["tarikh_serahan"];
            this.id_sumber_dana = _data["id_sumber_dana"];
            this.status_mangsa_wang_ihsan = _data["status_mangsa_wang_ihsan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.nama_bencana = _data["nama_bencana"];
            this.nama_agensi = _data["nama_agensi"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): GetMangsaWangIhsanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaWangIhsanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_agensi_bantuan"] = this.id_agensi_bantuan;
        data["tarikh_serahan"] = this.tarikh_serahan;
        data["id_sumber_dana"] = this.id_sumber_dana;
        data["status_mangsa_wang_ihsan"] = this.status_mangsa_wang_ihsan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["nama_bencana"] = this.nama_bencana;
        data["nama_agensi"] = this.nama_agensi;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.toISOString() : <any>undefined;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface IGetMangsaWangIhsanForViewDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_agensi_bantuan: number;
    tarikh_serahan: string;
    id_sumber_dana: number;
    status_mangsa_wang_ihsan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_agensi: number;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    nama_bencana: string;
    nama_agensi: string;
    tarikh_bencana: moment.Moment;
    jumlah: number;
}

/** MangsaWangIhsan List in Tabular model */
export class PagedResultDtoOfMangsaWangIhsanForViewDto implements IPagedResultDtoOfMangsaWangIhsanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaWangIhsanForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaWangIhsanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaWangIhsanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaWangIhsanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaWangIhsanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** MangsaWangIhsan List in Tabular model */
export interface IPagedResultDtoOfMangsaWangIhsanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaWangIhsanForViewDto[];
}

export class CreateOrEditMangsaDto implements ICreateOrEditMangsaDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    telefon!: string;
    alamat_1!: string;
    alamat_2!: string;
    id_daerah!: number;
    id_parlimen!: number;
    id_dun!: number;
    id_negeri!: number;
    poskod!: string;
    catatan!: string;
    status_mangsa!: number;
    status_verifikasi!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    sebab_hapus!: string;
    gambar!: string;
    nama_bantuan!: string;
    tarikh_bantuan!: moment.Moment;

    constructor(data?: ICreateOrEditMangsaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.telefon = _data["telefon"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.id_daerah = _data["id_daerah"];
            this.id_parlimen = _data["id_parlimen"];
            this.id_dun = _data["id_dun"];
            this.id_negeri = _data["id_negeri"];
            this.poskod = _data["poskod"];
            this.catatan = _data["catatan"];
            this.status_mangsa = _data["status_mangsa"];
            this.status_verifikasi = _data["status_verifikasi"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.gambar = _data["gambar"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.tarikh_bantuan = _data["tarikh_bantuan"] ? moment(_data["tarikh_bantuan"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditMangsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditMangsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["telefon"] = this.telefon;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["id_daerah"] = this.id_daerah;
        data["id_parlimen"] = this.id_parlimen;
        data["id_dun"] = this.id_dun;
        data["id_negeri"] = this.id_negeri;
        data["poskod"] = this.poskod;
        data["catatan"] = this.catatan;
        data["status_mangsa"] = this.status_mangsa;
        data["status_verifikasi"] = this.status_verifikasi;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["gambar"] = this.gambar;
        data["nama_bantuan"] = this.nama_bantuan;
        data["tarikh_bantuan"] = this.tarikh_bantuan ? this.tarikh_bantuan.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrEditMangsaDto {
    id: number;
    nama: string;
    no_kp: string;
    telefon: string;
    alamat_1: string;
    alamat_2: string;
    id_daerah: number;
    id_parlimen: number;
    id_dun: number;
    id_negeri: number;
    poskod: string;
    catatan: string;
    status_mangsa: number;
    status_verifikasi: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    sebab_hapus: string;
    gambar: string;
    nama_bantuan: string;
    tarikh_bantuan: moment.Moment;
}

export class GetMangsaForEditDto implements IGetMangsaForEditDto {
    mangsa!: CreateOrEditMangsaDto;

    constructor(data?: IGetMangsaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa = _data["mangsa"] ? CreateOrEditMangsaDto.fromJS(_data["mangsa"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetMangsaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa"] = this.mangsa ? this.mangsa.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetMangsaForEditDto {
    mangsa: CreateOrEditMangsaDto;
}

export class GetMangsaForViewDto implements IGetMangsaForViewDto {
    id!: number;
    nama!: string;
    no_kp!: string;
    nama_negeri!: string;
    nama_agensi!: string;
    status_verifikasi!: number;
    isi_rumah!: number;
    jumlah_bantuan!: string;

    constructor(data?: IGetMangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.no_kp = _data["no_kp"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_agensi = _data["nama_agensi"];
            this.status_verifikasi = _data["status_verifikasi"];
            this.isi_rumah = _data["isi_rumah"];
            this.jumlah_bantuan = _data["jumlah_bantuan"];
        }
    }

    static fromJS(data: any): GetMangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetMangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["no_kp"] = this.no_kp;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_agensi"] = this.nama_agensi;
        data["status_verifikasi"] = this.status_verifikasi;
        data["isi_rumah"] = this.isi_rumah;
        data["jumlah_bantuan"] = this.jumlah_bantuan;
        return data; 
    }
}

export interface IGetMangsaForViewDto {
    id: number;
    nama: string;
    no_kp: string;
    nama_negeri: string;
    nama_agensi: string;
    status_verifikasi: number;
    isi_rumah: number;
    jumlah_bantuan: string;
}

export class InputBencanaMangsaDto implements IInputBencanaMangsaDto {
    id!: number;
    id_bencana!: number;
    id_mangsa!: number;
    id_pindah!: number;
    nama_pusat_pemindahan!: string;
    masalah!: string;
    status_mangsa_bencana!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_agensi!: number;
    sebab_hapus!: string;

    constructor(data?: IInputBencanaMangsaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_bencana = _data["id_bencana"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_pindah = _data["id_pindah"];
            this.nama_pusat_pemindahan = _data["nama_pusat_pemindahan"];
            this.masalah = _data["masalah"];
            this.status_mangsa_bencana = _data["status_mangsa_bencana"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_agensi = _data["id_agensi"];
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): InputBencanaMangsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputBencanaMangsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_bencana"] = this.id_bencana;
        data["id_mangsa"] = this.id_mangsa;
        data["id_pindah"] = this.id_pindah;
        data["nama_pusat_pemindahan"] = this.nama_pusat_pemindahan;
        data["masalah"] = this.masalah;
        data["status_mangsa_bencana"] = this.status_mangsa_bencana;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_agensi"] = this.id_agensi;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface IInputBencanaMangsaDto {
    id: number;
    id_bencana: number;
    id_mangsa: number;
    id_pindah: number;
    nama_pusat_pemindahan: string;
    masalah: string;
    status_mangsa_bencana: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_agensi: number;
    sebab_hapus: string;
}

export class InputCreateMangsaDto implements IInputCreateMangsaDto {
    mangsa!: CreateOrEditMangsaDto;
    bencana!: InputBencanaMangsaDto;

    constructor(data?: IInputCreateMangsaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mangsa = _data["mangsa"] ? CreateOrEditMangsaDto.fromJS(_data["mangsa"]) : <any>undefined;
            this.bencana = _data["bencana"] ? InputBencanaMangsaDto.fromJS(_data["bencana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InputCreateMangsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputCreateMangsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mangsa"] = this.mangsa ? this.mangsa.toJSON() : <any>undefined;
        data["bencana"] = this.bencana ? this.bencana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IInputCreateMangsaDto {
    mangsa: CreateOrEditMangsaDto;
    bencana: InputBencanaMangsaDto;
}

export class OutputGambarProfilMangsaDto implements IOutputGambarProfilMangsaDto {
    url!: string;

    constructor(data?: IOutputGambarProfilMangsaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.url = _data["url"];
        }
    }

    static fromJS(data: any): OutputGambarProfilMangsaDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputGambarProfilMangsaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["url"] = this.url;
        return data; 
    }
}

export interface IOutputGambarProfilMangsaDto {
    url: string;
}

/** Mangsa List in Tabular model */
export class PagedResultDtoOfMangsaForViewDto implements IPagedResultDtoOfMangsaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetMangsaForViewDto[];

    constructor(data?: IPagedResultDtoOfMangsaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetMangsaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfMangsaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfMangsaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Mangsa List in Tabular model */
export interface IPagedResultDtoOfMangsaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetMangsaForViewDto[];
}

export class CreateOrEditRefAgamaDto implements ICreateOrEditRefAgamaDto {
    id!: number;
    nama_agama!: string;
    status_agama!: number;

    constructor(data?: ICreateOrEditRefAgamaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agama = _data["nama_agama"];
            this.status_agama = _data["status_agama"];
        }
    }

    static fromJS(data: any): CreateOrEditRefAgamaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefAgamaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agama"] = this.nama_agama;
        data["status_agama"] = this.status_agama;
        return data; 
    }
}

export interface ICreateOrEditRefAgamaDto {
    id: number;
    nama_agama: string;
    status_agama: number;
}

export class GetRefAgamaForEditDto implements IGetRefAgamaForEditDto {
    ref_agama!: CreateOrEditRefAgamaDto;

    constructor(data?: IGetRefAgamaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_agama = _data["ref_agama"] ? CreateOrEditRefAgamaDto.fromJS(_data["ref_agama"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefAgamaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgamaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_agama"] = this.ref_agama ? this.ref_agama.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefAgamaForEditDto {
    ref_agama: CreateOrEditRefAgamaDto;
}

/** RefAgama List in Tabular model */
export class GetRefAgamaForListDto implements IGetRefAgamaForListDto {
    /** Items in array of object */
    items!: RefAgamaDto[];

    constructor(data?: IGetRefAgamaForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefAgamaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefAgamaForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgamaForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefAgama List in Tabular model */
export interface IGetRefAgamaForListDto {
    /** Items in array of object */
    items: RefAgamaDto[];
}

export class GetRefAgamaForViewDto implements IGetRefAgamaForViewDto {
    id!: number;
    nama_agama!: string;
    status_agama!: number;

    constructor(data?: IGetRefAgamaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agama = _data["nama_agama"];
            this.status_agama = _data["status_agama"];
        }
    }

    static fromJS(data: any): GetRefAgamaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgamaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agama"] = this.nama_agama;
        data["status_agama"] = this.status_agama;
        return data; 
    }
}

export interface IGetRefAgamaForViewDto {
    id: number;
    nama_agama: string;
    status_agama: number;
}

/** RefAgama List in Tabular model */
export class PagedResultDtoOfRefAgamaForViewDto implements IPagedResultDtoOfRefAgamaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefAgamaForViewDto[];

    constructor(data?: IPagedResultDtoOfRefAgamaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefAgamaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefAgamaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefAgamaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefAgama List in Tabular model */
export interface IPagedResultDtoOfRefAgamaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefAgamaForViewDto[];
}

export class RefAgamaDto implements IRefAgamaDto {
    id!: number;
    nama_agama!: string;
    status_agama!: number;

    constructor(data?: IRefAgamaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agama = _data["nama_agama"];
            this.status_agama = _data["status_agama"];
        }
    }

    static fromJS(data: any): RefAgamaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefAgamaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agama"] = this.nama_agama;
        data["status_agama"] = this.status_agama;
        return data; 
    }
}

export interface IRefAgamaDto {
    id: number;
    nama_agama: string;
    status_agama: number;
}

export class CreateOrEditRefAgensiDto implements ICreateOrEditRefAgensiDto {
    id!: number;
    id_kementerian!: number;
    nama_agensi!: string;
    kod_agensi!: string;
    pemberi_bantuan!: number;
    pemberi_pinjaman!: number;
    pengguna_sistem!: number;
    status_agensi!: number;

    constructor(data?: ICreateOrEditRefAgensiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_kementerian = _data["id_kementerian"];
            this.nama_agensi = _data["nama_agensi"];
            this.kod_agensi = _data["kod_agensi"];
            this.pemberi_bantuan = _data["pemberi_bantuan"];
            this.pemberi_pinjaman = _data["pemberi_pinjaman"];
            this.pengguna_sistem = _data["pengguna_sistem"];
            this.status_agensi = _data["status_agensi"];
        }
    }

    static fromJS(data: any): CreateOrEditRefAgensiDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefAgensiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_kementerian"] = this.id_kementerian;
        data["nama_agensi"] = this.nama_agensi;
        data["kod_agensi"] = this.kod_agensi;
        data["pemberi_bantuan"] = this.pemberi_bantuan;
        data["pemberi_pinjaman"] = this.pemberi_pinjaman;
        data["pengguna_sistem"] = this.pengguna_sistem;
        data["status_agensi"] = this.status_agensi;
        return data; 
    }
}

export interface ICreateOrEditRefAgensiDto {
    id: number;
    id_kementerian: number;
    nama_agensi: string;
    kod_agensi: string;
    pemberi_bantuan: number;
    pemberi_pinjaman: number;
    pengguna_sistem: number;
    status_agensi: number;
}

export class GetRefAgensiForEditDto implements IGetRefAgensiForEditDto {
    ref_agensi!: CreateOrEditRefAgensiDto;

    constructor(data?: IGetRefAgensiForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_agensi = _data["ref_agensi"] ? CreateOrEditRefAgensiDto.fromJS(_data["ref_agensi"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefAgensiForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgensiForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_agensi"] = this.ref_agensi ? this.ref_agensi.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefAgensiForEditDto {
    ref_agensi: CreateOrEditRefAgensiDto;
}

/** RefAgensi List in Tabular model */
export class GetRefAgensiForListDto implements IGetRefAgensiForListDto {
    /** Items in array of object */
    items!: RefAgensiDto[];

    constructor(data?: IGetRefAgensiForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefAgensiDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefAgensiForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgensiForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefAgensi List in Tabular model */
export interface IGetRefAgensiForListDto {
    /** Items in array of object */
    items: RefAgensiDto[];
}

export class GetRefAgensiForViewDto implements IGetRefAgensiForViewDto {
    id!: number;
    id_kementerian!: number;
    nama_agensi!: string;
    kod_agensi!: string;
    pemberi_bantuan!: number;
    pemberi_pinjaman!: number;
    pengguna_sistem!: number;
    status_agensi!: number;
    nama_kementerian!: string;

    constructor(data?: IGetRefAgensiForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_kementerian = _data["id_kementerian"];
            this.nama_agensi = _data["nama_agensi"];
            this.kod_agensi = _data["kod_agensi"];
            this.pemberi_bantuan = _data["pemberi_bantuan"];
            this.pemberi_pinjaman = _data["pemberi_pinjaman"];
            this.pengguna_sistem = _data["pengguna_sistem"];
            this.status_agensi = _data["status_agensi"];
            this.nama_kementerian = _data["nama_kementerian"];
        }
    }

    static fromJS(data: any): GetRefAgensiForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefAgensiForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_kementerian"] = this.id_kementerian;
        data["nama_agensi"] = this.nama_agensi;
        data["kod_agensi"] = this.kod_agensi;
        data["pemberi_bantuan"] = this.pemberi_bantuan;
        data["pemberi_pinjaman"] = this.pemberi_pinjaman;
        data["pengguna_sistem"] = this.pengguna_sistem;
        data["status_agensi"] = this.status_agensi;
        data["nama_kementerian"] = this.nama_kementerian;
        return data; 
    }
}

export interface IGetRefAgensiForViewDto {
    id: number;
    id_kementerian: number;
    nama_agensi: string;
    kod_agensi: string;
    pemberi_bantuan: number;
    pemberi_pinjaman: number;
    pengguna_sistem: number;
    status_agensi: number;
    nama_kementerian: string;
}

/** RefAgensi List in Tabular model */
export class PagedResultDtoOfRefAgensiForViewDto implements IPagedResultDtoOfRefAgensiForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefAgensiForViewDto[];

    constructor(data?: IPagedResultDtoOfRefAgensiForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefAgensiForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefAgensiForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefAgensiForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefAgensi List in Tabular model */
export interface IPagedResultDtoOfRefAgensiForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefAgensiForViewDto[];
}

export class RefAgensiDto implements IRefAgensiDto {
    id!: number;
    id_kementerian!: number;
    nama_agensi!: string;
    kod_agensi!: string;
    pemberi_bantuan!: number;
    pemberi_pinjaman!: number;
    pengguna_sistem!: number;
    status_agensi!: number;

    constructor(data?: IRefAgensiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_kementerian = _data["id_kementerian"];
            this.nama_agensi = _data["nama_agensi"];
            this.kod_agensi = _data["kod_agensi"];
            this.pemberi_bantuan = _data["pemberi_bantuan"];
            this.pemberi_pinjaman = _data["pemberi_pinjaman"];
            this.pengguna_sistem = _data["pengguna_sistem"];
            this.status_agensi = _data["status_agensi"];
        }
    }

    static fromJS(data: any): RefAgensiDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefAgensiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_kementerian"] = this.id_kementerian;
        data["nama_agensi"] = this.nama_agensi;
        data["kod_agensi"] = this.kod_agensi;
        data["pemberi_bantuan"] = this.pemberi_bantuan;
        data["pemberi_pinjaman"] = this.pemberi_pinjaman;
        data["pengguna_sistem"] = this.pengguna_sistem;
        data["status_agensi"] = this.status_agensi;
        return data; 
    }
}

export interface IRefAgensiDto {
    id: number;
    id_kementerian: number;
    nama_agensi: string;
    kod_agensi: string;
    pemberi_bantuan: number;
    pemberi_pinjaman: number;
    pengguna_sistem: number;
    status_agensi: number;
}

export class CreateOrEditRefBantuanDto implements ICreateOrEditRefBantuanDto {
    id!: number;
    nama_bantuan!: string;
    status_bantuan!: number;

    constructor(data?: ICreateOrEditRefBantuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.status_bantuan = _data["status_bantuan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefBantuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefBantuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_bantuan"] = this.nama_bantuan;
        data["status_bantuan"] = this.status_bantuan;
        return data; 
    }
}

export interface ICreateOrEditRefBantuanDto {
    id: number;
    nama_bantuan: string;
    status_bantuan: number;
}

export class GetRefBantuanForEditDto implements IGetRefBantuanForEditDto {
    ref_bantuan!: CreateOrEditRefBantuanDto;

    constructor(data?: IGetRefBantuanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_bantuan = _data["ref_bantuan"] ? CreateOrEditRefBantuanDto.fromJS(_data["ref_bantuan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefBantuanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBantuanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_bantuan"] = this.ref_bantuan ? this.ref_bantuan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefBantuanForEditDto {
    ref_bantuan: CreateOrEditRefBantuanDto;
}

/** RefBantuan List in Tabular model */
export class GetRefBantuanForListDto implements IGetRefBantuanForListDto {
    /** Items in array of object */
    items!: RefBantuanDto[];

    constructor(data?: IGetRefBantuanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefBantuanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefBantuanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBantuanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefBantuan List in Tabular model */
export interface IGetRefBantuanForListDto {
    /** Items in array of object */
    items: RefBantuanDto[];
}

export class GetRefBantuanForViewDto implements IGetRefBantuanForViewDto {
    id!: number;
    nama_bantuan!: string;
    status_bantuan!: number;

    constructor(data?: IGetRefBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.status_bantuan = _data["status_bantuan"];
        }
    }

    static fromJS(data: any): GetRefBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_bantuan"] = this.nama_bantuan;
        data["status_bantuan"] = this.status_bantuan;
        return data; 
    }
}

export interface IGetRefBantuanForViewDto {
    id: number;
    nama_bantuan: string;
    status_bantuan: number;
}

/** RefBantuan List in Tabular model */
export class PagedResultDtoOfRefBantuanForViewDto implements IPagedResultDtoOfRefBantuanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefBantuanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefBantuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefBantuanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefBantuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefBantuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefBantuan List in Tabular model */
export interface IPagedResultDtoOfRefBantuanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefBantuanForViewDto[];
}

export class RefBantuanDto implements IRefBantuanDto {
    id!: number;
    nama_bantuan!: string;
    status_bantuan!: number;

    constructor(data?: IRefBantuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_bantuan = _data["nama_bantuan"];
            this.status_bantuan = _data["status_bantuan"];
        }
    }

    static fromJS(data: any): RefBantuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefBantuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_bantuan"] = this.nama_bantuan;
        data["status_bantuan"] = this.status_bantuan;
        return data; 
    }
}

export interface IRefBantuanDto {
    id: number;
    nama_bantuan: string;
    status_bantuan: number;
}

export class CreateOrEditRefBencanaDto implements ICreateOrEditRefBencanaDto {
    id!: number;
    tarikh_bencana!: moment.Moment;
    tahun_bencana!: number;
    id_jenis_bencana!: number;
    nama_bencana!: string;
    id_negeri!: number;
    catatan!: string;
    status_bencana!: number;

    constructor(data?: ICreateOrEditRefBencanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.tahun_bencana = _data["tahun_bencana"];
            this.id_jenis_bencana = _data["id_jenis_bencana"];
            this.nama_bencana = _data["nama_bencana"];
            this.id_negeri = _data["id_negeri"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
        }
    }

    static fromJS(data: any): CreateOrEditRefBencanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefBencanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.format('YYYY-MM-DD') : <any>undefined;
        data["tahun_bencana"] = this.tahun_bencana;
        data["id_jenis_bencana"] = this.id_jenis_bencana;
        data["nama_bencana"] = this.nama_bencana;
        data["id_negeri"] = this.id_negeri;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        return data; 
    }
}

export interface ICreateOrEditRefBencanaDto {
    id: number;
    tarikh_bencana: moment.Moment;
    tahun_bencana: number;
    id_jenis_bencana: number;
    nama_bencana: string;
    id_negeri: number;
    catatan: string;
    status_bencana: number;
}

export class GetRefBencanaForEditDto implements IGetRefBencanaForEditDto {
    ref_bencana!: CreateOrEditRefBencanaDto;

    constructor(data?: IGetRefBencanaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_bencana = _data["ref_bencana"] ? CreateOrEditRefBencanaDto.fromJS(_data["ref_bencana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefBencanaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBencanaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_bencana"] = this.ref_bencana ? this.ref_bencana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefBencanaForEditDto {
    ref_bencana: CreateOrEditRefBencanaDto;
}

/** RefBencana List in Tabular model */
export class GetRefBencanaForListDto implements IGetRefBencanaForListDto {
    /** Items in array of object */
    items!: RefBencanaDto[];

    constructor(data?: IGetRefBencanaForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefBencanaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefBencanaForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBencanaForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefBencana List in Tabular model */
export interface IGetRefBencanaForListDto {
    /** Items in array of object */
    items: RefBencanaDto[];
}

export class GetRefBencanaForViewDto implements IGetRefBencanaForViewDto {
    id!: number;
    tarikh_bencana!: moment.Moment;
    tahun_bencana!: number;
    id_jenis_bencana!: number;
    nama_bencana!: string;
    id_negeri!: number;
    catatan!: string;
    status_bencana!: number;
    nama_negeri!: string;
    nama_jenis_bencana!: string;

    constructor(data?: IGetRefBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.tahun_bencana = _data["tahun_bencana"];
            this.id_jenis_bencana = _data["id_jenis_bencana"];
            this.nama_bencana = _data["nama_bencana"];
            this.id_negeri = _data["id_negeri"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
        }
    }

    static fromJS(data: any): GetRefBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.format('YYYY-MM-DD') : <any>undefined;
        data["tahun_bencana"] = this.tahun_bencana;
        data["id_jenis_bencana"] = this.id_jenis_bencana;
        data["nama_bencana"] = this.nama_bencana;
        data["id_negeri"] = this.id_negeri;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        return data; 
    }
}

export interface IGetRefBencanaForViewDto {
    id: number;
    tarikh_bencana: moment.Moment;
    tahun_bencana: number;
    id_jenis_bencana: number;
    nama_bencana: string;
    id_negeri: number;
    catatan: string;
    status_bencana: number;
    nama_negeri: string;
    nama_jenis_bencana: string;
}

/** RefBencana List in Tabular model */
export class PagedResultDtoOfRefBencanaForViewDto implements IPagedResultDtoOfRefBencanaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefBencanaForViewDto[];

    constructor(data?: IPagedResultDtoOfRefBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefBencanaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefBencana List in Tabular model */
export interface IPagedResultDtoOfRefBencanaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefBencanaForViewDto[];
}

export class RefBencanaDto implements IRefBencanaDto {
    id!: number;
    tarikh_bencana!: moment.Moment;
    tahun_bencana!: number;
    id_jenis_bencana!: number;
    nama_bencana!: string;
    id_negeri!: number;
    catatan!: string;
    status_bencana!: number;

    constructor(data?: IRefBencanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tarikh_bencana = _data["tarikh_bencana"] ? moment(_data["tarikh_bencana"].toString()) : <any>undefined;
            this.tahun_bencana = _data["tahun_bencana"];
            this.id_jenis_bencana = _data["id_jenis_bencana"];
            this.nama_bencana = _data["nama_bencana"];
            this.id_negeri = _data["id_negeri"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
        }
    }

    static fromJS(data: any): RefBencanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefBencanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tarikh_bencana"] = this.tarikh_bencana ? this.tarikh_bencana.format('YYYY-MM-DD') : <any>undefined;
        data["tahun_bencana"] = this.tahun_bencana;
        data["id_jenis_bencana"] = this.id_jenis_bencana;
        data["nama_bencana"] = this.nama_bencana;
        data["id_negeri"] = this.id_negeri;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        return data; 
    }
}

export interface IRefBencanaDto {
    id: number;
    tarikh_bencana: moment.Moment;
    tahun_bencana: number;
    id_jenis_bencana: number;
    nama_bencana: string;
    id_negeri: number;
    catatan: string;
    status_bencana: number;
}

export class CreateOrEditRefDaerahDto implements ICreateOrEditRefDaerahDto {
    id!: number;
    id_negeri!: number;
    nama_daerah!: string;
    status_daerah!: number;

    constructor(data?: ICreateOrEditRefDaerahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.status_daerah = _data["status_daerah"];
        }
    }

    static fromJS(data: any): CreateOrEditRefDaerahDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefDaerahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["status_daerah"] = this.status_daerah;
        return data; 
    }
}

export interface ICreateOrEditRefDaerahDto {
    id: number;
    id_negeri: number;
    nama_daerah: string;
    status_daerah: number;
}

export class GetRefDaerahForEditDto implements IGetRefDaerahForEditDto {
    ref_daerah!: CreateOrEditRefDaerahDto;

    constructor(data?: IGetRefDaerahForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_daerah = _data["ref_daerah"] ? CreateOrEditRefDaerahDto.fromJS(_data["ref_daerah"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefDaerahForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDaerahForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_daerah"] = this.ref_daerah ? this.ref_daerah.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefDaerahForEditDto {
    ref_daerah: CreateOrEditRefDaerahDto;
}

/** RefDaerah List in Tabular model */
export class GetRefDaerahForListDto implements IGetRefDaerahForListDto {
    /** Items in array of object */
    items!: RefDaerahDto[];

    constructor(data?: IGetRefDaerahForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefDaerahDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefDaerahForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDaerahForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefDaerah List in Tabular model */
export interface IGetRefDaerahForListDto {
    /** Items in array of object */
    items: RefDaerahDto[];
}

export class GetRefDaerahForViewDto implements IGetRefDaerahForViewDto {
    id!: number;
    id_negeri!: number;
    nama_daerah!: string;
    status_daerah!: number;
    nama_negeri!: string;

    constructor(data?: IGetRefDaerahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.status_daerah = _data["status_daerah"];
            this.nama_negeri = _data["nama_negeri"];
        }
    }

    static fromJS(data: any): GetRefDaerahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDaerahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["status_daerah"] = this.status_daerah;
        data["nama_negeri"] = this.nama_negeri;
        return data; 
    }
}

export interface IGetRefDaerahForViewDto {
    id: number;
    id_negeri: number;
    nama_daerah: string;
    status_daerah: number;
    nama_negeri: string;
}

/** RefDaerah List in Tabular model */
export class PagedResultDtoOfRefDaerahForViewDto implements IPagedResultDtoOfRefDaerahForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefDaerahForViewDto[];

    constructor(data?: IPagedResultDtoOfRefDaerahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefDaerahForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefDaerahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefDaerahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefDaerah List in Tabular model */
export interface IPagedResultDtoOfRefDaerahForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefDaerahForViewDto[];
}

export class RefDaerahDto implements IRefDaerahDto {
    id!: number;
    id_negeri!: number;
    nama_daerah!: string;
    status_daerah!: number;

    constructor(data?: IRefDaerahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.status_daerah = _data["status_daerah"];
        }
    }

    static fromJS(data: any): RefDaerahDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefDaerahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["status_daerah"] = this.status_daerah;
        return data; 
    }
}

export interface IRefDaerahDto {
    id: number;
    id_negeri: number;
    nama_daerah: string;
    status_daerah: number;
}

export class CreateOrEditRefDunDto implements ICreateOrEditRefDunDto {
    id!: number;
    id_negeri!: number;
    id_parlimen!: number;
    kod_dun!: string;
    nama_dun!: string;
    status_dun!: number;

    constructor(data?: ICreateOrEditRefDunDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_parlimen = _data["id_parlimen"];
            this.kod_dun = _data["kod_dun"];
            this.nama_dun = _data["nama_dun"];
            this.status_dun = _data["status_dun"];
        }
    }

    static fromJS(data: any): CreateOrEditRefDunDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefDunDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_parlimen"] = this.id_parlimen;
        data["kod_dun"] = this.kod_dun;
        data["nama_dun"] = this.nama_dun;
        data["status_dun"] = this.status_dun;
        return data; 
    }
}

export interface ICreateOrEditRefDunDto {
    id: number;
    id_negeri: number;
    id_parlimen: number;
    kod_dun: string;
    nama_dun: string;
    status_dun: number;
}

export class GetRefDunForEditDto implements IGetRefDunForEditDto {
    ref_dun!: CreateOrEditRefDunDto;

    constructor(data?: IGetRefDunForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_dun = _data["ref_dun"] ? CreateOrEditRefDunDto.fromJS(_data["ref_dun"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefDunForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDunForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_dun"] = this.ref_dun ? this.ref_dun.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefDunForEditDto {
    ref_dun: CreateOrEditRefDunDto;
}

/** RefDun List in Tabular model */
export class GetRefDunForListDto implements IGetRefDunForListDto {
    /** Items in array of object */
    items!: RefDunDto[];

    constructor(data?: IGetRefDunForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefDunDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefDunForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDunForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefDun List in Tabular model */
export interface IGetRefDunForListDto {
    /** Items in array of object */
    items: RefDunDto[];
}

export class GetRefDunForViewDto implements IGetRefDunForViewDto {
    id!: number;
    id_negeri!: number;
    id_parlimen!: number;
    kod_dun!: string;
    nama_dun!: string;
    status_dun!: number;
    nama_negeri!: string;
    nama_parlimen!: string;

    constructor(data?: IGetRefDunForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_parlimen = _data["id_parlimen"];
            this.kod_dun = _data["kod_dun"];
            this.nama_dun = _data["nama_dun"];
            this.status_dun = _data["status_dun"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_parlimen = _data["nama_parlimen"];
        }
    }

    static fromJS(data: any): GetRefDunForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefDunForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_parlimen"] = this.id_parlimen;
        data["kod_dun"] = this.kod_dun;
        data["nama_dun"] = this.nama_dun;
        data["status_dun"] = this.status_dun;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_parlimen"] = this.nama_parlimen;
        return data; 
    }
}

export interface IGetRefDunForViewDto {
    id: number;
    id_negeri: number;
    id_parlimen: number;
    kod_dun: string;
    nama_dun: string;
    status_dun: number;
    nama_negeri: string;
    nama_parlimen: string;
}

/** RefDun List in Tabular model */
export class PagedResultDtoOfRefDunForViewDto implements IPagedResultDtoOfRefDunForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefDunForViewDto[];

    constructor(data?: IPagedResultDtoOfRefDunForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefDunForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefDunForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefDunForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefDun List in Tabular model */
export interface IPagedResultDtoOfRefDunForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefDunForViewDto[];
}

export class RefDunDto implements IRefDunDto {
    id!: number;
    id_negeri!: number;
    id_parlimen!: number;
    kod_dun!: string;
    nama_dun!: string;
    status_dun!: number;

    constructor(data?: IRefDunDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_parlimen = _data["id_parlimen"];
            this.kod_dun = _data["kod_dun"];
            this.nama_dun = _data["nama_dun"];
            this.status_dun = _data["status_dun"];
        }
    }

    static fromJS(data: any): RefDunDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefDunDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_parlimen"] = this.id_parlimen;
        data["kod_dun"] = this.kod_dun;
        data["nama_dun"] = this.nama_dun;
        data["status_dun"] = this.status_dun;
        return data; 
    }
}

export interface IRefDunDto {
    id: number;
    id_negeri: number;
    id_parlimen: number;
    kod_dun: string;
    nama_dun: string;
    status_dun: number;
}

export class CreateOrEditRefHubunganDto implements ICreateOrEditRefHubunganDto {
    id!: number;
    nama_hubungan!: string;
    status_hubungan!: number;

    constructor(data?: ICreateOrEditRefHubunganDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_hubungan = _data["nama_hubungan"];
            this.status_hubungan = _data["status_hubungan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefHubunganDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefHubunganDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_hubungan"] = this.nama_hubungan;
        data["status_hubungan"] = this.status_hubungan;
        return data; 
    }
}

export interface ICreateOrEditRefHubunganDto {
    id: number;
    nama_hubungan: string;
    status_hubungan: number;
}

export class GetRefHubunganForEditDto implements IGetRefHubunganForEditDto {
    ref_hubungan!: CreateOrEditRefHubunganDto;

    constructor(data?: IGetRefHubunganForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_hubungan = _data["ref_hubungan"] ? CreateOrEditRefHubunganDto.fromJS(_data["ref_hubungan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefHubunganForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefHubunganForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_hubungan"] = this.ref_hubungan ? this.ref_hubungan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefHubunganForEditDto {
    ref_hubungan: CreateOrEditRefHubunganDto;
}

/** RefHubungan List in Tabular model */
export class GetRefHubunganForListDto implements IGetRefHubunganForListDto {
    /** Items in array of object */
    items!: RefHubunganDto[];

    constructor(data?: IGetRefHubunganForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefHubunganDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefHubunganForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefHubunganForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefHubungan List in Tabular model */
export interface IGetRefHubunganForListDto {
    /** Items in array of object */
    items: RefHubunganDto[];
}

export class GetRefHubunganForViewDto implements IGetRefHubunganForViewDto {
    id!: number;
    nama_hubungan!: string;
    status_hubungan!: number;

    constructor(data?: IGetRefHubunganForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_hubungan = _data["nama_hubungan"];
            this.status_hubungan = _data["status_hubungan"];
        }
    }

    static fromJS(data: any): GetRefHubunganForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefHubunganForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_hubungan"] = this.nama_hubungan;
        data["status_hubungan"] = this.status_hubungan;
        return data; 
    }
}

export interface IGetRefHubunganForViewDto {
    id: number;
    nama_hubungan: string;
    status_hubungan: number;
}

/** RefHubungan List in Tabular model */
export class PagedResultDtoOfRefHubunganForViewDto implements IPagedResultDtoOfRefHubunganForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefHubunganForViewDto[];

    constructor(data?: IPagedResultDtoOfRefHubunganForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefHubunganForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefHubunganForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefHubunganForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefHubungan List in Tabular model */
export interface IPagedResultDtoOfRefHubunganForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefHubunganForViewDto[];
}

export class RefHubunganDto implements IRefHubunganDto {
    id!: number;
    nama_hubungan!: string;
    status_hubungan!: number;

    constructor(data?: IRefHubunganDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_hubungan = _data["nama_hubungan"];
            this.status_hubungan = _data["status_hubungan"];
        }
    }

    static fromJS(data: any): RefHubunganDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefHubunganDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_hubungan"] = this.nama_hubungan;
        data["status_hubungan"] = this.status_hubungan;
        return data; 
    }
}

export interface IRefHubunganDto {
    id: number;
    nama_hubungan: string;
    status_hubungan: number;
}

export class CreateOrEditRefJenisBencanaDto implements ICreateOrEditRefJenisBencanaDto {
    id!: number;
    nama_jenis_bencana!: string;
    catatan!: string;
    status_bencana!: number;
    id_pengguna!: number;

    constructor(data?: ICreateOrEditRefJenisBencanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
            this.id_pengguna = _data["id_pengguna"];
        }
    }

    static fromJS(data: any): CreateOrEditRefJenisBencanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefJenisBencanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        data["id_pengguna"] = this.id_pengguna;
        return data; 
    }
}

export interface ICreateOrEditRefJenisBencanaDto {
    id: number;
    nama_jenis_bencana: string;
    catatan: string;
    status_bencana: number;
    id_pengguna: number;
}

export class GetRefJenisBencanaForEditDto implements IGetRefJenisBencanaForEditDto {
    ref_jenis_bencana!: CreateOrEditRefJenisBencanaDto;

    constructor(data?: IGetRefJenisBencanaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_jenis_bencana = _data["ref_jenis_bencana"] ? CreateOrEditRefJenisBencanaDto.fromJS(_data["ref_jenis_bencana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefJenisBencanaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisBencanaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_jenis_bencana"] = this.ref_jenis_bencana ? this.ref_jenis_bencana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefJenisBencanaForEditDto {
    ref_jenis_bencana: CreateOrEditRefJenisBencanaDto;
}

/** RefJenisBencana List in Tabular model */
export class GetRefJenisBencanaForListDto implements IGetRefJenisBencanaForListDto {
    /** Items in array of object */
    items!: RefJenisBencanaDto[];

    constructor(data?: IGetRefJenisBencanaForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefJenisBencanaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefJenisBencanaForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisBencanaForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefJenisBencana List in Tabular model */
export interface IGetRefJenisBencanaForListDto {
    /** Items in array of object */
    items: RefJenisBencanaDto[];
}

export class GetRefJenisBencanaForViewDto implements IGetRefJenisBencanaForViewDto {
    id!: number;
    nama_jenis_bencana!: string;
    catatan!: string;
    status_bencana!: number;
    id_pengguna!: number;

    constructor(data?: IGetRefJenisBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
            this.id_pengguna = _data["id_pengguna"];
        }
    }

    static fromJS(data: any): GetRefJenisBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        data["id_pengguna"] = this.id_pengguna;
        return data; 
    }
}

export interface IGetRefJenisBencanaForViewDto {
    id: number;
    nama_jenis_bencana: string;
    catatan: string;
    status_bencana: number;
    id_pengguna: number;
}

/** RefJenisBencana List in Tabular model */
export class PagedResultDtoOfRefJenisBencanaForViewDto implements IPagedResultDtoOfRefJenisBencanaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefJenisBencanaForViewDto[];

    constructor(data?: IPagedResultDtoOfRefJenisBencanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefJenisBencanaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefJenisBencanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefJenisBencanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefJenisBencana List in Tabular model */
export interface IPagedResultDtoOfRefJenisBencanaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefJenisBencanaForViewDto[];
}

export class RefJenisBencanaDto implements IRefJenisBencanaDto {
    id!: number;
    nama_jenis_bencana!: string;
    catatan!: string;
    status_bencana!: number;
    id_pengguna!: number;

    constructor(data?: IRefJenisBencanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
            this.catatan = _data["catatan"];
            this.status_bencana = _data["status_bencana"];
            this.id_pengguna = _data["id_pengguna"];
        }
    }

    static fromJS(data: any): RefJenisBencanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefJenisBencanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        data["catatan"] = this.catatan;
        data["status_bencana"] = this.status_bencana;
        data["id_pengguna"] = this.id_pengguna;
        return data; 
    }
}

export interface IRefJenisBencanaDto {
    id: number;
    nama_jenis_bencana: string;
    catatan: string;
    status_bencana: number;
    id_pengguna: number;
}

export class CreateOrEditRefJenisPertanianDto implements ICreateOrEditRefJenisPertanianDto {
    id!: number;
    nama_jenis_pertanian!: string;
    status_jenis_pertanian!: number;

    constructor(data?: ICreateOrEditRefJenisPertanianDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_pertanian = _data["nama_jenis_pertanian"];
            this.status_jenis_pertanian = _data["status_jenis_pertanian"];
        }
    }

    static fromJS(data: any): CreateOrEditRefJenisPertanianDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefJenisPertanianDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_pertanian"] = this.nama_jenis_pertanian;
        data["status_jenis_pertanian"] = this.status_jenis_pertanian;
        return data; 
    }
}

export interface ICreateOrEditRefJenisPertanianDto {
    id: number;
    nama_jenis_pertanian: string;
    status_jenis_pertanian: number;
}

export class GetRefJenisPertanianForEditDto implements IGetRefJenisPertanianForEditDto {
    ref_jenis_pertanian!: CreateOrEditRefJenisPertanianDto;

    constructor(data?: IGetRefJenisPertanianForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_jenis_pertanian = _data["ref_jenis_pertanian"] ? CreateOrEditRefJenisPertanianDto.fromJS(_data["ref_jenis_pertanian"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefJenisPertanianForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisPertanianForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_jenis_pertanian"] = this.ref_jenis_pertanian ? this.ref_jenis_pertanian.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefJenisPertanianForEditDto {
    ref_jenis_pertanian: CreateOrEditRefJenisPertanianDto;
}

/** RefJenisPertanian List in Tabular model */
export class GetRefJenisPertanianForListDto implements IGetRefJenisPertanianForListDto {
    /** Items in array of object */
    items!: RefJenisPertanianDto[];

    constructor(data?: IGetRefJenisPertanianForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefJenisPertanianDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefJenisPertanianForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisPertanianForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefJenisPertanian List in Tabular model */
export interface IGetRefJenisPertanianForListDto {
    /** Items in array of object */
    items: RefJenisPertanianDto[];
}

export class GetRefJenisPertanianForViewDto implements IGetRefJenisPertanianForViewDto {
    id!: number;
    nama_jenis_pertanian!: string;
    status_jenis_pertanian!: number;

    constructor(data?: IGetRefJenisPertanianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_pertanian = _data["nama_jenis_pertanian"];
            this.status_jenis_pertanian = _data["status_jenis_pertanian"];
        }
    }

    static fromJS(data: any): GetRefJenisPertanianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefJenisPertanianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_pertanian"] = this.nama_jenis_pertanian;
        data["status_jenis_pertanian"] = this.status_jenis_pertanian;
        return data; 
    }
}

export interface IGetRefJenisPertanianForViewDto {
    id: number;
    nama_jenis_pertanian: string;
    status_jenis_pertanian: number;
}

/** RefJenisPertanian List in Tabular model */
export class PagedResultDtoOfRefJenisPertanianForViewDto implements IPagedResultDtoOfRefJenisPertanianForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefJenisPertanianForViewDto[];

    constructor(data?: IPagedResultDtoOfRefJenisPertanianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefJenisPertanianForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefJenisPertanianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefJenisPertanianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefJenisPertanian List in Tabular model */
export interface IPagedResultDtoOfRefJenisPertanianForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefJenisPertanianForViewDto[];
}

export class RefJenisPertanianDto implements IRefJenisPertanianDto {
    id!: number;
    nama_jenis_pertanian!: string;
    status_jenis_pertanian!: number;

    constructor(data?: IRefJenisPertanianDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_jenis_pertanian = _data["nama_jenis_pertanian"];
            this.status_jenis_pertanian = _data["status_jenis_pertanian"];
        }
    }

    static fromJS(data: any): RefJenisPertanianDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefJenisPertanianDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_jenis_pertanian"] = this.nama_jenis_pertanian;
        data["status_jenis_pertanian"] = this.status_jenis_pertanian;
        return data; 
    }
}

export interface IRefJenisPertanianDto {
    id: number;
    nama_jenis_pertanian: string;
    status_jenis_pertanian: number;
}

export class CreateOrEditRefKementerianDto implements ICreateOrEditRefKementerianDto {
    id!: number;
    nama_kementerian!: string;
    kod_kementerian!: string;
    status_kementerian!: number;

    constructor(data?: ICreateOrEditRefKementerianDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kementerian = _data["nama_kementerian"];
            this.kod_kementerian = _data["kod_kementerian"];
            this.status_kementerian = _data["status_kementerian"];
        }
    }

    static fromJS(data: any): CreateOrEditRefKementerianDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefKementerianDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kementerian"] = this.nama_kementerian;
        data["kod_kementerian"] = this.kod_kementerian;
        data["status_kementerian"] = this.status_kementerian;
        return data; 
    }
}

export interface ICreateOrEditRefKementerianDto {
    id: number;
    nama_kementerian: string;
    kod_kementerian: string;
    status_kementerian: number;
}

export class GetRefKementerianForEditDto implements IGetRefKementerianForEditDto {
    ref_kementerian!: CreateOrEditRefKementerianDto;

    constructor(data?: IGetRefKementerianForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_kementerian = _data["ref_kementerian"] ? CreateOrEditRefKementerianDto.fromJS(_data["ref_kementerian"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefKementerianForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKementerianForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_kementerian"] = this.ref_kementerian ? this.ref_kementerian.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefKementerianForEditDto {
    ref_kementerian: CreateOrEditRefKementerianDto;
}

/** RefKementerian List in Tabular model */
export class GetRefKementerianForListDto implements IGetRefKementerianForListDto {
    /** Items in array of object */
    items!: RefKementerianDto[];

    constructor(data?: IGetRefKementerianForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefKementerianDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefKementerianForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKementerianForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefKementerian List in Tabular model */
export interface IGetRefKementerianForListDto {
    /** Items in array of object */
    items: RefKementerianDto[];
}

export class GetRefKementerianForViewDto implements IGetRefKementerianForViewDto {
    id!: number;
    nama_kementerian!: string;
    kod_kementerian!: string;
    status_kementerian!: number;

    constructor(data?: IGetRefKementerianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kementerian = _data["nama_kementerian"];
            this.kod_kementerian = _data["kod_kementerian"];
            this.status_kementerian = _data["status_kementerian"];
        }
    }

    static fromJS(data: any): GetRefKementerianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKementerianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kementerian"] = this.nama_kementerian;
        data["kod_kementerian"] = this.kod_kementerian;
        data["status_kementerian"] = this.status_kementerian;
        return data; 
    }
}

export interface IGetRefKementerianForViewDto {
    id: number;
    nama_kementerian: string;
    kod_kementerian: string;
    status_kementerian: number;
}

/** RefKementerian List in Tabular model */
export class PagedResultDtoOfRefKementerianForViewDto implements IPagedResultDtoOfRefKementerianForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefKementerianForViewDto[];

    constructor(data?: IPagedResultDtoOfRefKementerianForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefKementerianForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefKementerianForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefKementerianForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefKementerian List in Tabular model */
export interface IPagedResultDtoOfRefKementerianForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefKementerianForViewDto[];
}

export class RefKementerianDto implements IRefKementerianDto {
    id!: number;
    nama_kementerian!: string;
    kod_kementerian!: string;
    status_kementerian!: number;

    constructor(data?: IRefKementerianDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kementerian = _data["nama_kementerian"];
            this.kod_kementerian = _data["kod_kementerian"];
            this.status_kementerian = _data["status_kementerian"];
        }
    }

    static fromJS(data: any): RefKementerianDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefKementerianDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kementerian"] = this.nama_kementerian;
        data["kod_kementerian"] = this.kod_kementerian;
        data["status_kementerian"] = this.status_kementerian;
        return data; 
    }
}

export interface IRefKementerianDto {
    id: number;
    nama_kementerian: string;
    kod_kementerian: string;
    status_kementerian: number;
}

export class CreateOrEditRefKerosakanDto implements ICreateOrEditRefKerosakanDto {
    id!: number;
    nama_kerosakan!: string;
    status_kerosakan!: number;

    constructor(data?: ICreateOrEditRefKerosakanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kerosakan = _data["nama_kerosakan"];
            this.status_kerosakan = _data["status_kerosakan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefKerosakanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefKerosakanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kerosakan"] = this.nama_kerosakan;
        data["status_kerosakan"] = this.status_kerosakan;
        return data; 
    }
}

export interface ICreateOrEditRefKerosakanDto {
    id: number;
    nama_kerosakan: string;
    status_kerosakan: number;
}

export class GetRefKerosakanForEditDto implements IGetRefKerosakanForEditDto {
    ref_kerosakan!: CreateOrEditRefKerosakanDto;

    constructor(data?: IGetRefKerosakanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_kerosakan = _data["ref_kerosakan"] ? CreateOrEditRefKerosakanDto.fromJS(_data["ref_kerosakan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefKerosakanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKerosakanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_kerosakan"] = this.ref_kerosakan ? this.ref_kerosakan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefKerosakanForEditDto {
    ref_kerosakan: CreateOrEditRefKerosakanDto;
}

/** RefKerosakan List in Tabular model */
export class GetRefKerosakanForListDto implements IGetRefKerosakanForListDto {
    /** Items in array of object */
    items!: RefKerosakanDto[];

    constructor(data?: IGetRefKerosakanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefKerosakanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefKerosakanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKerosakanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefKerosakan List in Tabular model */
export interface IGetRefKerosakanForListDto {
    /** Items in array of object */
    items: RefKerosakanDto[];
}

export class GetRefKerosakanForViewDto implements IGetRefKerosakanForViewDto {
    id!: number;
    nama_kerosakan!: string;
    status_kerosakan!: number;

    constructor(data?: IGetRefKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kerosakan = _data["nama_kerosakan"];
            this.status_kerosakan = _data["status_kerosakan"];
        }
    }

    static fromJS(data: any): GetRefKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kerosakan"] = this.nama_kerosakan;
        data["status_kerosakan"] = this.status_kerosakan;
        return data; 
    }
}

export interface IGetRefKerosakanForViewDto {
    id: number;
    nama_kerosakan: string;
    status_kerosakan: number;
}

/** RefKerosakan List in Tabular model */
export class PagedResultDtoOfRefKerosakanForViewDto implements IPagedResultDtoOfRefKerosakanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefKerosakanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefKerosakanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefKerosakan List in Tabular model */
export interface IPagedResultDtoOfRefKerosakanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefKerosakanForViewDto[];
}

export class RefKerosakanDto implements IRefKerosakanDto {
    id!: number;
    nama_kerosakan!: string;
    status_kerosakan!: number;

    constructor(data?: IRefKerosakanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_kerosakan = _data["nama_kerosakan"];
            this.status_kerosakan = _data["status_kerosakan"];
        }
    }

    static fromJS(data: any): RefKerosakanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefKerosakanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_kerosakan"] = this.nama_kerosakan;
        data["status_kerosakan"] = this.status_kerosakan;
        return data; 
    }
}

export interface IRefKerosakanDto {
    id: number;
    nama_kerosakan: string;
    status_kerosakan: number;
}

export class CreateOrEditRefMukimDto implements ICreateOrEditRefMukimDto {
    id!: number;
    id_negeri!: number;
    id_daerah!: number;
    nama_mukim!: string;

    constructor(data?: ICreateOrEditRefMukimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_daerah = _data["id_daerah"];
            this.nama_mukim = _data["nama_mukim"];
        }
    }

    static fromJS(data: any): CreateOrEditRefMukimDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefMukimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_daerah"] = this.id_daerah;
        data["nama_mukim"] = this.nama_mukim;
        return data; 
    }
}

export interface ICreateOrEditRefMukimDto {
    id: number;
    id_negeri: number;
    id_daerah: number;
    nama_mukim: string;
}

export class GetRefMukimForEditDto implements IGetRefMukimForEditDto {
    ref_mukim!: CreateOrEditRefMukimDto;

    constructor(data?: IGetRefMukimForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_mukim = _data["ref_mukim"] ? CreateOrEditRefMukimDto.fromJS(_data["ref_mukim"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefMukimForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefMukimForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_mukim"] = this.ref_mukim ? this.ref_mukim.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefMukimForEditDto {
    ref_mukim: CreateOrEditRefMukimDto;
}

/** RefMukim List in Tabular model */
export class GetRefMukimForListDto implements IGetRefMukimForListDto {
    /** Items in array of object */
    items!: RefMukimDto[];

    constructor(data?: IGetRefMukimForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefMukimDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefMukimForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefMukimForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefMukim List in Tabular model */
export interface IGetRefMukimForListDto {
    /** Items in array of object */
    items: RefMukimDto[];
}

export class GetRefMukimForViewDto implements IGetRefMukimForViewDto {
    id!: number;
    id_negeri!: number;
    id_daerah!: number;
    nama_mukim!: string;

    constructor(data?: IGetRefMukimForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_daerah = _data["id_daerah"];
            this.nama_mukim = _data["nama_mukim"];
        }
    }

    static fromJS(data: any): GetRefMukimForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefMukimForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_daerah"] = this.id_daerah;
        data["nama_mukim"] = this.nama_mukim;
        return data; 
    }
}

export interface IGetRefMukimForViewDto {
    id: number;
    id_negeri: number;
    id_daerah: number;
    nama_mukim: string;
}

/** RefMukim List in Tabular model */
export class PagedResultDtoOfRefMukimForViewDto implements IPagedResultDtoOfRefMukimForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefMukimForViewDto[];

    constructor(data?: IPagedResultDtoOfRefMukimForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefMukimForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefMukimForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefMukimForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefMukim List in Tabular model */
export interface IPagedResultDtoOfRefMukimForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefMukimForViewDto[];
}

export class RefMukimDto implements IRefMukimDto {
    id!: number;
    id_negeri!: number;
    id_daerah!: number;
    nama_mukim!: string;

    constructor(data?: IRefMukimDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.id_daerah = _data["id_daerah"];
            this.nama_mukim = _data["nama_mukim"];
        }
    }

    static fromJS(data: any): RefMukimDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefMukimDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["id_daerah"] = this.id_daerah;
        data["nama_mukim"] = this.nama_mukim;
        return data; 
    }
}

export interface IRefMukimDto {
    id: number;
    id_negeri: number;
    id_daerah: number;
    nama_mukim: string;
}

export class CreateOrEditRefNegeriDto implements ICreateOrEditRefNegeriDto {
    id!: number;
    nama_negeri!: string;
    kod_negeri!: string;
    status_negeri!: number;

    constructor(data?: ICreateOrEditRefNegeriDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_negeri = _data["nama_negeri"];
            this.kod_negeri = _data["kod_negeri"];
            this.status_negeri = _data["status_negeri"];
        }
    }

    static fromJS(data: any): CreateOrEditRefNegeriDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefNegeriDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_negeri"] = this.nama_negeri;
        data["kod_negeri"] = this.kod_negeri;
        data["status_negeri"] = this.status_negeri;
        return data; 
    }
}

export interface ICreateOrEditRefNegeriDto {
    id: number;
    nama_negeri: string;
    kod_negeri: string;
    status_negeri: number;
}

export class GetRefNegeriForEditDto implements IGetRefNegeriForEditDto {
    ref_negeri!: CreateOrEditRefNegeriDto;

    constructor(data?: IGetRefNegeriForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_negeri = _data["ref_negeri"] ? CreateOrEditRefNegeriDto.fromJS(_data["ref_negeri"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefNegeriForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefNegeriForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_negeri"] = this.ref_negeri ? this.ref_negeri.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefNegeriForEditDto {
    ref_negeri: CreateOrEditRefNegeriDto;
}

/** RefNegeri List in Tabular model */
export class GetRefNegeriForListDto implements IGetRefNegeriForListDto {
    /** Items in array of object */
    items!: RefNegeriDto[];

    constructor(data?: IGetRefNegeriForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefNegeriDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefNegeriForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefNegeriForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefNegeri List in Tabular model */
export interface IGetRefNegeriForListDto {
    /** Items in array of object */
    items: RefNegeriDto[];
}

export class GetRefNegeriForViewDto implements IGetRefNegeriForViewDto {
    id!: number;
    nama_negeri!: string;
    kod_negeri!: string;
    status_negeri!: number;

    constructor(data?: IGetRefNegeriForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_negeri = _data["nama_negeri"];
            this.kod_negeri = _data["kod_negeri"];
            this.status_negeri = _data["status_negeri"];
        }
    }

    static fromJS(data: any): GetRefNegeriForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefNegeriForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_negeri"] = this.nama_negeri;
        data["kod_negeri"] = this.kod_negeri;
        data["status_negeri"] = this.status_negeri;
        return data; 
    }
}

export interface IGetRefNegeriForViewDto {
    id: number;
    nama_negeri: string;
    kod_negeri: string;
    status_negeri: number;
}

/** RefNegeri List in Tabular model */
export class PagedResultDtoOfRefNegeriForViewDto implements IPagedResultDtoOfRefNegeriForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefNegeriForViewDto[];

    constructor(data?: IPagedResultDtoOfRefNegeriForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefNegeriForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefNegeriForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefNegeriForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefNegeri List in Tabular model */
export interface IPagedResultDtoOfRefNegeriForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefNegeriForViewDto[];
}

export class RefNegeriDto implements IRefNegeriDto {
    id!: number;
    nama_negeri!: string;
    kod_negeri!: string;
    status_negeri!: number;

    constructor(data?: IRefNegeriDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_negeri = _data["nama_negeri"];
            this.kod_negeri = _data["kod_negeri"];
            this.status_negeri = _data["status_negeri"];
        }
    }

    static fromJS(data: any): RefNegeriDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefNegeriDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_negeri"] = this.nama_negeri;
        data["kod_negeri"] = this.kod_negeri;
        data["status_negeri"] = this.status_negeri;
        return data; 
    }
}

export interface IRefNegeriDto {
    id: number;
    nama_negeri: string;
    kod_negeri: string;
    status_negeri: number;
}

export class CreateOrEditRefParlimenDto implements ICreateOrEditRefParlimenDto {
    id!: number;
    id_negeri!: number;
    nama_parlimen!: string;
    kod_parlimen!: string;
    status_parlimen!: number;

    constructor(data?: ICreateOrEditRefParlimenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_parlimen = _data["nama_parlimen"];
            this.kod_parlimen = _data["kod_parlimen"];
            this.status_parlimen = _data["status_parlimen"];
        }
    }

    static fromJS(data: any): CreateOrEditRefParlimenDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefParlimenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_parlimen"] = this.nama_parlimen;
        data["kod_parlimen"] = this.kod_parlimen;
        data["status_parlimen"] = this.status_parlimen;
        return data; 
    }
}

export interface ICreateOrEditRefParlimenDto {
    id: number;
    id_negeri: number;
    nama_parlimen: string;
    kod_parlimen: string;
    status_parlimen: number;
}

export class GetRefParlimenForEditDto implements IGetRefParlimenForEditDto {
    ref_parlimen!: CreateOrEditRefParlimenDto;

    constructor(data?: IGetRefParlimenForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_parlimen = _data["ref_parlimen"] ? CreateOrEditRefParlimenDto.fromJS(_data["ref_parlimen"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefParlimenForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefParlimenForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_parlimen"] = this.ref_parlimen ? this.ref_parlimen.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefParlimenForEditDto {
    ref_parlimen: CreateOrEditRefParlimenDto;
}

/** RefParlimen List in Tabular model */
export class GetRefParlimenForListDto implements IGetRefParlimenForListDto {
    /** Items in array of object */
    items!: RefParlimenDto[];

    constructor(data?: IGetRefParlimenForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefParlimenDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefParlimenForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefParlimenForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefParlimen List in Tabular model */
export interface IGetRefParlimenForListDto {
    /** Items in array of object */
    items: RefParlimenDto[];
}

export class GetRefParlimenForViewDto implements IGetRefParlimenForViewDto {
    id!: number;
    id_negeri!: number;
    nama_parlimen!: string;
    kod_parlimen!: string;
    status_parlimen!: number;
    nama_negeri!: string;

    constructor(data?: IGetRefParlimenForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_parlimen = _data["nama_parlimen"];
            this.kod_parlimen = _data["kod_parlimen"];
            this.status_parlimen = _data["status_parlimen"];
            this.nama_negeri = _data["nama_negeri"];
        }
    }

    static fromJS(data: any): GetRefParlimenForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefParlimenForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_parlimen"] = this.nama_parlimen;
        data["kod_parlimen"] = this.kod_parlimen;
        data["status_parlimen"] = this.status_parlimen;
        data["nama_negeri"] = this.nama_negeri;
        return data; 
    }
}

export interface IGetRefParlimenForViewDto {
    id: number;
    id_negeri: number;
    nama_parlimen: string;
    kod_parlimen: string;
    status_parlimen: number;
    nama_negeri: string;
}

/** RefParlimen List in Tabular model */
export class PagedResultDtoOfRefParlimenForViewDto implements IPagedResultDtoOfRefParlimenForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefParlimenForViewDto[];

    constructor(data?: IPagedResultDtoOfRefParlimenForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefParlimenForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefParlimenForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefParlimenForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefParlimen List in Tabular model */
export interface IPagedResultDtoOfRefParlimenForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefParlimenForViewDto[];
}

export class RefParlimenDto implements IRefParlimenDto {
    id!: number;
    id_negeri!: number;
    nama_parlimen!: string;
    kod_parlimen!: string;
    status_parlimen!: number;

    constructor(data?: IRefParlimenDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_negeri = _data["id_negeri"];
            this.nama_parlimen = _data["nama_parlimen"];
            this.kod_parlimen = _data["kod_parlimen"];
            this.status_parlimen = _data["status_parlimen"];
        }
    }

    static fromJS(data: any): RefParlimenDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefParlimenDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_negeri"] = this.id_negeri;
        data["nama_parlimen"] = this.nama_parlimen;
        data["kod_parlimen"] = this.kod_parlimen;
        data["status_parlimen"] = this.status_parlimen;
        return data; 
    }
}

export interface IRefParlimenDto {
    id: number;
    id_negeri: number;
    nama_parlimen: string;
    kod_parlimen: string;
    status_parlimen: number;
}

export class CreateOrEditRefPelaksanaDto implements ICreateOrEditRefPelaksanaDto {
    id!: number;
    nama_pelaksana!: string;
    status_pelaksana!: number;

    constructor(data?: ICreateOrEditRefPelaksanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pelaksana = _data["nama_pelaksana"];
            this.status_pelaksana = _data["status_pelaksana"];
        }
    }

    static fromJS(data: any): CreateOrEditRefPelaksanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefPelaksanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pelaksana"] = this.nama_pelaksana;
        data["status_pelaksana"] = this.status_pelaksana;
        return data; 
    }
}

export interface ICreateOrEditRefPelaksanaDto {
    id: number;
    nama_pelaksana: string;
    status_pelaksana: number;
}

export class GetRefPelaksanaForEditDto implements IGetRefPelaksanaForEditDto {
    ref_pelaksana!: CreateOrEditRefPelaksanaDto;

    constructor(data?: IGetRefPelaksanaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_pelaksana = _data["ref_pelaksana"] ? CreateOrEditRefPelaksanaDto.fromJS(_data["ref_pelaksana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefPelaksanaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPelaksanaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_pelaksana"] = this.ref_pelaksana ? this.ref_pelaksana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefPelaksanaForEditDto {
    ref_pelaksana: CreateOrEditRefPelaksanaDto;
}

/** RefPelaksana List in Tabular model */
export class GetRefPelaksanaForListDto implements IGetRefPelaksanaForListDto {
    /** Items in array of object */
    items!: RefPelaksanaDto[];

    constructor(data?: IGetRefPelaksanaForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefPelaksanaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefPelaksanaForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPelaksanaForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPelaksana List in Tabular model */
export interface IGetRefPelaksanaForListDto {
    /** Items in array of object */
    items: RefPelaksanaDto[];
}

export class GetRefPelaksanaForViewDto implements IGetRefPelaksanaForViewDto {
    id!: number;
    nama_pelaksana!: string;
    status_pelaksana!: number;

    constructor(data?: IGetRefPelaksanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pelaksana = _data["nama_pelaksana"];
            this.status_pelaksana = _data["status_pelaksana"];
        }
    }

    static fromJS(data: any): GetRefPelaksanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPelaksanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pelaksana"] = this.nama_pelaksana;
        data["status_pelaksana"] = this.status_pelaksana;
        return data; 
    }
}

export interface IGetRefPelaksanaForViewDto {
    id: number;
    nama_pelaksana: string;
    status_pelaksana: number;
}

/** RefPelaksana List in Tabular model */
export class PagedResultDtoOfRefPelaksanaForViewDto implements IPagedResultDtoOfRefPelaksanaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefPelaksanaForViewDto[];

    constructor(data?: IPagedResultDtoOfRefPelaksanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefPelaksanaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefPelaksanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefPelaksanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPelaksana List in Tabular model */
export interface IPagedResultDtoOfRefPelaksanaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefPelaksanaForViewDto[];
}

export class RefPelaksanaDto implements IRefPelaksanaDto {
    id!: number;
    nama_pelaksana!: string;
    status_pelaksana!: number;

    constructor(data?: IRefPelaksanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pelaksana = _data["nama_pelaksana"];
            this.status_pelaksana = _data["status_pelaksana"];
        }
    }

    static fromJS(data: any): RefPelaksanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefPelaksanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pelaksana"] = this.nama_pelaksana;
        data["status_pelaksana"] = this.status_pelaksana;
        return data; 
    }
}

export interface IRefPelaksanaDto {
    id: number;
    nama_pelaksana: string;
    status_pelaksana: number;
}

export class CreateOrEditRefPemilikDto implements ICreateOrEditRefPemilikDto {
    id!: number;
    nama_pemilik!: string;
    status_pemilik!: number;

    constructor(data?: ICreateOrEditRefPemilikDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pemilik = _data["nama_pemilik"];
            this.status_pemilik = _data["status_pemilik"];
        }
    }

    static fromJS(data: any): CreateOrEditRefPemilikDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefPemilikDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pemilik"] = this.nama_pemilik;
        data["status_pemilik"] = this.status_pemilik;
        return data; 
    }
}

export interface ICreateOrEditRefPemilikDto {
    id: number;
    nama_pemilik: string;
    status_pemilik: number;
}

export class GetRefPemilikForEditDto implements IGetRefPemilikForEditDto {
    ref_pemilik!: CreateOrEditRefPemilikDto;

    constructor(data?: IGetRefPemilikForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_pemilik = _data["ref_pemilik"] ? CreateOrEditRefPemilikDto.fromJS(_data["ref_pemilik"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefPemilikForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPemilikForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_pemilik"] = this.ref_pemilik ? this.ref_pemilik.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefPemilikForEditDto {
    ref_pemilik: CreateOrEditRefPemilikDto;
}

/** RefPemilik List in Tabular model */
export class GetRefPemilikForListDto implements IGetRefPemilikForListDto {
    /** Items in array of object */
    items!: RefPemilikDto[];

    constructor(data?: IGetRefPemilikForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefPemilikDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefPemilikForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPemilikForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPemilik List in Tabular model */
export interface IGetRefPemilikForListDto {
    /** Items in array of object */
    items: RefPemilikDto[];
}

export class GetRefPemilikForViewDto implements IGetRefPemilikForViewDto {
    id!: number;
    nama_pemilik!: string;
    status_pemilik!: number;

    constructor(data?: IGetRefPemilikForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pemilik = _data["nama_pemilik"];
            this.status_pemilik = _data["status_pemilik"];
        }
    }

    static fromJS(data: any): GetRefPemilikForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPemilikForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pemilik"] = this.nama_pemilik;
        data["status_pemilik"] = this.status_pemilik;
        return data; 
    }
}

export interface IGetRefPemilikForViewDto {
    id: number;
    nama_pemilik: string;
    status_pemilik: number;
}

/** RefPemilik List in Tabular model */
export class PagedResultDtoOfRefPemilikForViewDto implements IPagedResultDtoOfRefPemilikForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefPemilikForViewDto[];

    constructor(data?: IPagedResultDtoOfRefPemilikForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefPemilikForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefPemilikForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefPemilikForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPemilik List in Tabular model */
export interface IPagedResultDtoOfRefPemilikForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefPemilikForViewDto[];
}

export class RefPemilikDto implements IRefPemilikDto {
    id!: number;
    nama_pemilik!: string;
    status_pemilik!: number;

    constructor(data?: IRefPemilikDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_pemilik = _data["nama_pemilik"];
            this.status_pemilik = _data["status_pemilik"];
        }
    }

    static fromJS(data: any): RefPemilikDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefPemilikDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_pemilik"] = this.nama_pemilik;
        data["status_pemilik"] = this.status_pemilik;
        return data; 
    }
}

export interface IRefPemilikDto {
    id: number;
    nama_pemilik: string;
    status_pemilik: number;
}

export class CreateOrEditRefPerananDto implements ICreateOrEditRefPerananDto {
    id!: number;
    peranan!: string;

    constructor(data?: ICreateOrEditRefPerananDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.peranan = _data["peranan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefPerananDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefPerananDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["peranan"] = this.peranan;
        return data; 
    }
}

export interface ICreateOrEditRefPerananDto {
    id: number;
    peranan: string;
}

export class GetRefPerananForEditDto implements IGetRefPerananForEditDto {
    ref_peranan!: CreateOrEditRefPerananDto;

    constructor(data?: IGetRefPerananForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_peranan = _data["ref_peranan"] ? CreateOrEditRefPerananDto.fromJS(_data["ref_peranan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefPerananForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPerananForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_peranan"] = this.ref_peranan ? this.ref_peranan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefPerananForEditDto {
    ref_peranan: CreateOrEditRefPerananDto;
}

/** RefPeranan List in Tabular model */
export class GetRefPerananForListDto implements IGetRefPerananForListDto {
    /** Items in array of object */
    items!: RefPerananDto[];

    constructor(data?: IGetRefPerananForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefPerananDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefPerananForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPerananForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPeranan List in Tabular model */
export interface IGetRefPerananForListDto {
    /** Items in array of object */
    items: RefPerananDto[];
}

export class GetRefPerananForViewDto implements IGetRefPerananForViewDto {
    id!: number;
    peranan!: string;

    constructor(data?: IGetRefPerananForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.peranan = _data["peranan"];
        }
    }

    static fromJS(data: any): GetRefPerananForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPerananForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["peranan"] = this.peranan;
        return data; 
    }
}

export interface IGetRefPerananForViewDto {
    id: number;
    peranan: string;
}

/** RefPeranan List in Tabular model */
export class PagedResultDtoOfRefPerananForViewDto implements IPagedResultDtoOfRefPerananForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefPerananForViewDto[];

    constructor(data?: IPagedResultDtoOfRefPerananForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefPerananForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefPerananForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefPerananForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPeranan List in Tabular model */
export interface IPagedResultDtoOfRefPerananForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefPerananForViewDto[];
}

export class RefPerananDto implements IRefPerananDto {
    id!: number;
    peranan!: string;

    constructor(data?: IRefPerananDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.peranan = _data["peranan"];
        }
    }

    static fromJS(data: any): RefPerananDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefPerananDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["peranan"] = this.peranan;
        return data; 
    }
}

export interface IRefPerananDto {
    id: number;
    peranan: string;
}

export class CreateOrEditRefPindahDto implements ICreateOrEditRefPindahDto {
    id!: number;
    pindah!: string;
    status_pindah!: number;

    constructor(data?: ICreateOrEditRefPindahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pindah = _data["pindah"];
            this.status_pindah = _data["status_pindah"];
        }
    }

    static fromJS(data: any): CreateOrEditRefPindahDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefPindahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pindah"] = this.pindah;
        data["status_pindah"] = this.status_pindah;
        return data; 
    }
}

export interface ICreateOrEditRefPindahDto {
    id: number;
    pindah: string;
    status_pindah: number;
}

export class GetRefPindahForEditDto implements IGetRefPindahForEditDto {
    ref_pindah!: CreateOrEditRefPindahDto;

    constructor(data?: IGetRefPindahForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_pindah = _data["ref_pindah"] ? CreateOrEditRefPindahDto.fromJS(_data["ref_pindah"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefPindahForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPindahForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_pindah"] = this.ref_pindah ? this.ref_pindah.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefPindahForEditDto {
    ref_pindah: CreateOrEditRefPindahDto;
}

/** RefPindah List in Tabular model */
export class GetRefPindahForListDto implements IGetRefPindahForListDto {
    /** Items in array of object */
    items!: RefPindahDto[];

    constructor(data?: IGetRefPindahForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefPindahDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefPindahForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPindahForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPindah List in Tabular model */
export interface IGetRefPindahForListDto {
    /** Items in array of object */
    items: RefPindahDto[];
}

export class GetRefPindahForViewDto implements IGetRefPindahForViewDto {
    id!: number;
    pindah!: string;
    status_pindah!: number;

    constructor(data?: IGetRefPindahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pindah = _data["pindah"];
            this.status_pindah = _data["status_pindah"];
        }
    }

    static fromJS(data: any): GetRefPindahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPindahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pindah"] = this.pindah;
        data["status_pindah"] = this.status_pindah;
        return data; 
    }
}

export interface IGetRefPindahForViewDto {
    id: number;
    pindah: string;
    status_pindah: number;
}

/** RefPindah List in Tabular model */
export class PagedResultDtoOfRefPindahForViewDto implements IPagedResultDtoOfRefPindahForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefPindahForViewDto[];

    constructor(data?: IPagedResultDtoOfRefPindahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefPindahForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefPindahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefPindahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPindah List in Tabular model */
export interface IPagedResultDtoOfRefPindahForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefPindahForViewDto[];
}

export class RefPindahDto implements IRefPindahDto {
    id!: number;
    pindah!: string;
    status_pindah!: number;

    constructor(data?: IRefPindahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.pindah = _data["pindah"];
            this.status_pindah = _data["status_pindah"];
        }
    }

    static fromJS(data: any): RefPindahDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefPindahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["pindah"] = this.pindah;
        data["status_pindah"] = this.status_pindah;
        return data; 
    }
}

export interface IRefPindahDto {
    id: number;
    pindah: string;
    status_pindah: number;
}

export class CreateOrEditRefPinjamanPerniagaanDto implements ICreateOrEditRefPinjamanPerniagaanDto {
    id!: number;
    nama_agensi_pinjaman!: string;
    status_agensi_pinjaman!: number;

    constructor(data?: ICreateOrEditRefPinjamanPerniagaanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agensi_pinjaman = _data["nama_agensi_pinjaman"];
            this.status_agensi_pinjaman = _data["status_agensi_pinjaman"];
        }
    }

    static fromJS(data: any): CreateOrEditRefPinjamanPerniagaanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefPinjamanPerniagaanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agensi_pinjaman"] = this.nama_agensi_pinjaman;
        data["status_agensi_pinjaman"] = this.status_agensi_pinjaman;
        return data; 
    }
}

export interface ICreateOrEditRefPinjamanPerniagaanDto {
    id: number;
    nama_agensi_pinjaman: string;
    status_agensi_pinjaman: number;
}

export class GetRefPinjamanPerniagaanForEditDto implements IGetRefPinjamanPerniagaanForEditDto {
    ref_pinjaman_perniagaan!: CreateOrEditRefPinjamanPerniagaanDto;

    constructor(data?: IGetRefPinjamanPerniagaanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_pinjaman_perniagaan = _data["ref_pinjaman_perniagaan"] ? CreateOrEditRefPinjamanPerniagaanDto.fromJS(_data["ref_pinjaman_perniagaan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefPinjamanPerniagaanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPinjamanPerniagaanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_pinjaman_perniagaan"] = this.ref_pinjaman_perniagaan ? this.ref_pinjaman_perniagaan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefPinjamanPerniagaanForEditDto {
    ref_pinjaman_perniagaan: CreateOrEditRefPinjamanPerniagaanDto;
}

/** RefPinjamanPerniagaan List in Tabular model */
export class GetRefPinjamanPerniagaanForListDto implements IGetRefPinjamanPerniagaanForListDto {
    /** Items in array of object */
    items!: RefPinjamanPerniagaanDto[];

    constructor(data?: IGetRefPinjamanPerniagaanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefPinjamanPerniagaanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefPinjamanPerniagaanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPinjamanPerniagaanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPinjamanPerniagaan List in Tabular model */
export interface IGetRefPinjamanPerniagaanForListDto {
    /** Items in array of object */
    items: RefPinjamanPerniagaanDto[];
}

export class GetRefPinjamanPerniagaanForViewDto implements IGetRefPinjamanPerniagaanForViewDto {
    id!: number;
    nama_agensi_pinjaman!: string;
    status_agensi_pinjaman!: number;

    constructor(data?: IGetRefPinjamanPerniagaanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agensi_pinjaman = _data["nama_agensi_pinjaman"];
            this.status_agensi_pinjaman = _data["status_agensi_pinjaman"];
        }
    }

    static fromJS(data: any): GetRefPinjamanPerniagaanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefPinjamanPerniagaanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agensi_pinjaman"] = this.nama_agensi_pinjaman;
        data["status_agensi_pinjaman"] = this.status_agensi_pinjaman;
        return data; 
    }
}

export interface IGetRefPinjamanPerniagaanForViewDto {
    id: number;
    nama_agensi_pinjaman: string;
    status_agensi_pinjaman: number;
}

/** RefPinjamanPerniagaan List in Tabular model */
export class PagedResultDtoOfRefPinjamanPerniagaanForViewDto implements IPagedResultDtoOfRefPinjamanPerniagaanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefPinjamanPerniagaanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefPinjamanPerniagaanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefPinjamanPerniagaanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefPinjamanPerniagaanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefPinjamanPerniagaanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefPinjamanPerniagaan List in Tabular model */
export interface IPagedResultDtoOfRefPinjamanPerniagaanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefPinjamanPerniagaanForViewDto[];
}

export class RefPinjamanPerniagaanDto implements IRefPinjamanPerniagaanDto {
    id!: number;
    nama_agensi_pinjaman!: string;
    status_agensi_pinjaman!: number;

    constructor(data?: IRefPinjamanPerniagaanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_agensi_pinjaman = _data["nama_agensi_pinjaman"];
            this.status_agensi_pinjaman = _data["status_agensi_pinjaman"];
        }
    }

    static fromJS(data: any): RefPinjamanPerniagaanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefPinjamanPerniagaanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_agensi_pinjaman"] = this.nama_agensi_pinjaman;
        data["status_agensi_pinjaman"] = this.status_agensi_pinjaman;
        return data; 
    }
}

export interface IRefPinjamanPerniagaanDto {
    id: number;
    nama_agensi_pinjaman: string;
    status_agensi_pinjaman: number;
}

export class CreateOrEditRefRujukanDto implements ICreateOrEditRefRujukanDto {
    id!: number;
    nama_rujukan!: string;
    nama_dokumen!: string;
    lokasi_dokumen!: string;
    sambungan_fail!: string;
    status_rujukan!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_cipta!: number;
    tarikh_kemaskini!: moment.Moment;
    id_pengguna_kemaskini!: number;

    constructor(data?: ICreateOrEditRefRujukanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_rujukan = _data["nama_rujukan"];
            this.nama_dokumen = _data["nama_dokumen"];
            this.lokasi_dokumen = _data["lokasi_dokumen"];
            this.sambungan_fail = _data["sambungan_fail"];
            this.status_rujukan = _data["status_rujukan"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
        }
    }

    static fromJS(data: any): CreateOrEditRefRujukanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefRujukanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_rujukan"] = this.nama_rujukan;
        data["nama_dokumen"] = this.nama_dokumen;
        data["lokasi_dokumen"] = this.lokasi_dokumen;
        data["sambungan_fail"] = this.sambungan_fail;
        data["status_rujukan"] = this.status_rujukan;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        return data; 
    }
}

export interface ICreateOrEditRefRujukanDto {
    id: number;
    nama_rujukan: string;
    nama_dokumen: string;
    lokasi_dokumen: string;
    sambungan_fail: string;
    status_rujukan: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_cipta: number;
    tarikh_kemaskini: moment.Moment;
    id_pengguna_kemaskini: number;
}

export class GetRefRujukanForEditDto implements IGetRefRujukanForEditDto {
    ref_rujukan!: CreateOrEditRefRujukanDto;

    constructor(data?: IGetRefRujukanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_rujukan = _data["ref_rujukan"] ? CreateOrEditRefRujukanDto.fromJS(_data["ref_rujukan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefRujukanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefRujukanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_rujukan"] = this.ref_rujukan ? this.ref_rujukan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefRujukanForEditDto {
    ref_rujukan: CreateOrEditRefRujukanDto;
}

export class GetRefRujukanForViewDto implements IGetRefRujukanForViewDto {
    id!: number;
    nama_rujukan!: string;
    nama_dokumen!: string;
    lokasi_dokumen!: string;
    sambungan_fail!: string;
    status_rujukan!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_cipta!: number;
    tarikh_kemaskini!: moment.Moment;
    id_pengguna_kemaskini!: number;

    constructor(data?: IGetRefRujukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_rujukan = _data["nama_rujukan"];
            this.nama_dokumen = _data["nama_dokumen"];
            this.lokasi_dokumen = _data["lokasi_dokumen"];
            this.sambungan_fail = _data["sambungan_fail"];
            this.status_rujukan = _data["status_rujukan"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
        }
    }

    static fromJS(data: any): GetRefRujukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefRujukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_rujukan"] = this.nama_rujukan;
        data["nama_dokumen"] = this.nama_dokumen;
        data["lokasi_dokumen"] = this.lokasi_dokumen;
        data["sambungan_fail"] = this.sambungan_fail;
        data["status_rujukan"] = this.status_rujukan;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        return data; 
    }
}

export interface IGetRefRujukanForViewDto {
    id: number;
    nama_rujukan: string;
    nama_dokumen: string;
    lokasi_dokumen: string;
    sambungan_fail: string;
    status_rujukan: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_cipta: number;
    tarikh_kemaskini: moment.Moment;
    id_pengguna_kemaskini: number;
}

export class OutputFail implements IOutputFail {
    file_extension!: string;
    file_location!: string;
    file_name!: string;

    constructor(data?: IOutputFail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.file_extension = _data["file_extension"];
            this.file_location = _data["file_location"];
            this.file_name = _data["file_name"];
        }
    }

    static fromJS(data: any): OutputFail {
        data = typeof data === 'object' ? data : {};
        let result = new OutputFail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["file_extension"] = this.file_extension;
        data["file_location"] = this.file_location;
        data["file_name"] = this.file_name;
        return data; 
    }
}

export interface IOutputFail {
    file_extension: string;
    file_location: string;
    file_name: string;
}

/** RefRujukan List in Tabular model */
export class PagedResultDtoOfRefRujukanForViewDto implements IPagedResultDtoOfRefRujukanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefRujukanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefRujukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefRujukanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefRujukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefRujukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefRujukan List in Tabular model */
export interface IPagedResultDtoOfRefRujukanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefRujukanForViewDto[];
}

export class RefRujukanDto implements IRefRujukanDto {
    id!: number;
    nama_rujukan!: string;
    nama_dokumen!: string;
    lokasi_dokumen!: string;
    sambungan_fail!: string;
    status_rujukan!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_cipta!: number;
    tarikh_kemaskini!: moment.Moment;
    id_pengguna_kemaskini!: number;

    constructor(data?: IRefRujukanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_rujukan = _data["nama_rujukan"];
            this.nama_dokumen = _data["nama_dokumen"];
            this.lokasi_dokumen = _data["lokasi_dokumen"];
            this.sambungan_fail = _data["sambungan_fail"];
            this.status_rujukan = _data["status_rujukan"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
        }
    }

    static fromJS(data: any): RefRujukanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefRujukanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_rujukan"] = this.nama_rujukan;
        data["nama_dokumen"] = this.nama_dokumen;
        data["lokasi_dokumen"] = this.lokasi_dokumen;
        data["sambungan_fail"] = this.sambungan_fail;
        data["status_rujukan"] = this.status_rujukan;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        return data; 
    }
}

export interface IRefRujukanDto {
    id: number;
    nama_rujukan: string;
    nama_dokumen: string;
    lokasi_dokumen: string;
    sambungan_fail: string;
    status_rujukan: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_cipta: number;
    tarikh_kemaskini: moment.Moment;
    id_pengguna_kemaskini: number;
}

export class CreateOrEditRefSektorDto implements ICreateOrEditRefSektorDto {
    id!: number;
    nama_sektor!: string;
    status_sektor!: number;

    constructor(data?: ICreateOrEditRefSektorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sektor = _data["nama_sektor"];
            this.status_sektor = _data["status_sektor"];
        }
    }

    static fromJS(data: any): CreateOrEditRefSektorDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefSektorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sektor"] = this.nama_sektor;
        data["status_sektor"] = this.status_sektor;
        return data; 
    }
}

export interface ICreateOrEditRefSektorDto {
    id: number;
    nama_sektor: string;
    status_sektor: number;
}

export class GetRefSektorForEditDto implements IGetRefSektorForEditDto {
    ref_sektor!: CreateOrEditRefSektorDto;

    constructor(data?: IGetRefSektorForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_sektor = _data["ref_sektor"] ? CreateOrEditRefSektorDto.fromJS(_data["ref_sektor"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefSektorForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSektorForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_sektor"] = this.ref_sektor ? this.ref_sektor.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefSektorForEditDto {
    ref_sektor: CreateOrEditRefSektorDto;
}

/** RefSektor List in Tabular model */
export class GetRefSektorForListDto implements IGetRefSektorForListDto {
    /** Items in array of object */
    items!: RefSektorDto[];

    constructor(data?: IGetRefSektorForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefSektorDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefSektorForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSektorForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSektor List in Tabular model */
export interface IGetRefSektorForListDto {
    /** Items in array of object */
    items: RefSektorDto[];
}

export class GetRefSektorForViewDto implements IGetRefSektorForViewDto {
    id!: number;
    nama_sektor!: string;
    status_sektor!: number;

    constructor(data?: IGetRefSektorForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sektor = _data["nama_sektor"];
            this.status_sektor = _data["status_sektor"];
        }
    }

    static fromJS(data: any): GetRefSektorForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSektorForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sektor"] = this.nama_sektor;
        data["status_sektor"] = this.status_sektor;
        return data; 
    }
}

export interface IGetRefSektorForViewDto {
    id: number;
    nama_sektor: string;
    status_sektor: number;
}

/** RefSektor List in Tabular model */
export class PagedResultDtoOfRefSektorForViewDto implements IPagedResultDtoOfRefSektorForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefSektorForViewDto[];

    constructor(data?: IPagedResultDtoOfRefSektorForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefSektorForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefSektorForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefSektorForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSektor List in Tabular model */
export interface IPagedResultDtoOfRefSektorForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefSektorForViewDto[];
}

export class RefSektorDto implements IRefSektorDto {
    id!: number;
    nama_sektor!: string;
    status_sektor!: number;

    constructor(data?: IRefSektorDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sektor = _data["nama_sektor"];
            this.status_sektor = _data["status_sektor"];
        }
    }

    static fromJS(data: any): RefSektorDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefSektorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sektor"] = this.nama_sektor;
        data["status_sektor"] = this.status_sektor;
        return data; 
    }
}

export interface IRefSektorDto {
    id: number;
    nama_sektor: string;
    status_sektor: number;
}

export class CreateOrEditRefStatusKemajuanDto implements ICreateOrEditRefStatusKemajuanDto {
    id!: number;
    status_kemajuan!: string;
    status!: number;
    kod_status_kemajuan!: string;

    constructor(data?: ICreateOrEditRefStatusKemajuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status_kemajuan = _data["status_kemajuan"];
            this.status = _data["status"];
            this.kod_status_kemajuan = _data["kod_status_kemajuan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefStatusKemajuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefStatusKemajuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status_kemajuan"] = this.status_kemajuan;
        data["status"] = this.status;
        data["kod_status_kemajuan"] = this.kod_status_kemajuan;
        return data; 
    }
}

export interface ICreateOrEditRefStatusKemajuanDto {
    id: number;
    status_kemajuan: string;
    status: number;
    kod_status_kemajuan: string;
}

export class GetRefStatusKemajuanForEditDto implements IGetRefStatusKemajuanForEditDto {
    ref_status_kemajuan!: CreateOrEditRefStatusKemajuanDto;

    constructor(data?: IGetRefStatusKemajuanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_status_kemajuan = _data["ref_status_kemajuan"] ? CreateOrEditRefStatusKemajuanDto.fromJS(_data["ref_status_kemajuan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefStatusKemajuanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKemajuanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_status_kemajuan"] = this.ref_status_kemajuan ? this.ref_status_kemajuan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefStatusKemajuanForEditDto {
    ref_status_kemajuan: CreateOrEditRefStatusKemajuanDto;
}

/** RefStatusKemajuan List in Tabular model */
export class GetRefStatusKemajuanForListDto implements IGetRefStatusKemajuanForListDto {
    /** Items in array of object */
    items!: RefStatusKemajuanDto[];

    constructor(data?: IGetRefStatusKemajuanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefStatusKemajuanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefStatusKemajuanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKemajuanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefStatusKemajuan List in Tabular model */
export interface IGetRefStatusKemajuanForListDto {
    /** Items in array of object */
    items: RefStatusKemajuanDto[];
}

export class GetRefStatusKemajuanForViewDto implements IGetRefStatusKemajuanForViewDto {
    id!: number;
    status_kemajuan!: string;
    status!: number;
    kod_status_kemajuan!: string;

    constructor(data?: IGetRefStatusKemajuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status_kemajuan = _data["status_kemajuan"];
            this.status = _data["status"];
            this.kod_status_kemajuan = _data["kod_status_kemajuan"];
        }
    }

    static fromJS(data: any): GetRefStatusKemajuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKemajuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status_kemajuan"] = this.status_kemajuan;
        data["status"] = this.status;
        data["kod_status_kemajuan"] = this.kod_status_kemajuan;
        return data; 
    }
}

export interface IGetRefStatusKemajuanForViewDto {
    id: number;
    status_kemajuan: string;
    status: number;
    kod_status_kemajuan: string;
}

/** RefStatusKemajuan List in Tabular model */
export class PagedResultDtoOfRefStatusKemajuanForViewDto implements IPagedResultDtoOfRefStatusKemajuanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefStatusKemajuanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefStatusKemajuanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefStatusKemajuanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefStatusKemajuanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefStatusKemajuanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefStatusKemajuan List in Tabular model */
export interface IPagedResultDtoOfRefStatusKemajuanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefStatusKemajuanForViewDto[];
}

export class RefStatusKemajuanDto implements IRefStatusKemajuanDto {
    id!: number;
    status_kemajuan!: string;
    status!: number;
    kod_status_kemajuan!: string;

    constructor(data?: IRefStatusKemajuanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status_kemajuan = _data["status_kemajuan"];
            this.status = _data["status"];
            this.kod_status_kemajuan = _data["kod_status_kemajuan"];
        }
    }

    static fromJS(data: any): RefStatusKemajuanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefStatusKemajuanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status_kemajuan"] = this.status_kemajuan;
        data["status"] = this.status;
        data["kod_status_kemajuan"] = this.kod_status_kemajuan;
        return data; 
    }
}

export interface IRefStatusKemajuanDto {
    id: number;
    status_kemajuan: string;
    status: number;
    kod_status_kemajuan: string;
}

export class CreateOrEditRefStatusKerosakanDto implements ICreateOrEditRefStatusKerosakanDto {
    id!: number;
    nama_status_kerosakan!: string;
    status!: number;

    constructor(data?: ICreateOrEditRefStatusKerosakanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_status_kerosakan = _data["nama_status_kerosakan"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateOrEditRefStatusKerosakanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefStatusKerosakanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_status_kerosakan"] = this.nama_status_kerosakan;
        data["status"] = this.status;
        return data; 
    }
}

export interface ICreateOrEditRefStatusKerosakanDto {
    id: number;
    nama_status_kerosakan: string;
    status: number;
}

export class GetRefStatusKerosakanForEditDto implements IGetRefStatusKerosakanForEditDto {
    ref_status_kerosakan!: CreateOrEditRefStatusKerosakanDto;

    constructor(data?: IGetRefStatusKerosakanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_status_kerosakan = _data["ref_status_kerosakan"] ? CreateOrEditRefStatusKerosakanDto.fromJS(_data["ref_status_kerosakan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefStatusKerosakanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKerosakanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_status_kerosakan"] = this.ref_status_kerosakan ? this.ref_status_kerosakan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefStatusKerosakanForEditDto {
    ref_status_kerosakan: CreateOrEditRefStatusKerosakanDto;
}

/** RefStatusKerosakan List in Tabular model */
export class GetRefStatusKerosakanForListDto implements IGetRefStatusKerosakanForListDto {
    /** Items in array of object */
    items!: RefStatusKerosakanDto[];

    constructor(data?: IGetRefStatusKerosakanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefStatusKerosakanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefStatusKerosakanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKerosakanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefStatusKerosakan List in Tabular model */
export interface IGetRefStatusKerosakanForListDto {
    /** Items in array of object */
    items: RefStatusKerosakanDto[];
}

export class GetRefStatusKerosakanForViewDto implements IGetRefStatusKerosakanForViewDto {
    id!: number;
    nama_status_kerosakan!: string;
    status!: number;

    constructor(data?: IGetRefStatusKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_status_kerosakan = _data["nama_status_kerosakan"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): GetRefStatusKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefStatusKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_status_kerosakan"] = this.nama_status_kerosakan;
        data["status"] = this.status;
        return data; 
    }
}

export interface IGetRefStatusKerosakanForViewDto {
    id: number;
    nama_status_kerosakan: string;
    status: number;
}

/** RefStatusKerosakan List in Tabular model */
export class PagedResultDtoOfRefStatusKerosakanForViewDto implements IPagedResultDtoOfRefStatusKerosakanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefStatusKerosakanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefStatusKerosakanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefStatusKerosakanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefStatusKerosakanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefStatusKerosakanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefStatusKerosakan List in Tabular model */
export interface IPagedResultDtoOfRefStatusKerosakanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefStatusKerosakanForViewDto[];
}

export class RefStatusKerosakanDto implements IRefStatusKerosakanDto {
    id!: number;
    nama_status_kerosakan!: string;
    status!: number;

    constructor(data?: IRefStatusKerosakanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_status_kerosakan = _data["nama_status_kerosakan"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): RefStatusKerosakanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefStatusKerosakanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_status_kerosakan"] = this.nama_status_kerosakan;
        data["status"] = this.status;
        return data; 
    }
}

export interface IRefStatusKerosakanDto {
    id: number;
    nama_status_kerosakan: string;
    status: number;
}

export class CreateOrEditRefSumberDanaDto implements ICreateOrEditRefSumberDanaDto {
    id!: number;
    nama_sumber_dana!: string;
    ringkasan_sumber_dana!: string;
    status_sumber_dana!: number;

    constructor(data?: ICreateOrEditRefSumberDanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_dana = _data["nama_sumber_dana"];
            this.ringkasan_sumber_dana = _data["ringkasan_sumber_dana"];
            this.status_sumber_dana = _data["status_sumber_dana"];
        }
    }

    static fromJS(data: any): CreateOrEditRefSumberDanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefSumberDanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_dana"] = this.nama_sumber_dana;
        data["ringkasan_sumber_dana"] = this.ringkasan_sumber_dana;
        data["status_sumber_dana"] = this.status_sumber_dana;
        return data; 
    }
}

export interface ICreateOrEditRefSumberDanaDto {
    id: number;
    nama_sumber_dana: string;
    ringkasan_sumber_dana: string;
    status_sumber_dana: number;
}

export class GetRefSumberDanaForEditDto implements IGetRefSumberDanaForEditDto {
    ref_sumber_dana!: CreateOrEditRefSumberDanaDto;

    constructor(data?: IGetRefSumberDanaForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_sumber_dana = _data["ref_sumber_dana"] ? CreateOrEditRefSumberDanaDto.fromJS(_data["ref_sumber_dana"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefSumberDanaForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberDanaForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_sumber_dana"] = this.ref_sumber_dana ? this.ref_sumber_dana.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefSumberDanaForEditDto {
    ref_sumber_dana: CreateOrEditRefSumberDanaDto;
}

/** RefSumberDana List in Tabular model */
export class GetRefSumberDanaForListDto implements IGetRefSumberDanaForListDto {
    /** Items in array of object */
    items!: RefSumberDanaDto[];

    constructor(data?: IGetRefSumberDanaForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefSumberDanaDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefSumberDanaForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberDanaForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSumberDana List in Tabular model */
export interface IGetRefSumberDanaForListDto {
    /** Items in array of object */
    items: RefSumberDanaDto[];
}

export class GetRefSumberDanaForViewDto implements IGetRefSumberDanaForViewDto {
    id!: number;
    nama_sumber_dana!: string;
    ringkasan_sumber_dana!: string;
    status_sumber_dana!: number;

    constructor(data?: IGetRefSumberDanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_dana = _data["nama_sumber_dana"];
            this.ringkasan_sumber_dana = _data["ringkasan_sumber_dana"];
            this.status_sumber_dana = _data["status_sumber_dana"];
        }
    }

    static fromJS(data: any): GetRefSumberDanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberDanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_dana"] = this.nama_sumber_dana;
        data["ringkasan_sumber_dana"] = this.ringkasan_sumber_dana;
        data["status_sumber_dana"] = this.status_sumber_dana;
        return data; 
    }
}

export interface IGetRefSumberDanaForViewDto {
    id: number;
    nama_sumber_dana: string;
    ringkasan_sumber_dana: string;
    status_sumber_dana: number;
}

/** RefSumberDana List in Tabular model */
export class PagedResultDtoOfRefSumberDanaForViewDto implements IPagedResultDtoOfRefSumberDanaForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefSumberDanaForViewDto[];

    constructor(data?: IPagedResultDtoOfRefSumberDanaForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefSumberDanaForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefSumberDanaForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefSumberDanaForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSumberDana List in Tabular model */
export interface IPagedResultDtoOfRefSumberDanaForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefSumberDanaForViewDto[];
}

export class RefSumberDanaDto implements IRefSumberDanaDto {
    id!: number;
    nama_sumber_dana!: string;
    ringkasan_sumber_dana!: string;
    status_sumber_dana!: number;

    constructor(data?: IRefSumberDanaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_dana = _data["nama_sumber_dana"];
            this.ringkasan_sumber_dana = _data["ringkasan_sumber_dana"];
            this.status_sumber_dana = _data["status_sumber_dana"];
        }
    }

    static fromJS(data: any): RefSumberDanaDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefSumberDanaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_dana"] = this.nama_sumber_dana;
        data["ringkasan_sumber_dana"] = this.ringkasan_sumber_dana;
        data["status_sumber_dana"] = this.status_sumber_dana;
        return data; 
    }
}

export interface IRefSumberDanaDto {
    id: number;
    nama_sumber_dana: string;
    ringkasan_sumber_dana: string;
    status_sumber_dana: number;
}

export class CreateOrEditRefSumberPeruntukanDto implements ICreateOrEditRefSumberPeruntukanDto {
    id!: number;
    nama_sumber_peruntukan!: string;
    status_sumber_peruntukan!: number;

    constructor(data?: ICreateOrEditRefSumberPeruntukanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_peruntukan = _data["nama_sumber_peruntukan"];
            this.status_sumber_peruntukan = _data["status_sumber_peruntukan"];
        }
    }

    static fromJS(data: any): CreateOrEditRefSumberPeruntukanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefSumberPeruntukanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_peruntukan"] = this.nama_sumber_peruntukan;
        data["status_sumber_peruntukan"] = this.status_sumber_peruntukan;
        return data; 
    }
}

export interface ICreateOrEditRefSumberPeruntukanDto {
    id: number;
    nama_sumber_peruntukan: string;
    status_sumber_peruntukan: number;
}

export class GetRefSumberPeruntukanForEditDto implements IGetRefSumberPeruntukanForEditDto {
    ref_sumber_peruntukan!: CreateOrEditRefSumberPeruntukanDto;

    constructor(data?: IGetRefSumberPeruntukanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_sumber_peruntukan = _data["ref_sumber_peruntukan"] ? CreateOrEditRefSumberPeruntukanDto.fromJS(_data["ref_sumber_peruntukan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefSumberPeruntukanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberPeruntukanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_sumber_peruntukan"] = this.ref_sumber_peruntukan ? this.ref_sumber_peruntukan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefSumberPeruntukanForEditDto {
    ref_sumber_peruntukan: CreateOrEditRefSumberPeruntukanDto;
}

/** RefSumberPeruntukan List in Tabular model */
export class GetRefSumberPeruntukanForListDto implements IGetRefSumberPeruntukanForListDto {
    /** Items in array of object */
    items!: RefSumberPeruntukanDto[];

    constructor(data?: IGetRefSumberPeruntukanForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefSumberPeruntukanDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefSumberPeruntukanForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberPeruntukanForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSumberPeruntukan List in Tabular model */
export interface IGetRefSumberPeruntukanForListDto {
    /** Items in array of object */
    items: RefSumberPeruntukanDto[];
}

export class GetRefSumberPeruntukanForViewDto implements IGetRefSumberPeruntukanForViewDto {
    id!: number;
    nama_sumber_peruntukan!: string;
    status_sumber_peruntukan!: number;

    constructor(data?: IGetRefSumberPeruntukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_peruntukan = _data["nama_sumber_peruntukan"];
            this.status_sumber_peruntukan = _data["status_sumber_peruntukan"];
        }
    }

    static fromJS(data: any): GetRefSumberPeruntukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefSumberPeruntukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_peruntukan"] = this.nama_sumber_peruntukan;
        data["status_sumber_peruntukan"] = this.status_sumber_peruntukan;
        return data; 
    }
}

export interface IGetRefSumberPeruntukanForViewDto {
    id: number;
    nama_sumber_peruntukan: string;
    status_sumber_peruntukan: number;
}

/** RefSumberPeruntukan List in Tabular model */
export class PagedResultDtoOfRefSumberPeruntukanForViewDto implements IPagedResultDtoOfRefSumberPeruntukanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefSumberPeruntukanForViewDto[];

    constructor(data?: IPagedResultDtoOfRefSumberPeruntukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefSumberPeruntukanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefSumberPeruntukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefSumberPeruntukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefSumberPeruntukan List in Tabular model */
export interface IPagedResultDtoOfRefSumberPeruntukanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefSumberPeruntukanForViewDto[];
}

export class RefSumberPeruntukanDto implements IRefSumberPeruntukanDto {
    id!: number;
    nama_sumber_peruntukan!: string;
    status_sumber_peruntukan!: number;

    constructor(data?: IRefSumberPeruntukanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_sumber_peruntukan = _data["nama_sumber_peruntukan"];
            this.status_sumber_peruntukan = _data["status_sumber_peruntukan"];
        }
    }

    static fromJS(data: any): RefSumberPeruntukanDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefSumberPeruntukanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_sumber_peruntukan"] = this.nama_sumber_peruntukan;
        data["status_sumber_peruntukan"] = this.status_sumber_peruntukan;
        return data; 
    }
}

export interface IRefSumberPeruntukanDto {
    id: number;
    nama_sumber_peruntukan: string;
    status_sumber_peruntukan: number;
}

export class CreateOrEditRefTapakRumahDto implements ICreateOrEditRefTapakRumahDto {
    id!: number;
    nama_tapak_rumah!: string;
    status_tapak_rumah!: number;

    constructor(data?: ICreateOrEditRefTapakRumahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_tapak_rumah = _data["nama_tapak_rumah"];
            this.status_tapak_rumah = _data["status_tapak_rumah"];
        }
    }

    static fromJS(data: any): CreateOrEditRefTapakRumahDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefTapakRumahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_tapak_rumah"] = this.nama_tapak_rumah;
        data["status_tapak_rumah"] = this.status_tapak_rumah;
        return data; 
    }
}

export interface ICreateOrEditRefTapakRumahDto {
    id: number;
    nama_tapak_rumah: string;
    status_tapak_rumah: number;
}

export class GetRefTapakRumahForEditDto implements IGetRefTapakRumahForEditDto {
    ref_tapak_rumah!: CreateOrEditRefTapakRumahDto;

    constructor(data?: IGetRefTapakRumahForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_tapak_rumah = _data["ref_tapak_rumah"] ? CreateOrEditRefTapakRumahDto.fromJS(_data["ref_tapak_rumah"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefTapakRumahForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefTapakRumahForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_tapak_rumah"] = this.ref_tapak_rumah ? this.ref_tapak_rumah.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefTapakRumahForEditDto {
    ref_tapak_rumah: CreateOrEditRefTapakRumahDto;
}

/** RefTapakRumah List in Tabular model */
export class GetRefTapakRumahForListDto implements IGetRefTapakRumahForListDto {
    /** Items in array of object */
    items!: RefTapakRumahDto[];

    constructor(data?: IGetRefTapakRumahForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefTapakRumahDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefTapakRumahForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefTapakRumahForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefTapakRumah List in Tabular model */
export interface IGetRefTapakRumahForListDto {
    /** Items in array of object */
    items: RefTapakRumahDto[];
}

export class GetRefTapakRumahForViewDto implements IGetRefTapakRumahForViewDto {
    id!: number;
    nama_tapak_rumah!: string;
    status_tapak_rumah!: number;

    constructor(data?: IGetRefTapakRumahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_tapak_rumah = _data["nama_tapak_rumah"];
            this.status_tapak_rumah = _data["status_tapak_rumah"];
        }
    }

    static fromJS(data: any): GetRefTapakRumahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefTapakRumahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_tapak_rumah"] = this.nama_tapak_rumah;
        data["status_tapak_rumah"] = this.status_tapak_rumah;
        return data; 
    }
}

export interface IGetRefTapakRumahForViewDto {
    id: number;
    nama_tapak_rumah: string;
    status_tapak_rumah: number;
}

/** RefTapakRumah List in Tabular model */
export class PagedResultDtoOfRefTapakRumahForViewDto implements IPagedResultDtoOfRefTapakRumahForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefTapakRumahForViewDto[];

    constructor(data?: IPagedResultDtoOfRefTapakRumahForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefTapakRumahForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefTapakRumahForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefTapakRumahForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefTapakRumah List in Tabular model */
export interface IPagedResultDtoOfRefTapakRumahForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefTapakRumahForViewDto[];
}

export class RefTapakRumahDto implements IRefTapakRumahDto {
    id!: number;
    nama_tapak_rumah!: string;
    status_tapak_rumah!: number;

    constructor(data?: IRefTapakRumahDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_tapak_rumah = _data["nama_tapak_rumah"];
            this.status_tapak_rumah = _data["status_tapak_rumah"];
        }
    }

    static fromJS(data: any): RefTapakRumahDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefTapakRumahDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_tapak_rumah"] = this.nama_tapak_rumah;
        data["status_tapak_rumah"] = this.status_tapak_rumah;
        return data; 
    }
}

export interface IRefTapakRumahDto {
    id: number;
    nama_tapak_rumah: string;
    status_tapak_rumah: number;
}

export class CreateOrEditRefWarganegaraDto implements ICreateOrEditRefWarganegaraDto {
    id!: number;
    kod_warganegara!: string;
    nama_warganegara!: string;
    status_warganegara!: number;

    constructor(data?: ICreateOrEditRefWarganegaraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.kod_warganegara = _data["kod_warganegara"];
            this.nama_warganegara = _data["nama_warganegara"];
            this.status_warganegara = _data["status_warganegara"];
        }
    }

    static fromJS(data: any): CreateOrEditRefWarganegaraDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditRefWarganegaraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["kod_warganegara"] = this.kod_warganegara;
        data["nama_warganegara"] = this.nama_warganegara;
        data["status_warganegara"] = this.status_warganegara;
        return data; 
    }
}

export interface ICreateOrEditRefWarganegaraDto {
    id: number;
    kod_warganegara: string;
    nama_warganegara: string;
    status_warganegara: number;
}

export class GetRefWarganegaraForEditDto implements IGetRefWarganegaraForEditDto {
    ref_warganegara!: CreateOrEditRefWarganegaraDto;

    constructor(data?: IGetRefWarganegaraForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ref_warganegara = _data["ref_warganegara"] ? CreateOrEditRefWarganegaraDto.fromJS(_data["ref_warganegara"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetRefWarganegaraForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefWarganegaraForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ref_warganegara"] = this.ref_warganegara ? this.ref_warganegara.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetRefWarganegaraForEditDto {
    ref_warganegara: CreateOrEditRefWarganegaraDto;
}

/** RefWarganegara List in Tabular model */
export class GetRefWarganegaraForListDto implements IGetRefWarganegaraForListDto {
    /** Items in array of object */
    items!: RefWarganegaraDto[];

    constructor(data?: IGetRefWarganegaraForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(RefWarganegaraDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetRefWarganegaraForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefWarganegaraForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefWarganegara List in Tabular model */
export interface IGetRefWarganegaraForListDto {
    /** Items in array of object */
    items: RefWarganegaraDto[];
}

export class GetRefWarganegaraForViewDto implements IGetRefWarganegaraForViewDto {
    id!: number;
    kod_warganegara!: string;
    nama_warganegara!: string;
    status_warganegara!: number;

    constructor(data?: IGetRefWarganegaraForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.kod_warganegara = _data["kod_warganegara"];
            this.nama_warganegara = _data["nama_warganegara"];
            this.status_warganegara = _data["status_warganegara"];
        }
    }

    static fromJS(data: any): GetRefWarganegaraForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRefWarganegaraForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["kod_warganegara"] = this.kod_warganegara;
        data["nama_warganegara"] = this.nama_warganegara;
        data["status_warganegara"] = this.status_warganegara;
        return data; 
    }
}

export interface IGetRefWarganegaraForViewDto {
    id: number;
    kod_warganegara: string;
    nama_warganegara: string;
    status_warganegara: number;
}

/** RefWarganegara List in Tabular model */
export class PagedResultDtoOfRefWarganegaraForViewDto implements IPagedResultDtoOfRefWarganegaraForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetRefWarganegaraForViewDto[];

    constructor(data?: IPagedResultDtoOfRefWarganegaraForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetRefWarganegaraForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfRefWarganegaraForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfRefWarganegaraForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** RefWarganegara List in Tabular model */
export interface IPagedResultDtoOfRefWarganegaraForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetRefWarganegaraForViewDto[];
}

export class RefWarganegaraDto implements IRefWarganegaraDto {
    id!: number;
    kod_warganegara!: string;
    nama_warganegara!: string;
    status_warganegara!: number;

    constructor(data?: IRefWarganegaraDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.kod_warganegara = _data["kod_warganegara"];
            this.nama_warganegara = _data["nama_warganegara"];
            this.status_warganegara = _data["status_warganegara"];
        }
    }

    static fromJS(data: any): RefWarganegaraDto {
        data = typeof data === 'object' ? data : {};
        let result = new RefWarganegaraDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["kod_warganegara"] = this.kod_warganegara;
        data["nama_warganegara"] = this.nama_warganegara;
        data["status_warganegara"] = this.status_warganegara;
        return data; 
    }
}

export interface IRefWarganegaraDto {
    id: number;
    kod_warganegara: string;
    nama_warganegara: string;
    status_warganegara: number;
}

export class ChangePasswordDto implements IChangePasswordDto {
    kata_laluan_lama!: string;
    kata_laluan_baru!: string;
    ulang_kata_laluan_baru!: string;

    constructor(data?: IChangePasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.kata_laluan_lama = _data["kata_laluan_lama"];
            this.kata_laluan_baru = _data["kata_laluan_baru"];
            this.ulang_kata_laluan_baru = _data["ulang_kata_laluan_baru"];
        }
    }

    static fromJS(data: any): ChangePasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["kata_laluan_lama"] = this.kata_laluan_lama;
        data["kata_laluan_baru"] = this.kata_laluan_baru;
        data["ulang_kata_laluan_baru"] = this.ulang_kata_laluan_baru;
        return data; 
    }
}

export interface IChangePasswordDto {
    kata_laluan_lama: string;
    kata_laluan_baru: string;
    ulang_kata_laluan_baru: string;
}

export class GetProfilDto implements IGetProfilDto {
    pengguna!: PenggunaProfilDto;
    daerah!: string;
    negeri!: string;
    peranan!: string;
    kementerian!: string;
    agensi!: string;

    constructor(data?: IGetProfilDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pengguna = _data["pengguna"] ? PenggunaProfilDto.fromJS(_data["pengguna"]) : <any>undefined;
            this.daerah = _data["daerah"];
            this.negeri = _data["negeri"];
            this.peranan = _data["peranan"];
            this.kementerian = _data["kementerian"];
            this.agensi = _data["agensi"];
        }
    }

    static fromJS(data: any): GetProfilDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetProfilDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pengguna"] = this.pengguna ? this.pengguna.toJSON() : <any>undefined;
        data["daerah"] = this.daerah;
        data["negeri"] = this.negeri;
        data["peranan"] = this.peranan;
        data["kementerian"] = this.kementerian;
        data["agensi"] = this.agensi;
        return data; 
    }
}

export interface IGetProfilDto {
    pengguna: PenggunaProfilDto;
    daerah: string;
    negeri: string;
    peranan: string;
    kementerian: string;
    agensi: string;
}

export class OutputGambarProfil implements IOutputGambarProfil {
    gambar!: string;

    constructor(data?: IOutputGambarProfil) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.gambar = _data["gambar"];
        }
    }

    static fromJS(data: any): OutputGambarProfil {
        data = typeof data === 'object' ? data : {};
        let result = new OutputGambarProfil();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["gambar"] = this.gambar;
        return data; 
    }
}

export interface IOutputGambarProfil {
    gambar: string;
}

export class PenggunaProfilDto implements IPenggunaProfilDto {
    id!: number;
    nama!: string;
    id_kementerian!: number;
    id_agensi!: number;
    no_kp!: string;
    jawatan!: string;
    alamat_1!: string;
    alamat_2!: string;
    telefon_pejabat!: string;
    telefon_bimbit!: string;
    fax!: string;
    emel!: string;
    kata_laluan!: string;
    id_peranan!: number;
    poskod!: string;
    id_daerah!: number;
    id_negeri!: number;
    gambar!: string;

    constructor(data?: IPenggunaProfilDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_kementerian = _data["id_kementerian"];
            this.id_agensi = _data["id_agensi"];
            this.no_kp = _data["no_kp"];
            this.jawatan = _data["jawatan"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.telefon_pejabat = _data["telefon_pejabat"];
            this.telefon_bimbit = _data["telefon_bimbit"];
            this.fax = _data["fax"];
            this.emel = _data["emel"];
            this.kata_laluan = _data["kata_laluan"];
            this.id_peranan = _data["id_peranan"];
            this.poskod = _data["poskod"];
            this.id_daerah = _data["id_daerah"];
            this.id_negeri = _data["id_negeri"];
            this.gambar = _data["gambar"];
        }
    }

    static fromJS(data: any): PenggunaProfilDto {
        data = typeof data === 'object' ? data : {};
        let result = new PenggunaProfilDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_kementerian"] = this.id_kementerian;
        data["id_agensi"] = this.id_agensi;
        data["no_kp"] = this.no_kp;
        data["jawatan"] = this.jawatan;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["telefon_pejabat"] = this.telefon_pejabat;
        data["telefon_bimbit"] = this.telefon_bimbit;
        data["fax"] = this.fax;
        data["emel"] = this.emel;
        data["kata_laluan"] = this.kata_laluan;
        data["id_peranan"] = this.id_peranan;
        data["poskod"] = this.poskod;
        data["id_daerah"] = this.id_daerah;
        data["id_negeri"] = this.id_negeri;
        data["gambar"] = this.gambar;
        return data; 
    }
}

export interface IPenggunaProfilDto {
    id: number;
    nama: string;
    id_kementerian: number;
    id_agensi: number;
    no_kp: string;
    jawatan: string;
    alamat_1: string;
    alamat_2: string;
    telefon_pejabat: string;
    telefon_bimbit: string;
    fax: string;
    emel: string;
    kata_laluan: string;
    id_peranan: number;
    poskod: string;
    id_daerah: number;
    id_negeri: number;
    gambar: string;
}

export class UpdateProfilDto implements IUpdateProfilDto {
    pengguna!: PenggunaProfilDto;

    constructor(data?: IUpdateProfilDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pengguna = _data["pengguna"] ? PenggunaProfilDto.fromJS(_data["pengguna"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateProfilDto {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateProfilDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pengguna"] = this.pengguna ? this.pengguna.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IUpdateProfilDto {
    pengguna: PenggunaProfilDto;
}

export class CreateOrEditTabungBayaranSkbBulananDto implements ICreateOrEditTabungBayaranSkbBulananDto {
    id!: number;
    id_tabung_bayaran_skb!: number;
    id_tabung!: number;
    bulan!: string;
    tahun!: number;
    jumlah!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;

    constructor(data?: ICreateOrEditTabungBayaranSkbBulananDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_bayaran_skb = _data["id_tabung_bayaran_skb"];
            this.id_tabung = _data["id_tabung"];
            this.bulan = _data["bulan"];
            this.tahun = _data["tahun"];
            this.jumlah = _data["jumlah"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditTabungBayaranSkbBulananDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungBayaranSkbBulananDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_bayaran_skb"] = this.id_tabung_bayaran_skb;
        data["id_tabung"] = this.id_tabung;
        data["bulan"] = this.bulan;
        data["tahun"] = this.tahun;
        data["jumlah"] = this.jumlah;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrEditTabungBayaranSkbBulananDto {
    id: number;
    id_tabung_bayaran_skb: number;
    id_tabung: number;
    bulan: string;
    tahun: number;
    jumlah: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
}

export class GetTabungBayaranSkbBulananForEditDto implements IGetTabungBayaranSkbBulananForEditDto {
    tabung_bayaran_skb_bulanan!: CreateOrEditTabungBayaranSkbBulananDto;

    constructor(data?: IGetTabungBayaranSkbBulananForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_bayaran_skb_bulanan = _data["tabung_bayaran_skb_bulanan"] ? CreateOrEditTabungBayaranSkbBulananDto.fromJS(_data["tabung_bayaran_skb_bulanan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungBayaranSkbBulananForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranSkbBulananForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_bayaran_skb_bulanan"] = this.tabung_bayaran_skb_bulanan ? this.tabung_bayaran_skb_bulanan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungBayaranSkbBulananForEditDto {
    tabung_bayaran_skb_bulanan: CreateOrEditTabungBayaranSkbBulananDto;
}

export class GetTabungBayaranSkbBulananForViewDto implements IGetTabungBayaranSkbBulananForViewDto {
    id!: number;
    id_tabung_bayaran_skb!: number;
    bulan!: string;
    tahun!: string;
    jumlah!: string;

    constructor(data?: IGetTabungBayaranSkbBulananForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_bayaran_skb = _data["id_tabung_bayaran_skb"];
            this.bulan = _data["bulan"];
            this.tahun = _data["tahun"];
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): GetTabungBayaranSkbBulananForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranSkbBulananForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_bayaran_skb"] = this.id_tabung_bayaran_skb;
        data["bulan"] = this.bulan;
        data["tahun"] = this.tahun;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface IGetTabungBayaranSkbBulananForViewDto {
    id: number;
    id_tabung_bayaran_skb: number;
    bulan: string;
    tahun: string;
    jumlah: string;
}

export class OutputCreateSkbBulananDto implements IOutputCreateSkbBulananDto {
    message!: string;

    constructor(data?: IOutputCreateSkbBulananDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputCreateSkbBulananDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputCreateSkbBulananDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputCreateSkbBulananDto {
    message: string;
}

/** TabungBayaranSkbBulanan List in Tabular model */
export class PagedResultDtoOfTabungBayaranSkbBulananForViewDto implements IPagedResultDtoOfTabungBayaranSkbBulananForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungBayaranSkbBulananForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungBayaranSkbBulananForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungBayaranSkbBulananForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungBayaranSkbBulananForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungBayaranSkbBulananForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBayaranSkbBulanan List in Tabular model */
export interface IPagedResultDtoOfTabungBayaranSkbBulananForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungBayaranSkbBulananForViewDto[];
}

export class CreateOrEditTabungBayaranSkbDto implements ICreateOrEditTabungBayaranSkbDto {
    id!: number;
    no_rujukan_skb!: string;
    id_tabung_kelulusan!: number;
    nama_pegawai!: string;
    id_agensi!: number;
    perihal!: string;
    tarikh_mula!: moment.Moment;
    tarikh_tamat!: moment.Moment;
    jumlah_siling_peruntukan!: number;
    jumlah_baki_peruntukan!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    hapus!: boolean;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;
    id_tabung!: number;
    id_bencana!: number;

    constructor(data?: ICreateOrEditTabungBayaranSkbDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.no_rujukan_skb = _data["no_rujukan_skb"];
            this.id_tabung_kelulusan = _data["id_tabung_kelulusan"];
            this.nama_pegawai = _data["nama_pegawai"];
            this.id_agensi = _data["id_agensi"];
            this.perihal = _data["perihal"];
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
            this.tarikh_tamat = _data["tarikh_tamat"] ? moment(_data["tarikh_tamat"].toString()) : <any>undefined;
            this.jumlah_siling_peruntukan = _data["jumlah_siling_peruntukan"];
            this.jumlah_baki_peruntukan = _data["jumlah_baki_peruntukan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.hapus = _data["hapus"];
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.id_tabung = _data["id_tabung"];
            this.id_bencana = _data["id_bencana"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungBayaranSkbDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungBayaranSkbDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no_rujukan_skb"] = this.no_rujukan_skb;
        data["id_tabung_kelulusan"] = this.id_tabung_kelulusan;
        data["nama_pegawai"] = this.nama_pegawai;
        data["id_agensi"] = this.id_agensi;
        data["perihal"] = this.perihal;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        data["tarikh_tamat"] = this.tarikh_tamat ? this.tarikh_tamat.toISOString() : <any>undefined;
        data["jumlah_siling_peruntukan"] = this.jumlah_siling_peruntukan;
        data["jumlah_baki_peruntukan"] = this.jumlah_baki_peruntukan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["hapus"] = this.hapus;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["id_tabung"] = this.id_tabung;
        data["id_bencana"] = this.id_bencana;
        return data; 
    }
}

export interface ICreateOrEditTabungBayaranSkbDto {
    id: number;
    no_rujukan_skb: string;
    id_tabung_kelulusan: number;
    nama_pegawai: string;
    id_agensi: number;
    perihal: string;
    tarikh_mula: moment.Moment;
    tarikh_tamat: moment.Moment;
    jumlah_siling_peruntukan: number;
    jumlah_baki_peruntukan: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    hapus: boolean;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
    id_tabung: number;
    id_bencana: number;
}

export class GetRujukanKelulusanSkbDto implements IGetRujukanKelulusanSkbDto {
    no_rujukan_kelulusan!: string;
    id_tabung!: number;

    constructor(data?: IGetRujukanKelulusanSkbDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.id_tabung = _data["id_tabung"];
        }
    }

    static fromJS(data: any): GetRujukanKelulusanSkbDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRujukanKelulusanSkbDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["id_tabung"] = this.id_tabung;
        return data; 
    }
}

export interface IGetRujukanKelulusanSkbDto {
    no_rujukan_kelulusan: string;
    id_tabung: number;
}

export class GetTabungBayaranSkbForEditDto implements IGetTabungBayaranSkbForEditDto {
    tabung_bayaran_skb!: CreateOrEditTabungBayaranSkbDto;
    rujukan_kelulusan_skb!: GetRujukanKelulusanSkbDto;
    nama_tabung!: string;
    nama_bencana!: string;

    constructor(data?: IGetTabungBayaranSkbForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_bayaran_skb = _data["tabung_bayaran_skb"] ? CreateOrEditTabungBayaranSkbDto.fromJS(_data["tabung_bayaran_skb"]) : <any>undefined;
            this.rujukan_kelulusan_skb = _data["rujukan_kelulusan_skb"] ? GetRujukanKelulusanSkbDto.fromJS(_data["rujukan_kelulusan_skb"]) : <any>undefined;
            this.nama_tabung = _data["nama_tabung"];
            this.nama_bencana = _data["nama_bencana"];
        }
    }

    static fromJS(data: any): GetTabungBayaranSkbForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranSkbForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_bayaran_skb"] = this.tabung_bayaran_skb ? this.tabung_bayaran_skb.toJSON() : <any>undefined;
        data["rujukan_kelulusan_skb"] = this.rujukan_kelulusan_skb ? this.rujukan_kelulusan_skb.toJSON() : <any>undefined;
        data["nama_tabung"] = this.nama_tabung;
        data["nama_bencana"] = this.nama_bencana;
        return data; 
    }
}

export interface IGetTabungBayaranSkbForEditDto {
    tabung_bayaran_skb: CreateOrEditTabungBayaranSkbDto;
    rujukan_kelulusan_skb: GetRujukanKelulusanSkbDto;
    nama_tabung: string;
    nama_bencana: string;
}

export class GetTabungBayaranSkbForViewDto implements IGetTabungBayaranSkbForViewDto {
    id!: number;
    no_rujukan_skb!: string;
    nama_pegawai!: string;
    tarikh_mula!: moment.Moment;
    tarikh_tamat!: moment.Moment;
    jumlah_siling_peruntukan!: string;
    jumlah_baki_peruntukan!: string;
    nama_agensi!: string;
    nama_tabung!: string;
    no_rujukan_kelulusan!: string;
    jumlah_belanja!: number;

    constructor(data?: IGetTabungBayaranSkbForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.no_rujukan_skb = _data["no_rujukan_skb"];
            this.nama_pegawai = _data["nama_pegawai"];
            this.tarikh_mula = _data["tarikh_mula"] ? moment(_data["tarikh_mula"].toString()) : <any>undefined;
            this.tarikh_tamat = _data["tarikh_tamat"] ? moment(_data["tarikh_tamat"].toString()) : <any>undefined;
            this.jumlah_siling_peruntukan = _data["jumlah_siling_peruntukan"];
            this.jumlah_baki_peruntukan = _data["jumlah_baki_peruntukan"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_tabung = _data["nama_tabung"];
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.jumlah_belanja = _data["jumlah_belanja"];
        }
    }

    static fromJS(data: any): GetTabungBayaranSkbForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranSkbForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no_rujukan_skb"] = this.no_rujukan_skb;
        data["nama_pegawai"] = this.nama_pegawai;
        data["tarikh_mula"] = this.tarikh_mula ? this.tarikh_mula.toISOString() : <any>undefined;
        data["tarikh_tamat"] = this.tarikh_tamat ? this.tarikh_tamat.toISOString() : <any>undefined;
        data["jumlah_siling_peruntukan"] = this.jumlah_siling_peruntukan;
        data["jumlah_baki_peruntukan"] = this.jumlah_baki_peruntukan;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_tabung"] = this.nama_tabung;
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["jumlah_belanja"] = this.jumlah_belanja;
        return data; 
    }
}

export interface IGetTabungBayaranSkbForViewDto {
    id: number;
    no_rujukan_skb: string;
    nama_pegawai: string;
    tarikh_mula: moment.Moment;
    tarikh_tamat: moment.Moment;
    jumlah_siling_peruntukan: string;
    jumlah_baki_peruntukan: string;
    nama_agensi: string;
    nama_tabung: string;
    no_rujukan_kelulusan: string;
    jumlah_belanja: number;
}

export class InputCreateBayaranSkbDto implements IInputCreateBayaranSkbDto {
    skb!: CreateOrEditTabungBayaranSkbDto;
    /** Array of kluster object */
    skbBulanan!: InputSkbBulananDto[];

    constructor(data?: IInputCreateBayaranSkbDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.skb = _data["skb"] ? CreateOrEditTabungBayaranSkbDto.fromJS(_data["skb"]) : <any>undefined;
            if (Array.isArray(_data["skbBulanan"])) {
                this.skbBulanan = [] as any;
                for (let item of _data["skbBulanan"])
                    this.skbBulanan!.push(InputSkbBulananDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputCreateBayaranSkbDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputCreateBayaranSkbDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["skb"] = this.skb ? this.skb.toJSON() : <any>undefined;
        if (Array.isArray(this.skbBulanan)) {
            data["skbBulanan"] = [];
            for (let item of this.skbBulanan)
                data["skbBulanan"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInputCreateBayaranSkbDto {
    skb: CreateOrEditTabungBayaranSkbDto;
    /** Array of kluster object */
    skbBulanan: InputSkbBulananDto[];
}

export class InputSkbBulananDto implements IInputSkbBulananDto {
    bulan!: string;
    tahun!: string;
    jumlah!: number;

    constructor(data?: IInputSkbBulananDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bulan = _data["bulan"];
            this.tahun = _data["tahun"];
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): InputSkbBulananDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputSkbBulananDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bulan"] = this.bulan;
        data["tahun"] = this.tahun;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface IInputSkbBulananDto {
    bulan: string;
    tahun: string;
    jumlah: number;
}

export class OutputCreateBayaranSkbDto implements IOutputCreateBayaranSkbDto {
    message!: string;

    constructor(data?: IOutputCreateBayaranSkbDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputCreateBayaranSkbDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputCreateBayaranSkbDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputCreateBayaranSkbDto {
    message: string;
}

/** TabungBayaranSkb List in Tabular model */
export class PagedResultDtoOfTabungBayaranSkbForViewDto implements IPagedResultDtoOfTabungBayaranSkbForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungBayaranSkbForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungBayaranSkbForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungBayaranSkbForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungBayaranSkbForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungBayaranSkbForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBayaranSkb List in Tabular model */
export interface IPagedResultDtoOfTabungBayaranSkbForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungBayaranSkbForViewDto[];
}

export class CreateOrEditTabungBayaranTerusDto implements ICreateOrEditTabungBayaranTerusDto {
    id!: number;
    id_tabung_kelulusan!: number;
    no_baucar!: string;
    penerima!: string;
    tarikh!: moment.Moment;
    perihal!: string;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    hapus!: boolean;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;
    id_tabung!: number;
    id_bencana!: number;
    jumlah!: number;

    constructor(data?: ICreateOrEditTabungBayaranTerusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_kelulusan = _data["id_tabung_kelulusan"];
            this.no_baucar = _data["no_baucar"];
            this.penerima = _data["penerima"];
            this.tarikh = _data["tarikh"] ? moment(_data["tarikh"].toString()) : <any>undefined;
            this.perihal = _data["perihal"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.hapus = _data["hapus"];
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.id_tabung = _data["id_tabung"];
            this.id_bencana = _data["id_bencana"];
            this.jumlah = _data["jumlah"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungBayaranTerusDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungBayaranTerusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_kelulusan"] = this.id_tabung_kelulusan;
        data["no_baucar"] = this.no_baucar;
        data["penerima"] = this.penerima;
        data["tarikh"] = this.tarikh ? this.tarikh.toISOString() : <any>undefined;
        data["perihal"] = this.perihal;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["hapus"] = this.hapus;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["id_tabung"] = this.id_tabung;
        data["id_bencana"] = this.id_bencana;
        data["jumlah"] = this.jumlah;
        return data; 
    }
}

export interface ICreateOrEditTabungBayaranTerusDto {
    id: number;
    id_tabung_kelulusan: number;
    no_baucar: string;
    penerima: string;
    tarikh: moment.Moment;
    perihal: string;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    hapus: boolean;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
    id_tabung: number;
    id_bencana: number;
    jumlah: number;
}

export class GetRujukanKelulusanTerusDto implements IGetRujukanKelulusanTerusDto {
    no_rujukan_kelulusan!: string;
    id_tabung!: number;

    constructor(data?: IGetRujukanKelulusanTerusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.id_tabung = _data["id_tabung"];
        }
    }

    static fromJS(data: any): GetRujukanKelulusanTerusDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRujukanKelulusanTerusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["id_tabung"] = this.id_tabung;
        return data; 
    }
}

export interface IGetRujukanKelulusanTerusDto {
    no_rujukan_kelulusan: string;
    id_tabung: number;
}

export class GetTabungBayaranTerusForEditDto implements IGetTabungBayaranTerusForEditDto {
    tabung_bayaran_terus!: CreateOrEditTabungBayaranTerusDto;
    rujukan_kelulusan_terus!: GetRujukanKelulusanTerusDto;
    nama_tabung!: string;
    nama_bencana!: string;

    constructor(data?: IGetTabungBayaranTerusForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_bayaran_terus = _data["tabung_bayaran_terus"] ? CreateOrEditTabungBayaranTerusDto.fromJS(_data["tabung_bayaran_terus"]) : <any>undefined;
            this.rujukan_kelulusan_terus = _data["rujukan_kelulusan_terus"] ? GetRujukanKelulusanTerusDto.fromJS(_data["rujukan_kelulusan_terus"]) : <any>undefined;
            this.nama_tabung = _data["nama_tabung"];
            this.nama_bencana = _data["nama_bencana"];
        }
    }

    static fromJS(data: any): GetTabungBayaranTerusForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranTerusForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_bayaran_terus"] = this.tabung_bayaran_terus ? this.tabung_bayaran_terus.toJSON() : <any>undefined;
        data["rujukan_kelulusan_terus"] = this.rujukan_kelulusan_terus ? this.rujukan_kelulusan_terus.toJSON() : <any>undefined;
        data["nama_tabung"] = this.nama_tabung;
        data["nama_bencana"] = this.nama_bencana;
        return data; 
    }
}

export interface IGetTabungBayaranTerusForEditDto {
    tabung_bayaran_terus: CreateOrEditTabungBayaranTerusDto;
    rujukan_kelulusan_terus: GetRujukanKelulusanTerusDto;
    nama_tabung: string;
    nama_bencana: string;
}

export class GetTabungBayaranTerusForViewDto implements IGetTabungBayaranTerusForViewDto {
    id!: number;
    id_tabung_kelulusan!: number;
    no_baucar!: string;
    penerima!: string;
    tarikh!: moment.Moment;
    perihal!: string;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    hapus!: boolean;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;
    no_rujukan_terus!: string;
    no_rujukan_kelulusan!: string;
    nama_bencana!: string;

    constructor(data?: IGetTabungBayaranTerusForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_kelulusan = _data["id_tabung_kelulusan"];
            this.no_baucar = _data["no_baucar"];
            this.penerima = _data["penerima"];
            this.tarikh = _data["tarikh"] ? moment(_data["tarikh"].toString()) : <any>undefined;
            this.perihal = _data["perihal"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.hapus = _data["hapus"];
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
            this.no_rujukan_terus = _data["no_rujukan_terus"];
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.nama_bencana = _data["nama_bencana"];
        }
    }

    static fromJS(data: any): GetTabungBayaranTerusForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBayaranTerusForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_kelulusan"] = this.id_tabung_kelulusan;
        data["no_baucar"] = this.no_baucar;
        data["penerima"] = this.penerima;
        data["tarikh"] = this.tarikh ? this.tarikh.toISOString() : <any>undefined;
        data["perihal"] = this.perihal;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["hapus"] = this.hapus;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        data["no_rujukan_terus"] = this.no_rujukan_terus;
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["nama_bencana"] = this.nama_bencana;
        return data; 
    }
}

export interface IGetTabungBayaranTerusForViewDto {
    id: number;
    id_tabung_kelulusan: number;
    no_baucar: string;
    penerima: string;
    tarikh: moment.Moment;
    perihal: string;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    hapus: boolean;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
    no_rujukan_terus: string;
    no_rujukan_kelulusan: string;
    nama_bencana: string;
}

export class OutputCreateBayaranTerusDto implements IOutputCreateBayaranTerusDto {
    message!: string;

    constructor(data?: IOutputCreateBayaranTerusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputCreateBayaranTerusDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputCreateBayaranTerusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputCreateBayaranTerusDto {
    message: string;
}

/** TabungBayaranTerus List in Tabular model */
export class PagedResultDtoOfTabungBayaranTerusForViewDto implements IPagedResultDtoOfTabungBayaranTerusForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungBayaranTerusForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungBayaranTerusForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungBayaranTerusForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungBayaranTerusForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungBayaranTerusForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBayaranTerus List in Tabular model */
export interface IPagedResultDtoOfTabungBayaranTerusForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungBayaranTerusForViewDto[];
}

export class CreateOrEditTabungBwiKirDto implements ICreateOrEditTabungBwiKirDto {
    id!: number;
    id_tabung_bwi!: number;
    id_mangsa!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditTabungBwiKirDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_bwi = _data["id_tabung_bwi"];
            this.id_mangsa = _data["id_mangsa"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungBwiKirDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungBwiKirDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_bwi"] = this.id_tabung_bwi;
        data["id_mangsa"] = this.id_mangsa;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditTabungBwiKirDto {
    id: number;
    id_tabung_bwi: number;
    id_mangsa: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
}

export class GetTabungBwiKirForEditDto implements IGetTabungBwiKirForEditDto {
    tabung_bwi_kir!: CreateOrEditTabungBwiKirDto;

    constructor(data?: IGetTabungBwiKirForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_bwi_kir = _data["tabung_bwi_kir"] ? CreateOrEditTabungBwiKirDto.fromJS(_data["tabung_bwi_kir"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungBwiKirForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBwiKirForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_bwi_kir"] = this.tabung_bwi_kir ? this.tabung_bwi_kir.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungBwiKirForEditDto {
    tabung_bwi_kir: CreateOrEditTabungBwiKirDto;
}

export class GetTabungBwiKirForViewDto implements IGetTabungBwiKirForViewDto {
    id!: number;
    nama!: string;
    nama_daerah!: string;
    nama_negeri!: string;
    jumlah_bwi!: string;

    constructor(data?: IGetTabungBwiKirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_negeri = _data["nama_negeri"];
            this.jumlah_bwi = _data["jumlah_bwi"];
        }
    }

    static fromJS(data: any): GetTabungBwiKirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBwiKirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_negeri"] = this.nama_negeri;
        data["jumlah_bwi"] = this.jumlah_bwi;
        return data; 
    }
}

export interface IGetTabungBwiKirForViewDto {
    id: number;
    nama: string;
    nama_daerah: string;
    nama_negeri: string;
    jumlah_bwi: string;
}

/** TabungBwiKir List in Tabular model */
export class PagedResultDtoOfTabungBwiKirForViewDto implements IPagedResultDtoOfTabungBwiKirForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungBwiKirForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungBwiKirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungBwiKirForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungBwiKirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungBwiKirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBwiKir List in Tabular model */
export interface IPagedResultDtoOfTabungBwiKirForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungBwiKirForViewDto[];
}

export class CreateOrEditTabungBwiDto implements ICreateOrEditTabungBwiDto {
    id!: number;
    id_tabung_kelulusan!: number;
    jumlah_setiap_kir!: number;
    jumlah_kir!: number;
    jumlah_kembali!: number;
    tarikh_eft!: moment.Moment;
    catatan!: string;
    no_rujukan_akuan_kp!: string;
    tarikh_akuan_kp!: moment.Moment;
    no_rujukan_saluran_kpd_bkp!: string;
    tarikh_saluran_kpd_bkp!: moment.Moment;
    no_rujukan_laporan_kpd_bkp!: string;
    tarikh_laporan_kpd_bkp!: moment.Moment;
    no_rujukan_makluman_majlis!: string;
    tarikh_makluman_majlis!: moment.Moment;
    tarikh_majlis_makluman_majlis!: moment.Moment;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditTabungBwiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_kelulusan = _data["id_tabung_kelulusan"];
            this.jumlah_setiap_kir = _data["jumlah_setiap_kir"];
            this.jumlah_kir = _data["jumlah_kir"];
            this.jumlah_kembali = _data["jumlah_kembali"];
            this.tarikh_eft = _data["tarikh_eft"] ? moment(_data["tarikh_eft"].toString()) : <any>undefined;
            this.catatan = _data["catatan"];
            this.no_rujukan_akuan_kp = _data["no_rujukan_akuan_kp"];
            this.tarikh_akuan_kp = _data["tarikh_akuan_kp"] ? moment(_data["tarikh_akuan_kp"].toString()) : <any>undefined;
            this.no_rujukan_saluran_kpd_bkp = _data["no_rujukan_saluran_kpd_bkp"];
            this.tarikh_saluran_kpd_bkp = _data["tarikh_saluran_kpd_bkp"] ? moment(_data["tarikh_saluran_kpd_bkp"].toString()) : <any>undefined;
            this.no_rujukan_laporan_kpd_bkp = _data["no_rujukan_laporan_kpd_bkp"];
            this.tarikh_laporan_kpd_bkp = _data["tarikh_laporan_kpd_bkp"] ? moment(_data["tarikh_laporan_kpd_bkp"].toString()) : <any>undefined;
            this.no_rujukan_makluman_majlis = _data["no_rujukan_makluman_majlis"];
            this.tarikh_makluman_majlis = _data["tarikh_makluman_majlis"] ? moment(_data["tarikh_makluman_majlis"].toString()) : <any>undefined;
            this.tarikh_majlis_makluman_majlis = _data["tarikh_majlis_makluman_majlis"] ? moment(_data["tarikh_majlis_makluman_majlis"].toString()) : <any>undefined;
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungBwiDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungBwiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_kelulusan"] = this.id_tabung_kelulusan;
        data["jumlah_setiap_kir"] = this.jumlah_setiap_kir;
        data["jumlah_kir"] = this.jumlah_kir;
        data["jumlah_kembali"] = this.jumlah_kembali;
        data["tarikh_eft"] = this.tarikh_eft ? this.tarikh_eft.toISOString() : <any>undefined;
        data["catatan"] = this.catatan;
        data["no_rujukan_akuan_kp"] = this.no_rujukan_akuan_kp;
        data["tarikh_akuan_kp"] = this.tarikh_akuan_kp ? this.tarikh_akuan_kp.toISOString() : <any>undefined;
        data["no_rujukan_saluran_kpd_bkp"] = this.no_rujukan_saluran_kpd_bkp;
        data["tarikh_saluran_kpd_bkp"] = this.tarikh_saluran_kpd_bkp ? this.tarikh_saluran_kpd_bkp.toISOString() : <any>undefined;
        data["no_rujukan_laporan_kpd_bkp"] = this.no_rujukan_laporan_kpd_bkp;
        data["tarikh_laporan_kpd_bkp"] = this.tarikh_laporan_kpd_bkp ? this.tarikh_laporan_kpd_bkp.toISOString() : <any>undefined;
        data["no_rujukan_makluman_majlis"] = this.no_rujukan_makluman_majlis;
        data["tarikh_makluman_majlis"] = this.tarikh_makluman_majlis ? this.tarikh_makluman_majlis.toISOString() : <any>undefined;
        data["tarikh_majlis_makluman_majlis"] = this.tarikh_majlis_makluman_majlis ? this.tarikh_majlis_makluman_majlis.toISOString() : <any>undefined;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditTabungBwiDto {
    id: number;
    id_tabung_kelulusan: number;
    jumlah_setiap_kir: number;
    jumlah_kir: number;
    jumlah_kembali: number;
    tarikh_eft: moment.Moment;
    catatan: string;
    no_rujukan_akuan_kp: string;
    tarikh_akuan_kp: moment.Moment;
    no_rujukan_saluran_kpd_bkp: string;
    tarikh_saluran_kpd_bkp: moment.Moment;
    no_rujukan_laporan_kpd_bkp: string;
    tarikh_laporan_kpd_bkp: moment.Moment;
    no_rujukan_makluman_majlis: string;
    tarikh_makluman_majlis: moment.Moment;
    tarikh_majlis_makluman_majlis: moment.Moment;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
}

export class GetAllKirForViewDto implements IGetAllKirForViewDto {
    id!: number;
    nama!: string;
    id_negeri!: number;
    id_daerah!: number;
    nama_negeri!: string;
    nama_daerah!: string;
    isi_rumah!: number;
    jumlah_bwi!: string;

    constructor(data?: IGetAllKirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_negeri = _data["id_negeri"];
            this.id_daerah = _data["id_daerah"];
            this.nama_negeri = _data["nama_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.isi_rumah = _data["isi_rumah"];
            this.jumlah_bwi = _data["jumlah_bwi"];
        }
    }

    static fromJS(data: any): GetAllKirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllKirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_negeri"] = this.id_negeri;
        data["id_daerah"] = this.id_daerah;
        data["nama_negeri"] = this.nama_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["isi_rumah"] = this.isi_rumah;
        data["jumlah_bwi"] = this.jumlah_bwi;
        return data; 
    }
}

export interface IGetAllKirForViewDto {
    id: number;
    nama: string;
    id_negeri: number;
    id_daerah: number;
    nama_negeri: string;
    nama_daerah: string;
    isi_rumah: number;
    jumlah_bwi: string;
}

export class GetRujukanKelulusanBwiDto implements IGetRujukanKelulusanBwiDto {
    no_rujukan_kelulusan!: string;
    id_tabung!: number;
    id_bencana!: number;
    rujukan_surat!: string;
    perihal_surat!: string;

    constructor(data?: IGetRujukanKelulusanBwiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.id_tabung = _data["id_tabung"];
            this.id_bencana = _data["id_bencana"];
            this.rujukan_surat = _data["rujukan_surat"];
            this.perihal_surat = _data["perihal_surat"];
        }
    }

    static fromJS(data: any): GetRujukanKelulusanBwiDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetRujukanKelulusanBwiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["id_tabung"] = this.id_tabung;
        data["id_bencana"] = this.id_bencana;
        data["rujukan_surat"] = this.rujukan_surat;
        data["perihal_surat"] = this.perihal_surat;
        return data; 
    }
}

export interface IGetRujukanKelulusanBwiDto {
    no_rujukan_kelulusan: string;
    id_tabung: number;
    id_bencana: number;
    rujukan_surat: string;
    perihal_surat: string;
}

export class GetTabungBwiForEditDto implements IGetTabungBwiForEditDto {
    tabung_bwi!: CreateOrEditTabungBwiDto;
    rujukan_kelulusan_bwi!: GetRujukanKelulusanBwiDto;
    nama_tabung!: string;
    id_jenis_bencana!: number;
    nama_jenis_bencana!: string;

    constructor(data?: IGetTabungBwiForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_bwi = _data["tabung_bwi"] ? CreateOrEditTabungBwiDto.fromJS(_data["tabung_bwi"]) : <any>undefined;
            this.rujukan_kelulusan_bwi = _data["rujukan_kelulusan_bwi"] ? GetRujukanKelulusanBwiDto.fromJS(_data["rujukan_kelulusan_bwi"]) : <any>undefined;
            this.nama_tabung = _data["nama_tabung"];
            this.id_jenis_bencana = _data["id_jenis_bencana"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
        }
    }

    static fromJS(data: any): GetTabungBwiForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBwiForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_bwi"] = this.tabung_bwi ? this.tabung_bwi.toJSON() : <any>undefined;
        data["rujukan_kelulusan_bwi"] = this.rujukan_kelulusan_bwi ? this.rujukan_kelulusan_bwi.toJSON() : <any>undefined;
        data["nama_tabung"] = this.nama_tabung;
        data["id_jenis_bencana"] = this.id_jenis_bencana;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        return data; 
    }
}

export interface IGetTabungBwiForEditDto {
    tabung_bwi: CreateOrEditTabungBwiDto;
    rujukan_kelulusan_bwi: GetRujukanKelulusanBwiDto;
    nama_tabung: string;
    id_jenis_bencana: number;
    nama_jenis_bencana: string;
}

export class GetTabungBwiForViewDto implements IGetTabungBwiForViewDto {
    id!: number;
    id_tabung_kelulusan!: number;
    jumlah_setiap_kir!: string;
    jumlah_kir!: number;
    tarikh_eft!: moment.Moment;
    jumlah_kembali!: string;
    nama_jenis_bencana!: string;
    tahun_bencana!: number;
    nama_daerah!: string;
    nama_negeri!: string;

    constructor(data?: IGetTabungBwiForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung_kelulusan = _data["id_tabung_kelulusan"];
            this.jumlah_setiap_kir = _data["jumlah_setiap_kir"];
            this.jumlah_kir = _data["jumlah_kir"];
            this.tarikh_eft = _data["tarikh_eft"] ? moment(_data["tarikh_eft"].toString()) : <any>undefined;
            this.jumlah_kembali = _data["jumlah_kembali"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
            this.tahun_bencana = _data["tahun_bencana"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_negeri = _data["nama_negeri"];
        }
    }

    static fromJS(data: any): GetTabungBwiForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungBwiForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung_kelulusan"] = this.id_tabung_kelulusan;
        data["jumlah_setiap_kir"] = this.jumlah_setiap_kir;
        data["jumlah_kir"] = this.jumlah_kir;
        data["tarikh_eft"] = this.tarikh_eft ? this.tarikh_eft.toISOString() : <any>undefined;
        data["jumlah_kembali"] = this.jumlah_kembali;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        data["tahun_bencana"] = this.tahun_bencana;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_negeri"] = this.nama_negeri;
        return data; 
    }
}

export interface IGetTabungBwiForViewDto {
    id: number;
    id_tabung_kelulusan: number;
    jumlah_setiap_kir: string;
    jumlah_kir: number;
    tarikh_eft: moment.Moment;
    jumlah_kembali: string;
    nama_jenis_bencana: string;
    tahun_bencana: number;
    nama_daerah: string;
    nama_negeri: string;
}

export class InputBwiKirDto implements IInputBwiKirDto {
    id_mangsa!: number;

    constructor(data?: IInputBwiKirDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id_mangsa = _data["id_mangsa"];
        }
    }

    static fromJS(data: any): InputBwiKirDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputBwiKirDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id_mangsa"] = this.id_mangsa;
        return data; 
    }
}

export interface IInputBwiKirDto {
    id_mangsa: number;
}

export class InputCreateTabungBwiDto implements IInputCreateTabungBwiDto {
    bwi!: CreateOrEditTabungBwiDto;
    /** Array of kluster object */
    bwiKir!: InputBwiKirDto[];

    constructor(data?: IInputCreateTabungBwiDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bwi = _data["bwi"] ? CreateOrEditTabungBwiDto.fromJS(_data["bwi"]) : <any>undefined;
            if (Array.isArray(_data["bwiKir"])) {
                this.bwiKir = [] as any;
                for (let item of _data["bwiKir"])
                    this.bwiKir!.push(InputBwiKirDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputCreateTabungBwiDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputCreateTabungBwiDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bwi"] = this.bwi ? this.bwi.toJSON() : <any>undefined;
        if (Array.isArray(this.bwiKir)) {
            data["bwiKir"] = [];
            for (let item of this.bwiKir)
                data["bwiKir"].push(item.toJSON());
        }
        return data; 
    }
}

export interface IInputCreateTabungBwiDto {
    bwi: CreateOrEditTabungBwiDto;
    /** Array of kluster object */
    bwiKir: InputBwiKirDto[];
}

/** TabungBwi List in Tabular model */
export class InputResultKirForViewDto implements IInputResultKirForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetAllKirForViewDto[];

    constructor(data?: IInputResultKirForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetAllKirForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): InputResultKirForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new InputResultKirForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBwi List in Tabular model */
export interface IInputResultKirForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetAllKirForViewDto[];
}

/** TabungBwi List in Tabular model */
export class PagedResultDtoOfTabungBwiForViewDto implements IPagedResultDtoOfTabungBwiForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungBwiForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungBwiForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungBwiForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungBwiForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungBwiForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungBwi List in Tabular model */
export interface IPagedResultDtoOfTabungBwiForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungBwiForViewDto[];
}

export class CreateOrEditTabungKelulusanDto implements ICreateOrEditTabungKelulusanDto {
    id!: number;
    no_rujukan_kelulusan!: string;
    id_tabung!: number;
    id_bantuan!: number;
    id_komitmen!: number;
    rujukan_surat!: string;
    tarikh_surat!: moment.Moment;
    jumlah_siling!: number;
    baki_jumlah_siling!: number;
    tarikh_mula_kelulusan!: moment.Moment;
    tarikh_tamat_kelulusan!: moment.Moment;
    perihal_surat!: string;
    rujukan!: string;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    hapus!: boolean;
    id_pengguna_hapus!: number;
    tarikh_hapus!: moment.Moment;
    sebab_hapus!: string;

    constructor(data?: ICreateOrEditTabungKelulusanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.id_tabung = _data["id_tabung"];
            this.id_bantuan = _data["id_bantuan"];
            this.id_komitmen = _data["id_komitmen"];
            this.rujukan_surat = _data["rujukan_surat"];
            this.tarikh_surat = _data["tarikh_surat"] ? moment(_data["tarikh_surat"].toString()) : <any>undefined;
            this.jumlah_siling = _data["jumlah_siling"];
            this.baki_jumlah_siling = _data["baki_jumlah_siling"];
            this.tarikh_mula_kelulusan = _data["tarikh_mula_kelulusan"] ? moment(_data["tarikh_mula_kelulusan"].toString()) : <any>undefined;
            this.tarikh_tamat_kelulusan = _data["tarikh_tamat_kelulusan"] ? moment(_data["tarikh_tamat_kelulusan"].toString()) : <any>undefined;
            this.perihal_surat = _data["perihal_surat"];
            this.rujukan = _data["rujukan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.hapus = _data["hapus"];
            this.id_pengguna_hapus = _data["id_pengguna_hapus"];
            this.tarikh_hapus = _data["tarikh_hapus"] ? moment(_data["tarikh_hapus"].toString()) : <any>undefined;
            this.sebab_hapus = _data["sebab_hapus"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungKelulusanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungKelulusanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["id_tabung"] = this.id_tabung;
        data["id_bantuan"] = this.id_bantuan;
        data["id_komitmen"] = this.id_komitmen;
        data["rujukan_surat"] = this.rujukan_surat;
        data["tarikh_surat"] = this.tarikh_surat ? this.tarikh_surat.toISOString() : <any>undefined;
        data["jumlah_siling"] = this.jumlah_siling;
        data["baki_jumlah_siling"] = this.baki_jumlah_siling;
        data["tarikh_mula_kelulusan"] = this.tarikh_mula_kelulusan ? this.tarikh_mula_kelulusan.toISOString() : <any>undefined;
        data["tarikh_tamat_kelulusan"] = this.tarikh_tamat_kelulusan ? this.tarikh_tamat_kelulusan.toISOString() : <any>undefined;
        data["perihal_surat"] = this.perihal_surat;
        data["rujukan"] = this.rujukan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["hapus"] = this.hapus;
        data["id_pengguna_hapus"] = this.id_pengguna_hapus;
        data["tarikh_hapus"] = this.tarikh_hapus ? this.tarikh_hapus.toISOString() : <any>undefined;
        data["sebab_hapus"] = this.sebab_hapus;
        return data; 
    }
}

export interface ICreateOrEditTabungKelulusanDto {
    id: number;
    no_rujukan_kelulusan: string;
    id_tabung: number;
    id_bantuan: number;
    id_komitmen: number;
    rujukan_surat: string;
    tarikh_surat: moment.Moment;
    jumlah_siling: number;
    baki_jumlah_siling: number;
    tarikh_mula_kelulusan: moment.Moment;
    tarikh_tamat_kelulusan: moment.Moment;
    perihal_surat: string;
    rujukan: string;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    hapus: boolean;
    id_pengguna_hapus: number;
    tarikh_hapus: moment.Moment;
    sebab_hapus: string;
}

export class GetTabungKelulusanForEditDto implements IGetTabungKelulusanForEditDto {
    tabung_kelulusan!: CreateOrEditTabungKelulusanDto;

    constructor(data?: IGetTabungKelulusanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_kelulusan = _data["tabung_kelulusan"] ? CreateOrEditTabungKelulusanDto.fromJS(_data["tabung_kelulusan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungKelulusanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungKelulusanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_kelulusan"] = this.tabung_kelulusan ? this.tabung_kelulusan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungKelulusanForEditDto {
    tabung_kelulusan: CreateOrEditTabungKelulusanDto;
}

export class GetTabungKelulusanForViewDto implements IGetTabungKelulusanForViewDto {
    id!: number;
    no_rujukan_kelulusan!: string;
    nama_tabung!: string;
    nama_jenis_bencana!: string;
    rujukan_surat!: string;
    tarikh_surat!: moment.Moment;
    jumlah_siling!: string;
    baki_jumlah_siling!: string;
    tarikh_mula_kelulusan!: moment.Moment;
    tarikh_tamat_kelulusan!: moment.Moment;
    peruntukan!: string;
    status_tabung!: number;
    perihal_surat!: string;

    constructor(data?: IGetTabungKelulusanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.no_rujukan_kelulusan = _data["no_rujukan_kelulusan"];
            this.nama_tabung = _data["nama_tabung"];
            this.nama_jenis_bencana = _data["nama_jenis_bencana"];
            this.rujukan_surat = _data["rujukan_surat"];
            this.tarikh_surat = _data["tarikh_surat"] ? moment(_data["tarikh_surat"].toString()) : <any>undefined;
            this.jumlah_siling = _data["jumlah_siling"];
            this.baki_jumlah_siling = _data["baki_jumlah_siling"];
            this.tarikh_mula_kelulusan = _data["tarikh_mula_kelulusan"] ? moment(_data["tarikh_mula_kelulusan"].toString()) : <any>undefined;
            this.tarikh_tamat_kelulusan = _data["tarikh_tamat_kelulusan"] ? moment(_data["tarikh_tamat_kelulusan"].toString()) : <any>undefined;
            this.peruntukan = _data["peruntukan"];
            this.status_tabung = _data["status_tabung"];
            this.perihal_surat = _data["perihal_surat"];
        }
    }

    static fromJS(data: any): GetTabungKelulusanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungKelulusanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["no_rujukan_kelulusan"] = this.no_rujukan_kelulusan;
        data["nama_tabung"] = this.nama_tabung;
        data["nama_jenis_bencana"] = this.nama_jenis_bencana;
        data["rujukan_surat"] = this.rujukan_surat;
        data["tarikh_surat"] = this.tarikh_surat ? this.tarikh_surat.toISOString() : <any>undefined;
        data["jumlah_siling"] = this.jumlah_siling;
        data["baki_jumlah_siling"] = this.baki_jumlah_siling;
        data["tarikh_mula_kelulusan"] = this.tarikh_mula_kelulusan ? this.tarikh_mula_kelulusan.toISOString() : <any>undefined;
        data["tarikh_tamat_kelulusan"] = this.tarikh_tamat_kelulusan ? this.tarikh_tamat_kelulusan.toISOString() : <any>undefined;
        data["peruntukan"] = this.peruntukan;
        data["status_tabung"] = this.status_tabung;
        data["perihal_surat"] = this.perihal_surat;
        return data; 
    }
}

export interface IGetTabungKelulusanForViewDto {
    id: number;
    no_rujukan_kelulusan: string;
    nama_tabung: string;
    nama_jenis_bencana: string;
    rujukan_surat: string;
    tarikh_surat: moment.Moment;
    jumlah_siling: string;
    baki_jumlah_siling: string;
    tarikh_mula_kelulusan: moment.Moment;
    tarikh_tamat_kelulusan: moment.Moment;
    peruntukan: string;
    status_tabung: number;
    perihal_surat: string;
}

export class OutputCreateTabungKelulusanDto implements IOutputCreateTabungKelulusanDto {
    message!: string;

    constructor(data?: IOutputCreateTabungKelulusanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputCreateTabungKelulusanDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputCreateTabungKelulusanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputCreateTabungKelulusanDto {
    message: string;
}

/** TabungKelulusan List in Tabular model */
export class PagedResultDtoOfTabungKelulusanForViewDto implements IPagedResultDtoOfTabungKelulusanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungKelulusanForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungKelulusanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungKelulusanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungKelulusanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungKelulusanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungKelulusan List in Tabular model */
export interface IPagedResultDtoOfTabungKelulusanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungKelulusanForViewDto[];
}

export class CreateOrEditTabungPeruntukanDto implements ICreateOrEditTabungPeruntukanDto {
    id!: number;
    id_tabung!: number;
    nama_peruntukan!: string;
    tarikh_peruntukan!: moment.Moment;
    no_rujukan!: string;
    id_sumber_peruntukan!: number;
    sumber_peruntukan_lain!: string;
    jumlah!: number;
    catatan!: string;

    constructor(data?: ICreateOrEditTabungPeruntukanDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung = _data["id_tabung"];
            this.nama_peruntukan = _data["nama_peruntukan"];
            this.tarikh_peruntukan = _data["tarikh_peruntukan"] ? moment(_data["tarikh_peruntukan"].toString()) : <any>undefined;
            this.no_rujukan = _data["no_rujukan"];
            this.id_sumber_peruntukan = _data["id_sumber_peruntukan"];
            this.sumber_peruntukan_lain = _data["sumber_peruntukan_lain"];
            this.jumlah = _data["jumlah"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungPeruntukanDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungPeruntukanDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung"] = this.id_tabung;
        data["nama_peruntukan"] = this.nama_peruntukan;
        data["tarikh_peruntukan"] = this.tarikh_peruntukan ? this.tarikh_peruntukan.toISOString() : <any>undefined;
        data["no_rujukan"] = this.no_rujukan;
        data["id_sumber_peruntukan"] = this.id_sumber_peruntukan;
        data["sumber_peruntukan_lain"] = this.sumber_peruntukan_lain;
        data["jumlah"] = this.jumlah;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface ICreateOrEditTabungPeruntukanDto {
    id: number;
    id_tabung: number;
    nama_peruntukan: string;
    tarikh_peruntukan: moment.Moment;
    no_rujukan: string;
    id_sumber_peruntukan: number;
    sumber_peruntukan_lain: string;
    jumlah: number;
    catatan: string;
}

export class GetTabungPeruntukanForEditDto implements IGetTabungPeruntukanForEditDto {
    tabung_peruntukan!: CreateOrEditTabungPeruntukanDto;

    constructor(data?: IGetTabungPeruntukanForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung_peruntukan = _data["tabung_peruntukan"] ? CreateOrEditTabungPeruntukanDto.fromJS(_data["tabung_peruntukan"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungPeruntukanForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungPeruntukanForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung_peruntukan"] = this.tabung_peruntukan ? this.tabung_peruntukan.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungPeruntukanForEditDto {
    tabung_peruntukan: CreateOrEditTabungPeruntukanDto;
}

export class GetTabungPeruntukanForViewDto implements IGetTabungPeruntukanForViewDto {
    id!: number;
    id_tabung!: number;
    nama_peruntukan!: string;
    tarikh_peruntukan!: moment.Moment;
    no_rujukan!: string;
    id_sumber_peruntukan!: number;
    sumber_peruntukan_lain!: string;
    jumlah!: number;
    catatan!: string;

    constructor(data?: IGetTabungPeruntukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.id_tabung = _data["id_tabung"];
            this.nama_peruntukan = _data["nama_peruntukan"];
            this.tarikh_peruntukan = _data["tarikh_peruntukan"] ? moment(_data["tarikh_peruntukan"].toString()) : <any>undefined;
            this.no_rujukan = _data["no_rujukan"];
            this.id_sumber_peruntukan = _data["id_sumber_peruntukan"];
            this.sumber_peruntukan_lain = _data["sumber_peruntukan_lain"];
            this.jumlah = _data["jumlah"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): GetTabungPeruntukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungPeruntukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["id_tabung"] = this.id_tabung;
        data["nama_peruntukan"] = this.nama_peruntukan;
        data["tarikh_peruntukan"] = this.tarikh_peruntukan ? this.tarikh_peruntukan.toISOString() : <any>undefined;
        data["no_rujukan"] = this.no_rujukan;
        data["id_sumber_peruntukan"] = this.id_sumber_peruntukan;
        data["sumber_peruntukan_lain"] = this.sumber_peruntukan_lain;
        data["jumlah"] = this.jumlah;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IGetTabungPeruntukanForViewDto {
    id: number;
    id_tabung: number;
    nama_peruntukan: string;
    tarikh_peruntukan: moment.Moment;
    no_rujukan: string;
    id_sumber_peruntukan: number;
    sumber_peruntukan_lain: string;
    jumlah: number;
    catatan: string;
}

/** TabungPeruntukan List in Tabular model */
export class PagedResultDtoOfTabungPeruntukanForViewDto implements IPagedResultDtoOfTabungPeruntukanForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungPeruntukanForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungPeruntukanForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungPeruntukanForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungPeruntukanForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungPeruntukanForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** TabungPeruntukan List in Tabular model */
export interface IPagedResultDtoOfTabungPeruntukanForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungPeruntukanForViewDto[];
}

export class CreateOrEditTabungDto implements ICreateOrEditTabungDto {
    id!: number;
    nama_tabung!: string;
    status_tabung!: number;
    tarikh_baki!: moment.Moment;
    baki_bawaan!: number;
    tarikh_akhir_peruntukan!: moment.Moment;
    peruntukan!: number;
    jumlah_keseluruhan!: number;
    jumlah_baki_semasa!: number;
    catatan!: string;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;
    id_tabung_sebelum!: number;
    jumlah_perbelanjaan_semasa!: number;

    constructor(data?: ICreateOrEditTabungDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_tabung = _data["nama_tabung"];
            this.status_tabung = _data["status_tabung"];
            this.tarikh_baki = _data["tarikh_baki"] ? moment(_data["tarikh_baki"].toString()) : <any>undefined;
            this.baki_bawaan = _data["baki_bawaan"];
            this.tarikh_akhir_peruntukan = _data["tarikh_akhir_peruntukan"] ? moment(_data["tarikh_akhir_peruntukan"].toString()) : <any>undefined;
            this.peruntukan = _data["peruntukan"];
            this.jumlah_keseluruhan = _data["jumlah_keseluruhan"];
            this.jumlah_baki_semasa = _data["jumlah_baki_semasa"];
            this.catatan = _data["catatan"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
            this.id_tabung_sebelum = _data["id_tabung_sebelum"];
            this.jumlah_perbelanjaan_semasa = _data["jumlah_perbelanjaan_semasa"];
        }
    }

    static fromJS(data: any): CreateOrEditTabungDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditTabungDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_tabung"] = this.nama_tabung;
        data["status_tabung"] = this.status_tabung;
        data["tarikh_baki"] = this.tarikh_baki ? this.tarikh_baki.toISOString() : <any>undefined;
        data["baki_bawaan"] = this.baki_bawaan;
        data["tarikh_akhir_peruntukan"] = this.tarikh_akhir_peruntukan ? this.tarikh_akhir_peruntukan.toISOString() : <any>undefined;
        data["peruntukan"] = this.peruntukan;
        data["jumlah_keseluruhan"] = this.jumlah_keseluruhan;
        data["jumlah_baki_semasa"] = this.jumlah_baki_semasa;
        data["catatan"] = this.catatan;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        data["id_tabung_sebelum"] = this.id_tabung_sebelum;
        data["jumlah_perbelanjaan_semasa"] = this.jumlah_perbelanjaan_semasa;
        return data; 
    }
}

export interface ICreateOrEditTabungDto {
    id: number;
    nama_tabung: string;
    status_tabung: number;
    tarikh_baki: moment.Moment;
    baki_bawaan: number;
    tarikh_akhir_peruntukan: moment.Moment;
    peruntukan: number;
    jumlah_keseluruhan: number;
    jumlah_baki_semasa: number;
    catatan: string;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
    id_tabung_sebelum: number;
    jumlah_perbelanjaan_semasa: number;
}

export class GetTabungForEditDto implements IGetTabungForEditDto {
    tabung!: CreateOrEditTabungDto;

    constructor(data?: IGetTabungForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.tabung = _data["tabung"] ? CreateOrEditTabungDto.fromJS(_data["tabung"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["tabung"] = this.tabung ? this.tabung.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungForEditDto {
    tabung: CreateOrEditTabungDto;
}

/** Tabung List in Tabular model */
export class GetTabungForListDto implements IGetTabungForListDto {
    /** Items in array of object */
    items!: GetTabungForViewDto[];

    constructor(data?: IGetTabungForListDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTabungForListDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungForListDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Tabung List in Tabular model */
export interface IGetTabungForListDto {
    /** Items in array of object */
    items: GetTabungForViewDto[];
}

export class GetTabungForViewDto implements IGetTabungForViewDto {
    id!: number;
    nama_tabung!: string;
    status_tabung!: number;
    tarikh_baki!: moment.Moment;
    baki_bawaan!: number;
    tarikh_akhir_peruntukan!: number;
    peruntukan!: number;
    jumlah_keseluruhan!: number;
    jumlah_perbelanjaan_semasa!: number;
    jumlah_baki_semasa!: number;
    id_pengguna_cipta!: number;
    tarikh_cipta!: moment.Moment;
    id_pengguna_kemaskini!: number;
    tarikh_kemaskini!: moment.Moment;

    constructor(data?: IGetTabungForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama_tabung = _data["nama_tabung"];
            this.status_tabung = _data["status_tabung"];
            this.tarikh_baki = _data["tarikh_baki"] ? moment(_data["tarikh_baki"].toString()) : <any>undefined;
            this.baki_bawaan = _data["baki_bawaan"];
            this.tarikh_akhir_peruntukan = _data["tarikh_akhir_peruntukan"];
            this.peruntukan = _data["peruntukan"];
            this.jumlah_keseluruhan = _data["jumlah_keseluruhan"];
            this.jumlah_perbelanjaan_semasa = _data["jumlah_perbelanjaan_semasa"];
            this.jumlah_baki_semasa = _data["jumlah_baki_semasa"];
            this.id_pengguna_cipta = _data["id_pengguna_cipta"];
            this.tarikh_cipta = _data["tarikh_cipta"] ? moment(_data["tarikh_cipta"].toString()) : <any>undefined;
            this.id_pengguna_kemaskini = _data["id_pengguna_kemaskini"];
            this.tarikh_kemaskini = _data["tarikh_kemaskini"] ? moment(_data["tarikh_kemaskini"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): GetTabungForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTabungForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama_tabung"] = this.nama_tabung;
        data["status_tabung"] = this.status_tabung;
        data["tarikh_baki"] = this.tarikh_baki ? this.tarikh_baki.toISOString() : <any>undefined;
        data["baki_bawaan"] = this.baki_bawaan;
        data["tarikh_akhir_peruntukan"] = this.tarikh_akhir_peruntukan;
        data["peruntukan"] = this.peruntukan;
        data["jumlah_keseluruhan"] = this.jumlah_keseluruhan;
        data["jumlah_perbelanjaan_semasa"] = this.jumlah_perbelanjaan_semasa;
        data["jumlah_baki_semasa"] = this.jumlah_baki_semasa;
        data["id_pengguna_cipta"] = this.id_pengguna_cipta;
        data["tarikh_cipta"] = this.tarikh_cipta ? this.tarikh_cipta.toISOString() : <any>undefined;
        data["id_pengguna_kemaskini"] = this.id_pengguna_kemaskini;
        data["tarikh_kemaskini"] = this.tarikh_kemaskini ? this.tarikh_kemaskini.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IGetTabungForViewDto {
    id: number;
    nama_tabung: string;
    status_tabung: number;
    tarikh_baki: moment.Moment;
    baki_bawaan: number;
    tarikh_akhir_peruntukan: number;
    peruntukan: number;
    jumlah_keseluruhan: number;
    jumlah_perbelanjaan_semasa: number;
    jumlah_baki_semasa: number;
    id_pengguna_cipta: number;
    tarikh_cipta: moment.Moment;
    id_pengguna_kemaskini: number;
    tarikh_kemaskini: moment.Moment;
}

/** Total Tabung in Tabular model */
export class GetTotalTabungCardForViewDto implements IGetTotalTabungCardForViewDto {
    /** Items in array of object */
    items!: TotalTabungCardForViewDto[];

    constructor(data?: IGetTotalTabungCardForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(TotalTabungCardForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetTotalTabungCardForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetTotalTabungCardForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Total Tabung in Tabular model */
export interface IGetTotalTabungCardForViewDto {
    /** Items in array of object */
    items: TotalTabungCardForViewDto[];
}

/** Tabung List in Tabular model */
export class PagedResultDtoOfTabungForViewDto implements IPagedResultDtoOfTabungForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetTabungForViewDto[];

    constructor(data?: IPagedResultDtoOfTabungForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetTabungForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfTabungForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfTabungForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Tabung List in Tabular model */
export interface IPagedResultDtoOfTabungForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetTabungForViewDto[];
}

export class TotalTabungCardForViewDto implements ITotalTabungCardForViewDto {
    total_keseluruhan_semasa!: string;
    total_peruntukan!: string;
    total_baki_semasa!: string;
    total_baki_bawaan!: string;

    constructor(data?: ITotalTabungCardForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_keseluruhan_semasa = _data["total_keseluruhan_semasa"];
            this.total_peruntukan = _data["total_peruntukan"];
            this.total_baki_semasa = _data["total_baki_semasa"];
            this.total_baki_bawaan = _data["total_baki_bawaan"];
        }
    }

    static fromJS(data: any): TotalTabungCardForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new TotalTabungCardForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_keseluruhan_semasa"] = this.total_keseluruhan_semasa;
        data["total_peruntukan"] = this.total_peruntukan;
        data["total_baki_semasa"] = this.total_baki_semasa;
        data["total_baki_bawaan"] = this.total_baki_bawaan;
        return data; 
    }
}

export interface ITotalTabungCardForViewDto {
    total_keseluruhan_semasa: string;
    total_peruntukan: string;
    total_baki_semasa: string;
    total_baki_bawaan: string;
}

export class ChangeEmelPasswordDto implements IChangeEmelPasswordDto {
    id!: number;
    changeEmel!: string;
    changePassword!: string;

    constructor(data?: IChangeEmelPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.changeEmel = _data["changeEmel"];
            this.changePassword = _data["changePassword"];
        }
    }

    static fromJS(data: any): ChangeEmelPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new ChangeEmelPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["changeEmel"] = this.changeEmel;
        data["changePassword"] = this.changePassword;
        return data; 
    }
}

export interface IChangeEmelPasswordDto {
    id: number;
    changeEmel: string;
    changePassword: string;
}

export class CreateOrEditPenggunaDto implements ICreateOrEditPenggunaDto {
    pengguna!: CreatePenggunaDto;

    constructor(data?: ICreateOrEditPenggunaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pengguna = _data["pengguna"] ? CreatePenggunaDto.fromJS(_data["pengguna"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateOrEditPenggunaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditPenggunaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pengguna"] = this.pengguna ? this.pengguna.toJSON() : <any>undefined;
        return data; 
    }
}

export interface ICreateOrEditPenggunaDto {
    pengguna: CreatePenggunaDto;
}

export class CreatePenggunaDto implements ICreatePenggunaDto {
    id!: number;
    nama!: string;
    id_kementerian!: number;
    id_agensi!: number;
    no_kp!: string;
    jawatan!: string;
    alamat_1!: string;
    alamat_2!: string;
    telefon_pejabat!: string;
    telefon_bimbit!: string;
    fax!: string;
    emel!: string;
    kata_laluan!: string;
    id_peranan!: number;
    poskod!: string;
    id_daerah!: number;
    id_negeri!: number;
    nama_daerah!: string;
    nama_negeri!: string;
    status_pengguna!: number;
    catatan!: string;

    constructor(data?: ICreatePenggunaDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_kementerian = _data["id_kementerian"];
            this.id_agensi = _data["id_agensi"];
            this.no_kp = _data["no_kp"];
            this.jawatan = _data["jawatan"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.telefon_pejabat = _data["telefon_pejabat"];
            this.telefon_bimbit = _data["telefon_bimbit"];
            this.fax = _data["fax"];
            this.emel = _data["emel"];
            this.kata_laluan = _data["kata_laluan"];
            this.id_peranan = _data["id_peranan"];
            this.poskod = _data["poskod"];
            this.id_daerah = _data["id_daerah"];
            this.id_negeri = _data["id_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_negeri = _data["nama_negeri"];
            this.status_pengguna = _data["status_pengguna"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): CreatePenggunaDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePenggunaDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_kementerian"] = this.id_kementerian;
        data["id_agensi"] = this.id_agensi;
        data["no_kp"] = this.no_kp;
        data["jawatan"] = this.jawatan;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["telefon_pejabat"] = this.telefon_pejabat;
        data["telefon_bimbit"] = this.telefon_bimbit;
        data["fax"] = this.fax;
        data["emel"] = this.emel;
        data["kata_laluan"] = this.kata_laluan;
        data["id_peranan"] = this.id_peranan;
        data["poskod"] = this.poskod;
        data["id_daerah"] = this.id_daerah;
        data["id_negeri"] = this.id_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_negeri"] = this.nama_negeri;
        data["status_pengguna"] = this.status_pengguna;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface ICreatePenggunaDto {
    id: number;
    nama: string;
    id_kementerian: number;
    id_agensi: number;
    no_kp: string;
    jawatan: string;
    alamat_1: string;
    alamat_2: string;
    telefon_pejabat: string;
    telefon_bimbit: string;
    fax: string;
    emel: string;
    kata_laluan: string;
    id_peranan: number;
    poskod: string;
    id_daerah: number;
    id_negeri: number;
    nama_daerah: string;
    nama_negeri: string;
    status_pengguna: number;
    catatan: string;
}

export class EditUserDto implements IEditUserDto {
    id!: number;
    nama!: string;
    id_agensi!: number;
    id_kementerian!: number;
    jawatan!: string;
    id_peranan!: number;
    status_pengguna!: number;
    no_kp!: string;
    alamat_1!: string;
    alamat_2!: string;
    telefon_pejabat!: string;
    telefon_bimbit!: string;
    fax!: string;
    emel!: string;
    poskod!: string;
    id_daerah!: number;
    id_negeri!: number;
    nama_daerah!: string;
    nama_negeri!: string;
    kata_laluan!: string;
    catatan!: string;

    constructor(data?: IEditUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_agensi = _data["id_agensi"];
            this.id_kementerian = _data["id_kementerian"];
            this.jawatan = _data["jawatan"];
            this.id_peranan = _data["id_peranan"];
            this.status_pengguna = _data["status_pengguna"];
            this.no_kp = _data["no_kp"];
            this.alamat_1 = _data["alamat_1"];
            this.alamat_2 = _data["alamat_2"];
            this.telefon_pejabat = _data["telefon_pejabat"];
            this.telefon_bimbit = _data["telefon_bimbit"];
            this.fax = _data["fax"];
            this.emel = _data["emel"];
            this.poskod = _data["poskod"];
            this.id_daerah = _data["id_daerah"];
            this.id_negeri = _data["id_negeri"];
            this.nama_daerah = _data["nama_daerah"];
            this.nama_negeri = _data["nama_negeri"];
            this.kata_laluan = _data["kata_laluan"];
            this.catatan = _data["catatan"];
        }
    }

    static fromJS(data: any): EditUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new EditUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_agensi"] = this.id_agensi;
        data["id_kementerian"] = this.id_kementerian;
        data["jawatan"] = this.jawatan;
        data["id_peranan"] = this.id_peranan;
        data["status_pengguna"] = this.status_pengguna;
        data["no_kp"] = this.no_kp;
        data["alamat_1"] = this.alamat_1;
        data["alamat_2"] = this.alamat_2;
        data["telefon_pejabat"] = this.telefon_pejabat;
        data["telefon_bimbit"] = this.telefon_bimbit;
        data["fax"] = this.fax;
        data["emel"] = this.emel;
        data["poskod"] = this.poskod;
        data["id_daerah"] = this.id_daerah;
        data["id_negeri"] = this.id_negeri;
        data["nama_daerah"] = this.nama_daerah;
        data["nama_negeri"] = this.nama_negeri;
        data["kata_laluan"] = this.kata_laluan;
        data["catatan"] = this.catatan;
        return data; 
    }
}

export interface IEditUserDto {
    id: number;
    nama: string;
    id_agensi: number;
    id_kementerian: number;
    jawatan: string;
    id_peranan: number;
    status_pengguna: number;
    no_kp: string;
    alamat_1: string;
    alamat_2: string;
    telefon_pejabat: string;
    telefon_bimbit: string;
    fax: string;
    emel: string;
    poskod: string;
    id_daerah: number;
    id_negeri: number;
    nama_daerah: string;
    nama_negeri: string;
    kata_laluan: string;
    catatan: string;
}

export class GetUserForEditDto implements IGetUserForEditDto {
    pengguna!: EditUserDto;

    constructor(data?: IGetUserForEditDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pengguna = _data["pengguna"] ? EditUserDto.fromJS(_data["pengguna"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetUserForEditDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForEditDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pengguna"] = this.pengguna ? this.pengguna.toJSON() : <any>undefined;
        return data; 
    }
}

export interface IGetUserForEditDto {
    pengguna: EditUserDto;
}

export class GetUserForViewDto implements IGetUserForViewDto {
    id!: number;
    nama!: string;
    id_agensi!: number;
    id_kementerian!: number;
    jawatan!: string;
    id_peranan!: number;
    status_pengguna!: number;
    nama_agensi!: string;
    nama_kementerian!: string;
    peranan!: string;
    no_kp!: string;
    emel!: string;

    constructor(data?: IGetUserForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.nama = _data["nama"];
            this.id_agensi = _data["id_agensi"];
            this.id_kementerian = _data["id_kementerian"];
            this.jawatan = _data["jawatan"];
            this.id_peranan = _data["id_peranan"];
            this.status_pengguna = _data["status_pengguna"];
            this.nama_agensi = _data["nama_agensi"];
            this.nama_kementerian = _data["nama_kementerian"];
            this.peranan = _data["peranan"];
            this.no_kp = _data["no_kp"];
            this.emel = _data["emel"];
        }
    }

    static fromJS(data: any): GetUserForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetUserForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["nama"] = this.nama;
        data["id_agensi"] = this.id_agensi;
        data["id_kementerian"] = this.id_kementerian;
        data["jawatan"] = this.jawatan;
        data["id_peranan"] = this.id_peranan;
        data["status_pengguna"] = this.status_pengguna;
        data["nama_agensi"] = this.nama_agensi;
        data["nama_kementerian"] = this.nama_kementerian;
        data["peranan"] = this.peranan;
        data["no_kp"] = this.no_kp;
        data["emel"] = this.emel;
        return data; 
    }
}

export interface IGetUserForViewDto {
    id: number;
    nama: string;
    id_agensi: number;
    id_kementerian: number;
    jawatan: string;
    id_peranan: number;
    status_pengguna: number;
    nama_agensi: string;
    nama_kementerian: string;
    peranan: string;
    no_kp: string;
    emel: string;
}

export class OutputChangeEmelPasswordDto implements IOutputChangeEmelPasswordDto {
    message!: string;

    constructor(data?: IOutputChangeEmelPasswordDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): OutputChangeEmelPasswordDto {
        data = typeof data === 'object' ? data : {};
        let result = new OutputChangeEmelPasswordDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["message"] = this.message;
        return data; 
    }
}

export interface IOutputChangeEmelPasswordDto {
    message: string;
}

/** Ngo List in Tabular model */
export class PagedResultDtoOfUserForViewDto implements IPagedResultDtoOfUserForViewDto {
    /** Total Count */
    total_count!: number;
    /** Items in array of object */
    items!: GetUserForViewDto[];

    constructor(data?: IPagedResultDtoOfUserForViewDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_count = _data["total_count"];
            if (Array.isArray(_data["items"])) {
                this.items = [] as any;
                for (let item of _data["items"])
                    this.items!.push(GetUserForViewDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): PagedResultDtoOfUserForViewDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagedResultDtoOfUserForViewDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_count"] = this.total_count;
        if (Array.isArray(this.items)) {
            data["items"] = [];
            for (let item of this.items)
                data["items"].push(item.toJSON());
        }
        return data; 
    }
}

/** Ngo List in Tabular model */
export interface IPagedResultDtoOfUserForViewDto {
    /** Total Count */
    total_count: number;
    /** Items in array of object */
    items: GetUserForViewDto[];
}

export interface FileParameter {
    data: any;
    fileName: string;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}